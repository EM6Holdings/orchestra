!function(t,e,i){!function(t){"function"==typeof define&&define.amd?define(["jquery"],t):jQuery&&!jQuery.fn.sparkline&&t(jQuery)}(function(s){"use strict";var r,n,a,h,o,l,g,p,u,c,d,f,v,m,x,y,C,w,b,R,S,k,M,_,H,W,T,q,I,j,P,L,A={},F=0;r=function(){return{common:{type:"line",lineColor:"#00f",fillColor:"#cdf",defaultPixelsPerValue:3,width:"auto",height:"auto",composite:!1,tagValuesAttribute:"values",tagOptionsPrefix:"spark",enableTagOptions:!1,enableHighlight:!0,highlightLighten:1.4,tooltipSkipNull:!0,tooltipPrefix:"",tooltipSuffix:"",disableHiddenCheck:!1,numberFormatter:!1,numberDigitGroupCount:3,numberDigitGroupSep:",",numberDecimalMark:".",disableTooltips:!1,disableInteraction:!1},line:{spotColor:"#f80",highlightSpotColor:"#5f5",highlightLineColor:"#f22",spotRadius:1.5,minSpotColor:"#f80",maxSpotColor:"#f80",lineWidth:1,normalRangeMin:i,normalRangeMax:i,normalRangeColor:"#ccc",drawNormalOnTop:!1,chartRangeMin:i,chartRangeMax:i,chartRangeMinX:i,chartRangeMaxX:i,tooltipFormat:new a('<span style="color: {{color}}">&#9679;</span> {{prefix}}{{y}}{{suffix}}')},bar:{barColor:"#3366cc",negBarColor:"#f44",stackedBarColor:["#3366cc","#dc3912","#ff9900","#109618","#66aa00","#dd4477","#0099c6","#990099"],zeroColor:i,nullColor:i,zeroAxis:!0,barWidth:4,barSpacing:1,chartRangeMax:i,chartRangeMin:i,chartRangeClip:!1,colorMap:i,tooltipFormat:new a('<span style="color: {{color}}">&#9679;</span> {{prefix}}{{value}}{{suffix}}')},tristate:{barWidth:4,barSpacing:1,posBarColor:"#6f6",negBarColor:"#f44",zeroBarColor:"#999",colorMap:{},tooltipFormat:new a('<span style="color: {{color}}">&#9679;</span> {{value:map}}'),tooltipValueLookups:{map:{"-1":"Loss",0:"Draw",1:"Win"}}},discrete:{lineHeight:"auto",thresholdColor:i,thresholdValue:0,chartRangeMax:i,chartRangeMin:i,chartRangeClip:!1,tooltipFormat:new a("{{prefix}}{{value}}{{suffix}}")},bullet:{targetColor:"#f33",targetWidth:3,performanceColor:"#33f",rangeColors:["#d3dafe","#a8b6ff","#7f94ff"],base:i,tooltipFormat:new a("{{fieldkey:fields}} - {{value}}"),tooltipValueLookups:{fields:{r:"Range",p:"Performance",t:"Target"}}},pie:{offset:0,sliceColors:["#3366cc","#dc3912","#ff9900","#109618","#66aa00","#dd4477","#0099c6","#990099"],borderWidth:0,borderColor:"#000",tooltipFormat:new a('<span style="color: {{color}}">&#9679;</span> {{value}} ({{percent.1}}%)')},box:{raw:!1,boxLineColor:"#000",boxFillColor:"#cdf",whiskerColor:"#000",outlierLineColor:"#333",outlierFillColor:"#fff",medianColor:"#f00",showOutliers:!0,outlierIQR:1.5,spotRadius:1.5,target:i,targetColor:"#4a2",chartRangeMax:i,chartRangeMin:i,tooltipFormat:new a("{{field:fields}}: {{value}}"),tooltipFormatFieldlistKey:"field",tooltipValueLookups:{fields:{lq:"Lower Quartile",med:"Median",uq:"Upper Quartile",lo:"Left Outlier",ro:"Right Outlier",lw:"Left Whisker",rw:"Right Whisker"}}}}},W='.jqstooltip { position: absolute;left: 0px;top: 0px;display: block;visibility: hidden;background: rgb(0, 0, 0) transparent;background-color: rgba(0,0,0,0.6);filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=#99000000, endColorstr=#99000000);-ms-filter: "progid:DXImageTransform.Microsoft.gradient(startColorstr=#99000000, endColorstr=#99000000)";color: white;font: 10px arial, san serif;text-align: left;white-space: nowrap;border: 1px solid white;z-index: 10000;}.jqsfield { color: white;padding: 5px 5px 8px 5px;font: 10px arial, san serif;text-align: left;}',n=function(){var t,e;return t=function(){this.init.apply(this,arguments)},arguments.length>1?(arguments[0]?(t.prototype=s.extend(new arguments[0],arguments[arguments.length-1]),t._super=arguments[0].prototype):t.prototype=arguments[arguments.length-1],arguments.length>2&&(e=Array.prototype.slice.call(arguments,1,-1),e.unshift(t.prototype),s.extend.apply(s,e))):t.prototype=arguments[0],t.prototype.cls=t,t},s.SPFormatClass=a=n({fre:/\{\{([\w.]+?)(:(.+?))?\}\}/g,precre:/(\w+)\.(\d+)/,init:function(t,e){this.format=t,this.fclass=e},render:function(t,e,s){var r,n,a,h,o,l=this,g=t;return this.format.replace(this.fre,function(){var t;return n=arguments[1],a=arguments[3],r=l.precre.exec(n),r?(o=r[2],n=r[1]):o=!1,h=g[n],h===i?"":a&&e&&e[a]?(t=e[a],t.get?e[a].get(h)||h:e[a][h]||h):(u(h)&&(h=s.get("numberFormatter")?s.get("numberFormatter")(h):m(h,o,s.get("numberDigitGroupCount"),s.get("numberDigitGroupSep"),s.get("numberDecimalMark"))),h)})}}),s.spformat=function(t,e){return new a(t,e)},h=function(t,e,i){return e>t?e:t>i?i:t},o=function(t,i){var s;return 2===i?(s=e.floor(t.length/2),t.length%2?t[s]:(t[s-1]+t[s])/2):t.length%2?(s=(t.length*i+i)/4,s%1?(t[e.floor(s)]+t[e.floor(s)-1])/2:t[s-1]):(s=(t.length*i+2)/4,s%1?(t[e.floor(s)]+t[e.floor(s)-1])/2:t[s-1])},l=function(t){var e;switch(t){case"undefined":t=i;break;case"null":t=null;break;case"true":t=!0;break;case"false":t=!1;break;default:e=parseFloat(t),t==e&&(t=e)}return t},g=function(t){var e,i=[];for(e=t.length;e--;)i[e]=l(t[e]);return i},p=function(t,e){var i,s,r=[];for(i=0,s=t.length;s>i;i++)t[i]!==e&&r.push(t[i]);return r},u=function(t){return!isNaN(parseFloat(t))&&isFinite(t)},m=function(t,e,i,r,n){var a,h;for(t=(e===!1?parseFloat(t).toString():t.toFixed(e)).split(""),a=(a=s.inArray(".",t))<0?t.length:a,a<t.length&&(t[a]=n),h=a-i;h>0;h-=i)t.splice(h,0,r);return t.join("")},c=function(t,e,i){var s;for(s=e.length;s--;)if((!i||null!==e[s])&&e[s]!==t)return!1;return!0},d=function(t){var e,i=0;for(e=t.length;e--;)i+="number"==typeof t[e]?t[e]:0;return i},v=function(t){return s.isArray(t)?t:[t]},f=function(e){var i;t.createStyleSheet?t.createStyleSheet().cssText=e:(i=t.createElement("style"),i.type="text/css",t.getElementsByTagName("head")[0].appendChild(i),i["string"==typeof t.body.style.WebkitAppearance?"innerText":"innerHTML"]=e)},s.fn.simpledraw=function(e,r,n,a){var h,o;if(n&&(h=this.data("_jqs_vcanvas")))return h;if(s.fn.sparkline.canvas===!1)return!1;if(s.fn.sparkline.canvas===i){var l=t.createElement("canvas");if(l.getContext&&l.getContext("2d"))s.fn.sparkline.canvas=function(t,e,i,s){return new j(t,e,i,s)};else{if(!t.namespaces||t.namespaces.v)return s.fn.sparkline.canvas=!1,!1;t.namespaces.add("v","urn:schemas-microsoft-com:vml","#default#VML"),s.fn.sparkline.canvas=function(t,e,i,s){return new P(t,e,i)}}}return e===i&&(e=s(this).innerWidth()),r===i&&(r=s(this).innerHeight()),h=s.fn.sparkline.canvas(e,r,this,a),o=s(this).data("_jqs_mhandler"),o&&o.registerCanvas(h),h},s.fn.cleardraw=function(){var t=this.data("_jqs_vcanvas");t&&t.reset()},s.RangeMapClass=x=n({init:function(t){var e,i,s=[];for(e in t)t.hasOwnProperty(e)&&"string"==typeof e&&e.indexOf(":")>-1&&(i=e.split(":"),i[0]=0===i[0].length?-(1/0):parseFloat(i[0]),i[1]=0===i[1].length?1/0:parseFloat(i[1]),i[2]=t[e],s.push(i));this.map=t,this.rangelist=s||!1},get:function(t){var e,s,r,n=this.rangelist;if((r=this.map[t])!==i)return r;if(n)for(e=n.length;e--;)if(s=n[e],s[0]<=t&&s[1]>=t)return s[2];return i}}),s.range_map=function(t){return new x(t)},y=n({init:function(t,e){var i=s(t);this.$el=i,this.options=e,this.currentPageX=0,this.currentPageY=0,this.el=t,this.splist=[],this.tooltip=null,this.over=!1,this.displayTooltips=!e.get("disableTooltips"),this.highlightEnabled=!e.get("disableHighlight")},registerSparkline:function(t){this.splist.push(t),this.over&&this.updateDisplay()},registerCanvas:function(t){var e=s(t.canvas);this.canvas=t,this.$canvas=e,e.mouseenter(s.proxy(this.mouseenter,this)),e.mouseleave(s.proxy(this.mouseleave,this)),e.click(s.proxy(this.mouseclick,this))},reset:function(t){this.splist=[],this.tooltip&&t&&(this.tooltip.remove(),this.tooltip=i)},mouseclick:function(t){var e=s.Event("sparklineClick");e.originalEvent=t,e.sparklines=this.splist,this.$el.trigger(e)},mouseenter:function(e){s(t.body).unbind("mousemove.jqs"),s(t.body).bind("mousemove.jqs",s.proxy(this.mousemove,this)),this.over=!0,this.currentPageX=e.pageX,this.currentPageY=e.pageY,this.currentEl=e.target,!this.tooltip&&this.displayTooltips&&(this.tooltip=new C(this.options),this.tooltip.updatePosition(e.pageX,e.pageY)),this.updateDisplay()},mouseleave:function(){s(t.body).unbind("mousemove.jqs");var e,i,r=this.splist,n=r.length,a=!1;for(this.over=!1,this.currentEl=null,this.tooltip&&(this.tooltip.remove(),this.tooltip=null),i=0;n>i;i++)e=r[i],e.clearRegionHighlight()&&(a=!0);a&&this.canvas.render()},mousemove:function(t){this.currentPageX=t.pageX,this.currentPageY=t.pageY,this.currentEl=t.target,this.tooltip&&this.tooltip.updatePosition(t.pageX,t.pageY),this.updateDisplay()},updateDisplay:function(){var t,e,i,r,n,a=this.splist,h=a.length,o=!1,l=this.$canvas.offset(),g=this.currentPageX-l.left,p=this.currentPageY-l.top;if(this.over){for(i=0;h>i;i++)e=a[i],r=e.setRegionHighlight(this.currentEl,g,p),r&&(o=!0);if(o){if(n=s.Event("sparklineRegionChange"),n.sparklines=this.splist,this.$el.trigger(n),this.tooltip){for(t="",i=0;h>i;i++)e=a[i],t+=e.getCurrentRegionTooltip();this.tooltip.setContent(t)}this.disableHighlight||this.canvas.render()}null===r&&this.mouseleave()}}}),C=n({sizeStyle:"position: static !important;display: block !important;visibility: hidden !important;float: left !important;",init:function(e){var i,r=e.get("tooltipClassname","jqstooltip"),n=this.sizeStyle;this.container=e.get("tooltipContainer")||t.body,this.tooltipOffsetX=e.get("tooltipOffsetX",10),this.tooltipOffsetY=e.get("tooltipOffsetY",12),s("#jqssizetip").remove(),s("#jqstooltip").remove(),this.sizetip=s("<div/>",{id:"jqssizetip",style:n,"class":r}),this.tooltip=s("<div/>",{id:"jqstooltip","class":r}).appendTo(this.container),i=this.tooltip.offset(),this.offsetLeft=i.left,this.offsetTop=i.top,this.hidden=!0,s(window).unbind("resize.jqs scroll.jqs"),s(window).bind("resize.jqs scroll.jqs",s.proxy(this.updateWindowDims,this)),this.updateWindowDims()},updateWindowDims:function(){this.scrollTop=s(window).scrollTop(),this.scrollLeft=s(window).scrollLeft(),this.scrollRight=this.scrollLeft+s(window).width(),this.updatePosition()},getSize:function(t){this.sizetip.html(t).appendTo(this.container),this.width=this.sizetip.width()+1,this.height=this.sizetip.height(),this.sizetip.remove()},setContent:function(t){return t?(this.getSize(t),this.tooltip.html(t).css({width:this.width,height:this.height,visibility:"visible"}),void(this.hidden&&(this.hidden=!1,this.updatePosition()))):(this.tooltip.css("visibility","hidden"),void(this.hidden=!0))},updatePosition:function(t,e){if(t===i){if(this.mousex===i)return;t=this.mousex-this.offsetLeft,e=this.mousey-this.offsetTop}else this.mousex=t-=this.offsetLeft,this.mousey=e-=this.offsetTop;this.height&&this.width&&!this.hidden&&(e-=this.height+this.tooltipOffsetY,t+=this.tooltipOffsetX,e<this.scrollTop&&(e=this.scrollTop),t<this.scrollLeft?t=this.scrollLeft:t+this.width>this.scrollRight&&(t=this.scrollRight-this.width),this.tooltip.css({left:t,top:e}))},remove:function(){this.tooltip.remove(),this.sizetip.remove(),this.sizetip=this.tooltip=i,s(window).unbind("resize.jqs scroll.jqs")}}),T=function(){f(W)},s(T),L=[],s.fn.sparkline=function(e,r){return this.each(function(){var n,a,h=new s.fn.sparkline.options(this,r),o=s(this);if(n=function(){var r,n,a,l,g,p,u;return"html"===e||e===i?(u=this.getAttribute(h.get("tagValuesAttribute")),u!==i&&null!==u||(u=o.html()),r=u.replace(/(^\s*<!--)|(-->\s*$)|\s+/g,"").split(",")):r=e,n="auto"===h.get("width")?r.length*h.get("defaultPixelsPerValue"):h.get("width"),"auto"===h.get("height")?h.get("composite")&&s.data(this,"_jqs_vcanvas")||(l=t.createElement("span"),l.innerHTML="a",o.html(l),a=s(l).innerHeight()||s(l).height(),s(l).remove(),l=null):a=h.get("height"),h.get("disableInteraction")?g=!1:(g=s.data(this,"_jqs_mhandler"),g?h.get("composite")||g.reset():(g=new y(this,h),s.data(this,"_jqs_mhandler",g))),h.get("composite")&&!s.data(this,"_jqs_vcanvas")?void(s.data(this,"_jqs_errnotify")||(alert("Attempted to attach a composite sparkline to an element with no existing sparkline"),s.data(this,"_jqs_errnotify",!0))):(p=new(s.fn.sparkline[h.get("type")])(this,r,h,n,a),p.render(),void(g&&g.registerSparkline(p)))},s(this).html()&&!h.get("disableHiddenCheck")&&s(this).is(":hidden")||!s(this).parents("body").length){if(!h.get("composite")&&s.data(this,"_jqs_pending"))for(a=L.length;a;a--)L[a-1][0]==this&&L.splice(a-1,1);L.push([this,n]),s.data(this,"_jqs_pending",!0)}else n.call(this)})},s.fn.sparkline.defaults=r(),s.sparkline_display_visible=function(){var t,e,i,r=[];for(e=0,i=L.length;i>e;e++)t=L[e][0],s(t).is(":visible")&&!s(t).parents().is(":hidden")?(L[e][1].call(t),s.data(L[e][0],"_jqs_pending",!1),r.push(e)):s(t).closest("html").length||s.data(t,"_jqs_pending")||(s.data(L[e][0],"_jqs_pending",!1),r.push(e));for(e=r.length;e;e--)L.splice(r[e-1],1)},s.fn.sparkline.options=n({init:function(t,e){var i,r,n,a;this.userOptions=e=e||{},this.tag=t,this.tagValCache={},r=s.fn.sparkline.defaults,n=r.common,this.tagOptionsPrefix=e.enableTagOptions&&(e.tagOptionsPrefix||n.tagOptionsPrefix),a=this.getTagSetting("type"),i=a===A?r[e.type||n.type]:r[a],this.mergedOptions=s.extend({},n,i,e)},getTagSetting:function(t){var e,s,r,n,a=this.tagOptionsPrefix;if(a===!1||a===i)return A;if(this.tagValCache.hasOwnProperty(t))e=this.tagValCache.key;else{if(e=this.tag.getAttribute(a+t),e===i||null===e)e=A;else if("["===e.substr(0,1))for(e=e.substr(1,e.length-2).split(","),s=e.length;s--;)e[s]=l(e[s].replace(/(^\s*)|(\s*$)/g,""));else if("{"===e.substr(0,1))for(r=e.substr(1,e.length-2).split(","),e={},s=r.length;s--;)n=r[s].split(":",2),e[n[0].replace(/(^\s*)|(\s*$)/g,"")]=l(n[1].replace(/(^\s*)|(\s*$)/g,""));else e=l(e);this.tagValCache.key=e}return e},get:function(t,e){var s,r=this.getTagSetting(t);return r!==A?r:(s=this.mergedOptions[t])===i?e:s}}),s.fn.sparkline._base=n({disabled:!1,init:function(t,e,r,n,a){this.el=t,this.$el=s(t),this.values=e,this.options=r,this.width=n,this.height=a,this.currentRegion=i},initTarget:function(){var t=!this.options.get("disableInteraction");(this.target=this.$el.simpledraw(this.width,this.height,this.options.get("composite"),t))?(this.canvasWidth=this.target.pixelWidth,this.canvasHeight=this.target.pixelHeight):this.disabled=!0},render:function(){return this.disabled?(this.el.innerHTML="",!1):!0},getRegion:function(t,e){},setRegionHighlight:function(t,e,s){var r,n=this.currentRegion,a=!this.options.get("disableHighlight");return e>this.canvasWidth||s>this.canvasHeight||0>e||0>s?null:(r=this.getRegion(t,e,s),n!==r?(n!==i&&a&&this.removeHighlight(),this.currentRegion=r,r!==i&&a&&this.renderHighlight(),!0):!1)},clearRegionHighlight:function(){return this.currentRegion!==i?(this.removeHighlight(),this.currentRegion=i,!0):!1},renderHighlight:function(){this.changeHighlight(!0)},removeHighlight:function(){this.changeHighlight(!1)},changeHighlight:function(t){},getCurrentRegionTooltip:function(){var t,e,r,n,h,o,l,g,p,u,c,d,f,v,m=this.options,x="",y=[];if(this.currentRegion===i)return"";if(t=this.getCurrentRegionFields(),c=m.get("tooltipFormatter"))return c(this,m,t);if(m.get("tooltipChartTitle")&&(x+='<div class="jqs jqstitle">'+m.get("tooltipChartTitle")+"</div>\n"),e=this.options.get("tooltipFormat"),!e)return"";if(s.isArray(e)||(e=[e]),s.isArray(t)||(t=[t]),l=this.options.get("tooltipFormatFieldlist"),g=this.options.get("tooltipFormatFieldlistKey"),l&&g){for(p=[],o=t.length;o--;)u=t[o][g],-1!=(v=s.inArray(u,l))&&(p[v]=t[o]);t=p}for(r=e.length,f=t.length,o=0;r>o;o++)for(d=e[o],"string"==typeof d&&(d=new a(d)),n=d.fclass||"jqsfield",v=0;f>v;v++)t[v].isNull&&m.get("tooltipSkipNull")||(s.extend(t[v],{prefix:m.get("tooltipPrefix"),suffix:m.get("tooltipSuffix")}),h=d.render(t[v],m.get("tooltipValueLookups"),m),y.push('<div class="'+n+'">'+h+"</div>"));return y.length?x+y.join("\n"):""},getCurrentRegionFields:function(){},calcHighlightColor:function(t,i){var s,r,n,a,o=i.get("highlightColor"),l=i.get("highlightLighten");if(o)return o;if(l&&(s=/^#([0-9a-f])([0-9a-f])([0-9a-f])$/i.exec(t)||/^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/i.exec(t))){for(n=[],r=4===t.length?16:1,a=0;3>a;a++)n[a]=h(e.round(parseInt(s[a+1],16)*r*l),0,255);return"rgb("+n.join(",")+")"}return t}}),w={changeHighlight:function(t){var e,i=this.currentRegion,r=this.target,n=this.regionShapes[i];n&&(e=this.renderRegion(i,t),s.isArray(e)||s.isArray(n)?(r.replaceWithShapes(n,e),this.regionShapes[i]=s.map(e,function(t){return t.id})):(r.replaceWithShape(n,e),this.regionShapes[i]=e.id))},render:function(){var t,e,i,r,n=this.values,a=this.target,h=this.regionShapes;if(this.cls._super.render.call(this)){for(i=n.length;i--;)if(t=this.renderRegion(i))if(s.isArray(t)){for(e=[],r=t.length;r--;)t[r].append(),e.push(t[r].id);h[i]=e}else t.append(),h[i]=t.id;else h[i]=null;a.render()}}},s.fn.sparkline.line=b=n(s.fn.sparkline._base,{type:"line",init:function(t,e,i,s,r){b._super.init.call(this,t,e,i,s,r),this.vertices=[],this.regionMap=[],this.xvalues=[],this.yvalues=[],this.yminmax=[],this.hightlightSpotId=null,this.lastShapeId=null,this.initTarget()},getRegion:function(t,e,s){var r,n=this.regionMap;for(r=n.length;r--;)if(null!==n[r]&&e>=n[r][0]&&e<=n[r][1])return n[r][2];return i},getCurrentRegionFields:function(){var t=this.currentRegion;return{isNull:null===this.yvalues[t],x:this.xvalues[t],y:this.yvalues[t],color:this.options.get("lineColor"),fillColor:this.options.get("fillColor"),offset:t}},renderHighlight:function(){var t,e,s=this.currentRegion,r=this.target,n=this.vertices[s],a=this.options,h=a.get("spotRadius"),o=a.get("highlightSpotColor"),l=a.get("highlightLineColor");n&&(h&&o&&(t=r.drawCircle(n[0],n[1],h,i,o),this.highlightSpotId=t.id,r.insertAfterShape(this.lastShapeId,t)),l&&(e=r.drawLine(n[0],this.canvasTop,n[0],this.canvasTop+this.canvasHeight,l),this.highlightLineId=e.id,r.insertAfterShape(this.lastShapeId,e)))},removeHighlight:function(){var t=this.target;this.highlightSpotId&&(t.removeShapeId(this.highlightSpotId),this.highlightSpotId=null),this.highlightLineId&&(t.removeShapeId(this.highlightLineId),this.highlightLineId=null)},scanValues:function(){var t,i,s,r,n,a=this.values,h=a.length,o=this.xvalues,l=this.yvalues,g=this.yminmax;for(t=0;h>t;t++)i=a[t],s="string"==typeof a[t],r="object"==typeof a[t]&&a[t]instanceof Array,n=s&&a[t].split(":"),s&&2===n.length?(o.push(Number(n[0])),l.push(Number(n[1])),g.push(Number(n[1]))):r?(o.push(i[0]),l.push(i[1]),g.push(i[1])):(o.push(t),null===a[t]||"null"===a[t]?l.push(null):(l.push(Number(i)),g.push(Number(i))));this.options.get("xvalues")&&(o=this.options.get("xvalues")),this.maxy=this.maxyorg=e.max.apply(e,g),this.miny=this.minyorg=e.min.apply(e,g),this.maxx=e.max.apply(e,o),this.minx=e.min.apply(e,o),this.xvalues=o,this.yvalues=l,this.yminmax=g},processRangeOptions:function(){var t=this.options,e=t.get("normalRangeMin"),s=t.get("normalRangeMax");e!==i&&(e<this.miny&&(this.miny=e),s>this.maxy&&(this.maxy=s)),t.get("chartRangeMin")!==i&&(t.get("chartRangeClip")||t.get("chartRangeMin")<this.miny)&&(this.miny=t.get("chartRangeMin")),t.get("chartRangeMax")!==i&&(t.get("chartRangeClip")||t.get("chartRangeMax")>this.maxy)&&(this.maxy=t.get("chartRangeMax")),t.get("chartRangeMinX")!==i&&(t.get("chartRangeClipX")||t.get("chartRangeMinX")<this.minx)&&(this.minx=t.get("chartRangeMinX")),t.get("chartRangeMaxX")!==i&&(t.get("chartRangeClipX")||t.get("chartRangeMaxX")>this.maxx)&&(this.maxx=t.get("chartRangeMaxX"))},drawNormalRange:function(t,s,r,n,a){var h=this.options.get("normalRangeMin"),o=this.options.get("normalRangeMax"),l=s+e.round(r-r*((o-this.miny)/a)),g=e.round(r*(o-h)/a);this.target.drawRect(t,l,n,g,i,this.options.get("normalRangeColor")).append()},render:function(){var t,r,n,a,h,o,l,g,p,u,c,d,f,v,m,y,C,w,R,S,k,M,_,H,W,T=this.options,q=this.target,I=this.canvasWidth,j=this.canvasHeight,P=this.vertices,L=T.get("spotRadius"),A=this.regionMap;if(b._super.render.call(this)&&(this.scanValues(),this.processRangeOptions(),_=this.xvalues,H=this.yvalues,this.yminmax.length&&!(this.yvalues.length<2))){for(a=h=0,t=this.maxx-this.minx===0?1:this.maxx-this.minx,r=this.maxy-this.miny===0?1:this.maxy-this.miny,n=this.yvalues.length-1,L&&(4*L>I||4*L>j)&&(L=0),L&&(k=T.get("highlightSpotColor")&&!T.get("disableInteraction"),(k||T.get("minSpotColor")||T.get("spotColor")&&H[n]===this.miny)&&(j-=e.ceil(L)),(k||T.get("maxSpotColor")||T.get("spotColor")&&H[n]===this.maxy)&&(j-=e.ceil(L),a+=e.ceil(L)),(k||(T.get("minSpotColor")||T.get("maxSpotColor"))&&(H[0]===this.miny||H[0]===this.maxy))&&(h+=e.ceil(L),I-=e.ceil(L)),(k||T.get("spotColor")||T.get("minSpotColor")||T.get("maxSpotColor")&&(H[n]===this.miny||H[n]===this.maxy))&&(I-=e.ceil(L))),j--,T.get("normalRangeMin")===i||T.get("drawNormalOnTop")||this.drawNormalRange(h,a,j,I,r),l=[],g=[l],v=m=null,y=H.length,W=0;y>W;W++)p=_[W],c=_[W+1],u=H[W],d=h+e.round((p-this.minx)*(I/t)),f=y-1>W?h+e.round((c-this.minx)*(I/t)):I,m=d+(f-d)/2,A[W]=[v||0,m,W],v=m,null===u?W&&(null!==H[W-1]&&(l=[],g.push(l)),P.push(null)):(u<this.miny&&(u=this.miny),u>this.maxy&&(u=this.maxy),l.length||l.push([d,a+j]),o=[d,a+e.round(j-j*((u-this.miny)/r))],l.push(o),P.push(o));for(C=[],w=[],R=g.length,W=0;R>W;W++)l=g[W],l.length&&(T.get("fillColor")&&(l.push([l[l.length-1][0],a+j]),w.push(l.slice(0)),l.pop()),l.length>2&&(l[0]=[l[0][0],l[1][1]]),C.push(l));for(R=w.length,W=0;R>W;W++)q.drawShape(w[W],T.get("fillColor"),T.get("fillColor")).append();for(T.get("normalRangeMin")!==i&&T.get("drawNormalOnTop")&&this.drawNormalRange(h,a,j,I,r),R=C.length,W=0;R>W;W++)q.drawShape(C[W],T.get("lineColor"),i,T.get("lineWidth")).append();if(L&&T.get("valueSpots"))for(S=T.get("valueSpots"),S.get===i&&(S=new x(S)),W=0;y>W;W++)M=S.get(H[W]),M&&q.drawCircle(h+e.round((_[W]-this.minx)*(I/t)),a+e.round(j-j*((H[W]-this.miny)/r)),L,i,M).append();L&&T.get("spotColor")&&null!==H[n]&&q.drawCircle(h+e.round((_[_.length-1]-this.minx)*(I/t)),a+e.round(j-j*((H[n]-this.miny)/r)),L,i,T.get("spotColor")).append(),this.maxy!==this.minyorg&&(L&&T.get("minSpotColor")&&(p=_[s.inArray(this.minyorg,H)],q.drawCircle(h+e.round((p-this.minx)*(I/t)),a+e.round(j-j*((this.minyorg-this.miny)/r)),L,i,T.get("minSpotColor")).append()),L&&T.get("maxSpotColor")&&(p=_[s.inArray(this.maxyorg,H)],q.drawCircle(h+e.round((p-this.minx)*(I/t)),a+e.round(j-j*((this.maxyorg-this.miny)/r)),L,i,T.get("maxSpotColor")).append())),this.lastShapeId=q.getLastShapeId(),this.canvasTop=a,q.render()}}}),s.fn.sparkline.bar=R=n(s.fn.sparkline._base,w,{type:"bar",init:function(t,r,n,a,o){var u,c,d,f,v,m,y,C,w,b,S,k,M,_,H,W,T,q,I,j,P,L,A=parseInt(n.get("barWidth"),10),F=parseInt(n.get("barSpacing"),10),B=n.get("chartRangeMin"),O=n.get("chartRangeMax"),V=n.get("chartRangeClip"),X=1/0,z=-(1/0);for(R._super.init.call(this,t,r,n,a,o),m=0,y=r.length;y>m;m++)j=r[m],u="string"==typeof j&&j.indexOf(":")>-1,(u||s.isArray(j))&&(H=!0,u&&(j=r[m]=g(j.split(":"))),j=p(j,null),c=e.min.apply(e,j),d=e.max.apply(e,j),X>c&&(X=c),d>z&&(z=d));this.stacked=H,this.regionShapes={},this.barWidth=A,this.barSpacing=F,this.totalBarWidth=A+F,this.width=a=r.length*A+(r.length-1)*F,this.initTarget(),V&&(M=B===i?-(1/0):B,_=O===i?1/0:O),v=[],f=H?[]:v;var N=[],E=[];for(m=0,y=r.length;y>m;m++)if(H)for(W=r[m],r[m]=I=[],N[m]=0,f[m]=E[m]=0,T=0,q=W.length;q>T;T++)j=I[T]=V?h(W[T],M,_):W[T],null!==j&&(j>0&&(N[m]+=j),0>X&&z>0?0>j?E[m]+=e.abs(j):f[m]+=j:f[m]+=e.abs(j-(0>j?z:X)),v.push(j));else j=V?h(r[m],M,_):r[m],j=r[m]=l(j),null!==j&&v.push(j);this.max=k=e.max.apply(e,v),this.min=S=e.min.apply(e,v),this.stackMax=z=H?e.max.apply(e,N):k,this.stackMin=X=H?e.min.apply(e,v):S,n.get("chartRangeMin")!==i&&(n.get("chartRangeClip")||n.get("chartRangeMin")<S)&&(S=n.get("chartRangeMin")),n.get("chartRangeMax")!==i&&(n.get("chartRangeClip")||n.get("chartRangeMax")>k)&&(k=n.get("chartRangeMax")),this.zeroAxis=w=n.get("zeroAxis",!0),b=0>=S&&k>=0&&w?0:0==w?S:S>0?S:k,this.xaxisOffset=b,C=H?e.max.apply(e,f)+e.max.apply(e,E):k-S,this.canvasHeightEf=w&&0>S?this.canvasHeight-2:this.canvasHeight-1,b>S?(L=H&&k>=0?z:k,P=(L-b)/C*this.canvasHeight,P!==e.ceil(P)&&(this.canvasHeightEf-=2,P=e.ceil(P))):P=this.canvasHeight,this.yoffset=P,s.isArray(n.get("colorMap"))?(this.colorMapByIndex=n.get("colorMap"),this.colorMapByValue=null):(this.colorMapByIndex=null,this.colorMapByValue=n.get("colorMap"),this.colorMapByValue&&this.colorMapByValue.get===i&&(this.colorMapByValue=new x(this.colorMapByValue))),this.range=C},getRegion:function(t,s,r){var n=e.floor(s/this.totalBarWidth);return 0>n||n>=this.values.length?i:n},getCurrentRegionFields:function(){var t,e,i=this.currentRegion,s=v(this.values[i]),r=[];for(e=s.length;e--;)t=s[e],r.push({isNull:null===t,value:t,color:this.calcColor(e,t,i),offset:i});return r},calcColor:function(t,e,r){var n,a,h=this.colorMapByIndex,o=this.colorMapByValue,l=this.options;return n=this.stacked?l.get("stackedBarColor"):0>e?l.get("negBarColor"):l.get("barColor"),0===e&&l.get("zeroColor")!==i&&(n=l.get("zeroColor")),o&&(a=o.get(e))?n=a:h&&h.length>r&&(n=h[r]),s.isArray(n)?n[t%n.length]:n},renderRegion:function(t,r){var n,a,h,o,l,g,p,u,d,f,v=this.values[t],m=this.options,x=this.xaxisOffset,y=[],C=this.range,w=this.stacked,b=this.target,R=t*this.totalBarWidth,S=this.canvasHeightEf,k=this.yoffset;if(v=s.isArray(v)?v:[v],p=v.length,u=v[0],o=c(null,v),f=c(x,v,!0),o)return m.get("nullColor")?(h=r?m.get("nullColor"):this.calcHighlightColor(m.get("nullColor"),m),n=k>0?k-1:k,b.drawRect(R,n,this.barWidth-1,0,h,h)):i;for(l=k,g=0;p>g;g++){if(u=v[g],w&&u===x){if(!f||d)continue;d=!0}a=C>0?e.floor(S*(e.abs(u-x)/C))+1:1,x>u||u===x&&0===k?(n=l,l+=a):(n=k-a,k-=a),h=this.calcColor(g,u,t),r&&(h=this.calcHighlightColor(h,m)),y.push(b.drawRect(R,n,this.barWidth-1,a-1,h,h))}return 1===y.length?y[0]:y}}),s.fn.sparkline.tristate=S=n(s.fn.sparkline._base,w,{type:"tristate",init:function(t,e,r,n,a){var h=parseInt(r.get("barWidth"),10),o=parseInt(r.get("barSpacing"),10);S._super.init.call(this,t,e,r,n,a),this.regionShapes={},this.barWidth=h,this.barSpacing=o,this.totalBarWidth=h+o,this.values=s.map(e,Number),this.width=n=e.length*h+(e.length-1)*o,s.isArray(r.get("colorMap"))?(this.colorMapByIndex=r.get("colorMap"),this.colorMapByValue=null):(this.colorMapByIndex=null,this.colorMapByValue=r.get("colorMap"),this.colorMapByValue&&this.colorMapByValue.get===i&&(this.colorMapByValue=new x(this.colorMapByValue))),this.initTarget()},getRegion:function(t,i,s){return e.floor(i/this.totalBarWidth)},getCurrentRegionFields:function(){var t=this.currentRegion;return{isNull:this.values[t]===i,value:this.values[t],color:this.calcColor(this.values[t],t),offset:t}},calcColor:function(t,e){var i,s,r=this.values,n=this.options,a=this.colorMapByIndex,h=this.colorMapByValue;return i=h&&(s=h.get(t))?s:a&&a.length>e?a[e]:r[e]<0?n.get("negBarColor"):r[e]>0?n.get("posBarColor"):n.get("zeroBarColor")},renderRegion:function(t,i){var s,r,n,a,h,o,l=this.values,g=this.options,p=this.target;return s=p.pixelHeight,n=e.round(s/2),a=t*this.totalBarWidth,l[t]<0?(h=n,r=n-1):l[t]>0?(h=0,r=n-1):(h=n-1,r=2),o=this.calcColor(l[t],t),null!==o?(i&&(o=this.calcHighlightColor(o,g)),p.drawRect(a,h,this.barWidth-1,r-1,o,o)):void 0}}),s.fn.sparkline.discrete=k=n(s.fn.sparkline._base,w,{type:"discrete",init:function(t,r,n,a,h){k._super.init.call(this,t,r,n,a,h),this.regionShapes={},this.values=r=s.map(r,Number),this.min=e.min.apply(e,r),this.max=e.max.apply(e,r),this.range=this.max-this.min,this.width=a="auto"===n.get("width")?2*r.length:this.width,this.interval=e.floor(a/r.length),this.itemWidth=a/r.length,n.get("chartRangeMin")!==i&&(n.get("chartRangeClip")||n.get("chartRangeMin")<this.min)&&(this.min=n.get("chartRangeMin")),n.get("chartRangeMax")!==i&&(n.get("chartRangeClip")||n.get("chartRangeMax")>this.max)&&(this.max=n.get("chartRangeMax")),this.initTarget(),this.target&&(this.lineHeight="auto"===n.get("lineHeight")?e.round(.3*this.canvasHeight):n.get("lineHeight"))},getRegion:function(t,i,s){return e.floor(i/this.itemWidth)},getCurrentRegionFields:function(){var t=this.currentRegion;return{isNull:this.values[t]===i,value:this.values[t],offset:t}},renderRegion:function(t,i){var s,r,n,a,o=this.values,l=this.options,g=this.min,p=this.max,u=this.range,c=this.interval,d=this.target,f=this.canvasHeight,v=this.lineHeight,m=f-v;return r=h(o[t],g,p),a=t*c,s=e.round(m-m*((r-g)/u)),n=l.get("thresholdColor")&&r<l.get("thresholdValue")?l.get("thresholdColor"):l.get("lineColor"),i&&(n=this.calcHighlightColor(n,l)),d.drawLine(a,s,a,s+v,n)}}),s.fn.sparkline.bullet=M=n(s.fn.sparkline._base,{type:"bullet",init:function(t,s,r,n,a){var h,o,l;M._super.init.call(this,t,s,r,n,a),this.values=s=g(s),l=s.slice(),l[0]=null===l[0]?l[2]:l[0],l[1]=null===s[1]?l[2]:l[1],h=e.min.apply(e,s),o=e.max.apply(e,s),h=r.get("base")===i?0>h?h:0:r.get("base"),this.min=h,this.max=o,this.range=o-h,this.shapes={},this.valueShapes={},this.regiondata={},this.width=n="auto"===r.get("width")?"4.0em":n,this.target=this.$el.simpledraw(n,a,r.get("composite")),s.length||(this.disabled=!0),this.initTarget()},getRegion:function(t,e,s){var r=this.target.getShapeAt(t,e,s);return r!==i&&this.shapes[r]!==i?this.shapes[r]:i},getCurrentRegionFields:function(){var t=this.currentRegion;return{fieldkey:t.substr(0,1),value:this.values[t.substr(1)],region:t}},changeHighlight:function(t){var e,i=this.currentRegion,s=this.valueShapes[i];switch(delete this.shapes[s],i.substr(0,1)){case"r":e=this.renderRange(i.substr(1),t);break;case"p":e=this.renderPerformance(t);break;case"t":e=this.renderTarget(t)}this.valueShapes[i]=e.id,this.shapes[e.id]=i,this.target.replaceWithShape(s,e)},renderRange:function(t,i){var s=this.values[t],r=e.round(this.canvasWidth*((s-this.min)/this.range)),n=this.options.get("rangeColors")[t-2];return i&&(n=this.calcHighlightColor(n,this.options)),this.target.drawRect(0,0,r-1,this.canvasHeight-1,n,n)},renderPerformance:function(t){var i=this.values[1],s=e.round(this.canvasWidth*((i-this.min)/this.range)),r=this.options.get("performanceColor");return t&&(r=this.calcHighlightColor(r,this.options)),this.target.drawRect(0,e.round(.3*this.canvasHeight),s-1,e.round(.4*this.canvasHeight)-1,r,r)},renderTarget:function(t){var i=this.values[0],s=e.round(this.canvasWidth*((i-this.min)/this.range)-this.options.get("targetWidth")/2),r=e.round(.1*this.canvasHeight),n=this.canvasHeight-2*r,a=this.options.get("targetColor");return t&&(a=this.calcHighlightColor(a,this.options)),this.target.drawRect(s,r,this.options.get("targetWidth")-1,n-1,a,a)},render:function(){var t,e,i=this.values.length,s=this.target;if(M._super.render.call(this)){for(t=2;i>t;t++)e=this.renderRange(t).append(),this.shapes[e.id]="r"+t,this.valueShapes["r"+t]=e.id;null!==this.values[1]&&(e=this.renderPerformance().append(),this.shapes[e.id]="p1",this.valueShapes.p1=e.id),null!==this.values[0]&&(e=this.renderTarget().append(),this.shapes[e.id]="t0",this.valueShapes.t0=e.id),s.render()}}}),s.fn.sparkline.pie=_=n(s.fn.sparkline._base,{type:"pie",init:function(t,i,r,n,a){var h,o=0;if(_._super.init.call(this,t,i,r,n,a),this.shapes={},this.valueShapes={},this.values=i=s.map(i,Number),"auto"===r.get("width")&&(this.width=this.height),i.length>0)for(h=i.length;h--;)o+=i[h];this.total=o,this.initTarget(),this.radius=e.floor(e.min(this.canvasWidth,this.canvasHeight)/2)},getRegion:function(t,e,s){var r=this.target.getShapeAt(t,e,s);return r!==i&&this.shapes[r]!==i?this.shapes[r]:i},getCurrentRegionFields:function(){var t=this.currentRegion;return{isNull:this.values[t]===i,value:this.values[t],percent:this.values[t]/this.total*100,color:this.options.get("sliceColors")[t%this.options.get("sliceColors").length],offset:t}},changeHighlight:function(t){var e=this.currentRegion,i=this.renderSlice(e,t),s=this.valueShapes[e];delete this.shapes[s],this.target.replaceWithShape(s,i),this.valueShapes[e]=i.id,this.shapes[i.id]=e},renderSlice:function(t,s){var r,n,a,h,o,l=this.target,g=this.options,p=this.radius,u=g.get("borderWidth"),c=g.get("offset"),d=2*e.PI,f=this.values,v=this.total,m=c?2*e.PI*(c/360):0;for(h=f.length,a=0;h>a;a++){if(r=m,n=m,v>0&&(n=m+d*(f[a]/v)),t===a)return o=g.get("sliceColors")[a%g.get("sliceColors").length],s&&(o=this.calcHighlightColor(o,g)),l.drawPieSlice(p,p,p-u,r,n,i,o);m=n}},render:function(){var t,s,r=this.target,n=this.values,a=this.options,h=this.radius,o=a.get("borderWidth");
if(_._super.render.call(this)){for(o&&r.drawCircle(h,h,e.floor(h-o/2),a.get("borderColor"),i,o).append(),s=n.length;s--;)n[s]&&(t=this.renderSlice(s).append(),this.valueShapes[s]=t.id,this.shapes[t.id]=s);r.render()}}}),s.fn.sparkline.box=H=n(s.fn.sparkline._base,{type:"box",init:function(t,e,i,r,n){H._super.init.call(this,t,e,i,r,n),this.values=s.map(e,Number),this.width="auto"===i.get("width")?"4.0em":r,this.initTarget(),this.values.length||(this.disabled=1)},getRegion:function(){return 1},getCurrentRegionFields:function(){var t=[{field:"lq",value:this.quartiles[0]},{field:"med",value:this.quartiles[1]},{field:"uq",value:this.quartiles[2]}];return this.loutlier!==i&&t.push({field:"lo",value:this.loutlier}),this.routlier!==i&&t.push({field:"ro",value:this.routlier}),this.lwhisker!==i&&t.push({field:"lw",value:this.lwhisker}),this.rwhisker!==i&&t.push({field:"rw",value:this.rwhisker}),t},render:function(){var t,s,r,n,a,h,l,g,p,u,c,d=this.target,f=this.values,v=f.length,m=this.options,x=this.canvasWidth,y=this.canvasHeight,C=m.get("chartRangeMin")===i?e.min.apply(e,f):m.get("chartRangeMin"),w=m.get("chartRangeMax")===i?e.max.apply(e,f):m.get("chartRangeMax"),b=0;if(H._super.render.call(this)){if(m.get("raw"))m.get("showOutliers")&&f.length>5?(s=f[0],t=f[1],n=f[2],a=f[3],h=f[4],l=f[5],g=f[6]):(t=f[0],n=f[1],a=f[2],h=f[3],l=f[4]);else if(f.sort(function(t,e){return t-e}),n=o(f,1),a=o(f,2),h=o(f,3),r=h-n,m.get("showOutliers")){for(t=l=i,p=0;v>p;p++)t===i&&f[p]>n-r*m.get("outlierIQR")&&(t=f[p]),f[p]<h+r*m.get("outlierIQR")&&(l=f[p]);s=f[0],g=f[v-1]}else t=f[0],l=f[v-1];this.quartiles=[n,a,h],this.lwhisker=t,this.rwhisker=l,this.loutlier=s,this.routlier=g,c=x/(w-C+1),m.get("showOutliers")&&(b=e.ceil(m.get("spotRadius")),x-=2*e.ceil(m.get("spotRadius")),c=x/(w-C+1),t>s&&d.drawCircle((s-C)*c+b,y/2,m.get("spotRadius"),m.get("outlierLineColor"),m.get("outlierFillColor")).append(),g>l&&d.drawCircle((g-C)*c+b,y/2,m.get("spotRadius"),m.get("outlierLineColor"),m.get("outlierFillColor")).append()),d.drawRect(e.round((n-C)*c+b),e.round(.1*y),e.round((h-n)*c),e.round(.8*y),m.get("boxLineColor"),m.get("boxFillColor")).append(),d.drawLine(e.round((t-C)*c+b),e.round(y/2),e.round((n-C)*c+b),e.round(y/2),m.get("lineColor")).append(),d.drawLine(e.round((t-C)*c+b),e.round(y/4),e.round((t-C)*c+b),e.round(y-y/4),m.get("whiskerColor")).append(),d.drawLine(e.round((l-C)*c+b),e.round(y/2),e.round((h-C)*c+b),e.round(y/2),m.get("lineColor")).append(),d.drawLine(e.round((l-C)*c+b),e.round(y/4),e.round((l-C)*c+b),e.round(y-y/4),m.get("whiskerColor")).append(),d.drawLine(e.round((a-C)*c+b),e.round(.1*y),e.round((a-C)*c+b),e.round(.9*y),m.get("medianColor")).append(),m.get("target")&&(u=e.ceil(m.get("spotRadius")),d.drawLine(e.round((m.get("target")-C)*c+b),e.round(y/2-u),e.round((m.get("target")-C)*c+b),e.round(y/2+u),m.get("targetColor")).append(),d.drawLine(e.round((m.get("target")-C)*c+b-u),e.round(y/2),e.round((m.get("target")-C)*c+b+u),e.round(y/2),m.get("targetColor")).append()),d.render()}}}),q=n({init:function(t,e,i,s){this.target=t,this.id=e,this.type=i,this.args=s},append:function(){return this.target.appendShape(this),this}}),I=n({_pxregex:/(\d+)(px)?\s*$/i,init:function(t,e,i){t&&(this.width=t,this.height=e,this.target=i,this.lastShapeId=null,i[0]&&(i=i[0]),s.data(i,"_jqs_vcanvas",this))},drawLine:function(t,e,i,s,r,n){return this.drawShape([[t,e],[i,s]],r,n)},drawShape:function(t,e,i,s){return this._genShape("Shape",[t,e,i,s])},drawCircle:function(t,e,i,s,r,n){return this._genShape("Circle",[t,e,i,s,r,n])},drawPieSlice:function(t,e,i,s,r,n,a){return this._genShape("PieSlice",[t,e,i,s,r,n,a])},drawRect:function(t,e,i,s,r,n){return this._genShape("Rect",[t,e,i,s,r,n])},getElement:function(){return this.canvas},getLastShapeId:function(){return this.lastShapeId},reset:function(){alert("reset not implemented")},_insert:function(t,e){s(e).html(t)},_calculatePixelDims:function(t,e,i){var r;r=this._pxregex.exec(e),r?this.pixelHeight=r[1]:this.pixelHeight=s(i).height(),r=this._pxregex.exec(t),r?this.pixelWidth=r[1]:this.pixelWidth=s(i).width()},_genShape:function(t,e){var i=F++;return e.unshift(i),new q(this,i,t,e)},appendShape:function(t){alert("appendShape not implemented")},replaceWithShape:function(t,e){alert("replaceWithShape not implemented")},insertAfterShape:function(t,e){alert("insertAfterShape not implemented")},removeShapeId:function(t){alert("removeShapeId not implemented")},getShapeAt:function(t,e,i){alert("getShapeAt not implemented")},render:function(){alert("render not implemented")}}),j=n(I,{init:function(e,r,n,a){j._super.init.call(this,e,r,n),this.canvas=t.createElement("canvas"),n[0]&&(n=n[0]),s.data(n,"_jqs_vcanvas",this),s(this.canvas).css({display:"inline-block",width:e,height:r,verticalAlign:"top"}),this._insert(this.canvas,n),this._calculatePixelDims(e,r,this.canvas),this.canvas.width=this.pixelWidth,this.canvas.height=this.pixelHeight,this.interact=a,this.shapes={},this.shapeseq=[],this.currentTargetShapeId=i,s(this.canvas).css({width:this.pixelWidth,height:this.pixelHeight})},_getContext:function(t,e,s){var r=this.canvas.getContext("2d");return t!==i&&(r.strokeStyle=t),r.lineWidth=s===i?1:s,e!==i&&(r.fillStyle=e),r},reset:function(){var t=this._getContext();t.clearRect(0,0,this.pixelWidth,this.pixelHeight),this.shapes={},this.shapeseq=[],this.currentTargetShapeId=i},_drawShape:function(t,e,s,r,n){var a,h,o=this._getContext(s,r,n);for(o.beginPath(),o.moveTo(e[0][0]+.5,e[0][1]+.5),a=1,h=e.length;h>a;a++)o.lineTo(e[a][0]+.5,e[a][1]+.5);s!==i&&o.stroke(),r!==i&&o.fill(),this.targetX!==i&&this.targetY!==i&&o.isPointInPath(this.targetX,this.targetY)&&(this.currentTargetShapeId=t)},_drawCircle:function(t,s,r,n,a,h,o){var l=this._getContext(a,h,o);l.beginPath(),l.arc(s,r,n,0,2*e.PI,!1),this.targetX!==i&&this.targetY!==i&&l.isPointInPath(this.targetX,this.targetY)&&(this.currentTargetShapeId=t),a!==i&&l.stroke(),h!==i&&l.fill()},_drawPieSlice:function(t,e,s,r,n,a,h,o){var l=this._getContext(h,o);l.beginPath(),l.moveTo(e,s),l.arc(e,s,r,n,a,!1),l.lineTo(e,s),l.closePath(),h!==i&&l.stroke(),o&&l.fill(),this.targetX!==i&&this.targetY!==i&&l.isPointInPath(this.targetX,this.targetY)&&(this.currentTargetShapeId=t)},_drawRect:function(t,e,i,s,r,n,a){return this._drawShape(t,[[e,i],[e+s,i],[e+s,i+r],[e,i+r],[e,i]],n,a)},appendShape:function(t){return this.shapes[t.id]=t,this.shapeseq.push(t.id),this.lastShapeId=t.id,t.id},replaceWithShape:function(t,e){var i,s=this.shapeseq;for(this.shapes[e.id]=e,i=s.length;i--;)s[i]==t&&(s[i]=e.id);delete this.shapes[t]},replaceWithShapes:function(t,e){var i,s,r,n=this.shapeseq,a={};for(s=t.length;s--;)a[t[s]]=!0;for(s=n.length;s--;)i=n[s],a[i]&&(n.splice(s,1),delete this.shapes[i],r=s);for(s=e.length;s--;)n.splice(r,0,e[s].id),this.shapes[e[s].id]=e[s]},insertAfterShape:function(t,e){var i,s=this.shapeseq;for(i=s.length;i--;)if(s[i]===t)return s.splice(i+1,0,e.id),void(this.shapes[e.id]=e)},removeShapeId:function(t){var e,i=this.shapeseq;for(e=i.length;e--;)if(i[e]===t){i.splice(e,1);break}delete this.shapes[t]},getShapeAt:function(t,e,i){return this.targetX=e,this.targetY=i,this.render(),this.currentTargetShapeId},render:function(){var t,e,i,s=this.shapeseq,r=this.shapes,n=s.length,a=this._getContext();for(a.clearRect(0,0,this.pixelWidth,this.pixelHeight),i=0;n>i;i++)t=s[i],e=r[t],this["_draw"+e.type].apply(this,e.args);this.interact||(this.shapes={},this.shapeseq=[])}}),P=n(I,{init:function(e,i,r){var n;P._super.init.call(this,e,i,r),r[0]&&(r=r[0]),s.data(r,"_jqs_vcanvas",this),this.canvas=t.createElement("span"),s(this.canvas).css({display:"inline-block",position:"relative",overflow:"hidden",width:e,height:i,margin:"0px",padding:"0px",verticalAlign:"top"}),this._insert(this.canvas,r),this._calculatePixelDims(e,i,this.canvas),this.canvas.width=this.pixelWidth,this.canvas.height=this.pixelHeight,n='<v:group coordorigin="0 0" coordsize="'+this.pixelWidth+" "+this.pixelHeight+'" style="position:absolute;top:0;left:0;width:'+this.pixelWidth+"px;height="+this.pixelHeight+'px;"></v:group>',this.canvas.insertAdjacentHTML("beforeEnd",n),this.group=s(this.canvas).children()[0],this.rendered=!1,this.prerender=""},_drawShape:function(t,e,s,r,n){var a,h,o,l,g,p,u,c=[];for(u=0,p=e.length;p>u;u++)c[u]=""+e[u][0]+","+e[u][1];return a=c.splice(0,1),n=n===i?1:n,h=s===i?' stroked="false" ':' strokeWeight="'+n+'px" strokeColor="'+s+'" ',o=r===i?' filled="false"':' fillColor="'+r+'" filled="true" ',l=c[0]===c[c.length-1]?"x ":"",g='<v:shape coordorigin="0 0" coordsize="'+this.pixelWidth+" "+this.pixelHeight+'"  id="jqsshape'+t+'" '+h+o+' style="position:absolute;left:0px;top:0px;height:'+this.pixelHeight+"px;width:"+this.pixelWidth+'px;padding:0px;margin:0px;"  path="m '+a+" l "+c.join(", ")+" "+l+'e"> </v:shape>'},_drawCircle:function(t,e,s,r,n,a,h){var o,l,g;return e-=r,s-=r,o=n===i?' stroked="false" ':' strokeWeight="'+h+'px" strokeColor="'+n+'" ',l=a===i?' filled="false"':' fillColor="'+a+'" filled="true" ',g='<v:oval  id="jqsshape'+t+'" '+o+l+' style="position:absolute;top:'+s+"px; left:"+e+"px; width:"+2*r+"px; height:"+2*r+'px"></v:oval>'},_drawPieSlice:function(t,s,r,n,a,h,o,l){var g,p,u,c,d,f,v,m;if(a===h)return"";if(h-a===2*e.PI&&(a=0,h=2*e.PI),p=s+e.round(e.cos(a)*n),u=r+e.round(e.sin(a)*n),c=s+e.round(e.cos(h)*n),d=r+e.round(e.sin(h)*n),p===c&&u===d){if(h-a<e.PI)return"";p=c=s+n,u=d=r}return p===c&&u===d&&h-a<e.PI?"":(g=[s-n,r-n,s+n,r+n,p,u,c,d],f=o===i?' stroked="false" ':' strokeWeight="1px" strokeColor="'+o+'" ',v=l===i?' filled="false"':' fillColor="'+l+'" filled="true" ',m='<v:shape coordorigin="0 0" coordsize="'+this.pixelWidth+" "+this.pixelHeight+'"  id="jqsshape'+t+'" '+f+v+' style="position:absolute;left:0px;top:0px;height:'+this.pixelHeight+"px;width:"+this.pixelWidth+'px;padding:0px;margin:0px;"  path="m '+s+","+r+" wa "+g.join(", ")+' x e"> </v:shape>')},_drawRect:function(t,e,i,s,r,n,a){return this._drawShape(t,[[e,i],[e,i+r],[e+s,i+r],[e+s,i],[e,i]],n,a)},reset:function(){this.group.innerHTML=""},appendShape:function(t){var e=this["_draw"+t.type].apply(this,t.args);return this.rendered?this.group.insertAdjacentHTML("beforeEnd",e):this.prerender+=e,this.lastShapeId=t.id,t.id},replaceWithShape:function(t,e){var i=s("#jqsshape"+t),r=this["_draw"+e.type].apply(this,e.args);i[0].outerHTML=r},replaceWithShapes:function(t,e){var i,r=s("#jqsshape"+t[0]),n="",a=e.length;for(i=0;a>i;i++)n+=this["_draw"+e[i].type].apply(this,e[i].args);for(r[0].outerHTML=n,i=1;i<t.length;i++)s("#jqsshape"+t[i]).remove()},insertAfterShape:function(t,e){var i=s("#jqsshape"+t),r=this["_draw"+e.type].apply(this,e.args);i[0].insertAdjacentHTML("afterEnd",r)},removeShapeId:function(t){var e=s("#jqsshape"+t);this.group.removeChild(e[0])},getShapeAt:function(t,e,i){var s=t.id.substr(8);return s},render:function(){this.rendered||(this.group.innerHTML=this.prerender,this.rendered=!0)}})})}(document,Math);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm9yY2hlc3RyYS9jb21tb24vanMvbGliL2pxdWVyeS5zcGFya2xpbmUuanMiXSwibmFtZXMiOlsiZG9jdW1lbnQiLCJNYXRoIiwidW5kZWZpbmVkIiwiZmFjdG9yeSIsImRlZmluZSIsImFtZCIsImpRdWVyeSIsImZuIiwic3BhcmtsaW5lIiwiJCIsImdldERlZmF1bHRzIiwiY3JlYXRlQ2xhc3MiLCJTUEZvcm1hdCIsImNsaXB2YWwiLCJxdWFydGlsZSIsIm5vcm1hbGl6ZVZhbHVlIiwibm9ybWFsaXplVmFsdWVzIiwicmVtb3ZlIiwiaXNOdW1iZXIiLCJhbGwiLCJzdW0iLCJhZGRDU1MiLCJlbnN1cmVBcnJheSIsImZvcm1hdE51bWJlciIsIlJhbmdlTWFwIiwiTW91c2VIYW5kbGVyIiwiVG9vbHRpcCIsImJhckhpZ2hsaWdodE1peGluIiwibGluZSIsImJhciIsInRyaXN0YXRlIiwiZGlzY3JldGUiLCJidWxsZXQiLCJwaWUiLCJib3giLCJkZWZhdWx0U3R5bGVzIiwiaW5pdFN0eWxlcyIsIlZTaGFwZSIsIlZDYW52YXNfYmFzZSIsIlZDYW52YXNfY2FudmFzIiwiVkNhbnZhc192bWwiLCJwZW5kaW5nIiwiVU5TRVRfT1BUSU9OIiwic2hhcGVDb3VudCIsImNvbW1vbiIsInR5cGUiLCJsaW5lQ29sb3IiLCJmaWxsQ29sb3IiLCJkZWZhdWx0UGl4ZWxzUGVyVmFsdWUiLCJ3aWR0aCIsImhlaWdodCIsImNvbXBvc2l0ZSIsInRhZ1ZhbHVlc0F0dHJpYnV0ZSIsInRhZ09wdGlvbnNQcmVmaXgiLCJlbmFibGVUYWdPcHRpb25zIiwiZW5hYmxlSGlnaGxpZ2h0IiwiaGlnaGxpZ2h0TGlnaHRlbiIsInRvb2x0aXBTa2lwTnVsbCIsInRvb2x0aXBQcmVmaXgiLCJ0b29sdGlwU3VmZml4IiwiZGlzYWJsZUhpZGRlbkNoZWNrIiwibnVtYmVyRm9ybWF0dGVyIiwibnVtYmVyRGlnaXRHcm91cENvdW50IiwibnVtYmVyRGlnaXRHcm91cFNlcCIsIm51bWJlckRlY2ltYWxNYXJrIiwiZGlzYWJsZVRvb2x0aXBzIiwiZGlzYWJsZUludGVyYWN0aW9uIiwic3BvdENvbG9yIiwiaGlnaGxpZ2h0U3BvdENvbG9yIiwiaGlnaGxpZ2h0TGluZUNvbG9yIiwic3BvdFJhZGl1cyIsIm1pblNwb3RDb2xvciIsIm1heFNwb3RDb2xvciIsImxpbmVXaWR0aCIsIm5vcm1hbFJhbmdlTWluIiwibm9ybWFsUmFuZ2VNYXgiLCJub3JtYWxSYW5nZUNvbG9yIiwiZHJhd05vcm1hbE9uVG9wIiwiY2hhcnRSYW5nZU1pbiIsImNoYXJ0UmFuZ2VNYXgiLCJjaGFydFJhbmdlTWluWCIsImNoYXJ0UmFuZ2VNYXhYIiwidG9vbHRpcEZvcm1hdCIsImJhckNvbG9yIiwibmVnQmFyQ29sb3IiLCJzdGFja2VkQmFyQ29sb3IiLCJ6ZXJvQ29sb3IiLCJudWxsQ29sb3IiLCJ6ZXJvQXhpcyIsImJhcldpZHRoIiwiYmFyU3BhY2luZyIsImNoYXJ0UmFuZ2VDbGlwIiwiY29sb3JNYXAiLCJwb3NCYXJDb2xvciIsInplcm9CYXJDb2xvciIsInRvb2x0aXBWYWx1ZUxvb2t1cHMiLCJtYXAiLCItMSIsIjAiLCIxIiwibGluZUhlaWdodCIsInRocmVzaG9sZENvbG9yIiwidGhyZXNob2xkVmFsdWUiLCJ0YXJnZXRDb2xvciIsInRhcmdldFdpZHRoIiwicGVyZm9ybWFuY2VDb2xvciIsInJhbmdlQ29sb3JzIiwiYmFzZSIsImZpZWxkcyIsInIiLCJwIiwidCIsIm9mZnNldCIsInNsaWNlQ29sb3JzIiwiYm9yZGVyV2lkdGgiLCJib3JkZXJDb2xvciIsInJhdyIsImJveExpbmVDb2xvciIsImJveEZpbGxDb2xvciIsIndoaXNrZXJDb2xvciIsIm91dGxpZXJMaW5lQ29sb3IiLCJvdXRsaWVyRmlsbENvbG9yIiwibWVkaWFuQ29sb3IiLCJzaG93T3V0bGllcnMiLCJvdXRsaWVySVFSIiwidGFyZ2V0IiwidG9vbHRpcEZvcm1hdEZpZWxkbGlzdEtleSIsImxxIiwibWVkIiwidXEiLCJsbyIsInJvIiwibHciLCJydyIsIkNsYXNzIiwiYXJncyIsInRoaXMiLCJpbml0IiwiYXBwbHkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJwcm90b3R5cGUiLCJleHRlbmQiLCJfc3VwZXIiLCJBcnJheSIsInNsaWNlIiwiY2FsbCIsInVuc2hpZnQiLCJjbHMiLCJTUEZvcm1hdENsYXNzIiwiZnJlIiwicHJlY3JlIiwiZm9ybWF0IiwiZmNsYXNzIiwicmVuZGVyIiwiZmllbGRzZXQiLCJsb29rdXBzIiwib3B0aW9ucyIsIm1hdGNoIiwidG9rZW4iLCJsb29rdXBrZXkiLCJmaWVsZHZhbHVlIiwicHJlYyIsInNlbGYiLCJyZXBsYWNlIiwibG9va3VwIiwiZXhlYyIsImdldCIsInNwZm9ybWF0IiwidmFsIiwibWluIiwibWF4IiwidmFsdWVzIiwicSIsInZsIiwiZmxvb3IiLCJuZiIsInBhcnNlRmxvYXQiLCJ2YWxzIiwiaSIsInJlc3VsdCIsImZpbHRlciIsInB1c2giLCJudW0iLCJpc05hTiIsImlzRmluaXRlIiwiZ3JvdXBzaXplIiwiZ3JvdXBzZXAiLCJkZWNzZXAiLCJ0b1N0cmluZyIsInRvRml4ZWQiLCJzcGxpdCIsImluQXJyYXkiLCJzcGxpY2UiLCJqb2luIiwiYXJyIiwiaWdub3JlTnVsbCIsInRvdGFsIiwiaXNBcnJheSIsImNzcyIsInRhZyIsImNyZWF0ZVN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiY3JlYXRlRWxlbWVudCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiYXBwZW5kQ2hpbGQiLCJib2R5Iiwic3R5bGUiLCJXZWJraXRBcHBlYXJhbmNlIiwic2ltcGxlZHJhdyIsInVzZUV4aXN0aW5nIiwiaW50ZXJhY3QiLCJtaGFuZGxlciIsImRhdGEiLCJjYW52YXMiLCJlbCIsImdldENvbnRleHQiLCJuYW1lc3BhY2VzIiwidiIsImFkZCIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsInJlZ2lzdGVyQ2FudmFzIiwiY2xlYXJkcmF3IiwicmVzZXQiLCJSYW5nZU1hcENsYXNzIiwia2V5IiwicmFuZ2UiLCJyYW5nZWxpc3QiLCJoYXNPd25Qcm9wZXJ0eSIsImluZGV4T2YiLCJJbmZpbml0eSIsInZhbHVlIiwicmFuZ2VfbWFwIiwiJGVsIiwiY3VycmVudFBhZ2VYIiwiY3VycmVudFBhZ2VZIiwic3BsaXN0IiwidG9vbHRpcCIsIm92ZXIiLCJkaXNwbGF5VG9vbHRpcHMiLCJoaWdobGlnaHRFbmFibGVkIiwicmVnaXN0ZXJTcGFya2xpbmUiLCJzcCIsInVwZGF0ZURpc3BsYXkiLCIkY2FudmFzIiwibW91c2VlbnRlciIsInByb3h5IiwibW91c2VsZWF2ZSIsImNsaWNrIiwibW91c2VjbGljayIsInJlbW92ZVRvb2x0aXAiLCJlIiwiY2xpY2tFdmVudCIsIkV2ZW50Iiwib3JpZ2luYWxFdmVudCIsInNwYXJrbGluZXMiLCJ0cmlnZ2VyIiwidW5iaW5kIiwiYmluZCIsIm1vdXNlbW92ZSIsInBhZ2VYIiwicGFnZVkiLCJjdXJyZW50RWwiLCJ1cGRhdGVQb3NpdGlvbiIsInNwY291bnQiLCJuZWVkc1JlZnJlc2giLCJjbGVhclJlZ2lvbkhpZ2hsaWdodCIsInRvb2x0aXBodG1sIiwiY2hhbmdlRXZlbnQiLCJsb2NhbFgiLCJsZWZ0IiwibG9jYWxZIiwidG9wIiwic2V0UmVnaW9uSGlnaGxpZ2h0IiwiZ2V0Q3VycmVudFJlZ2lvblRvb2x0aXAiLCJzZXRDb250ZW50IiwiZGlzYWJsZUhpZ2hsaWdodCIsInNpemVTdHlsZSIsInRvb2x0aXBDbGFzc25hbWUiLCJzaXpldGlwU3R5bGUiLCJjb250YWluZXIiLCJ0b29sdGlwT2Zmc2V0WCIsInRvb2x0aXBPZmZzZXRZIiwic2l6ZXRpcCIsImlkIiwiY2xhc3MiLCJhcHBlbmRUbyIsIm9mZnNldExlZnQiLCJvZmZzZXRUb3AiLCJoaWRkZW4iLCJ3aW5kb3ciLCJ1cGRhdGVXaW5kb3dEaW1zIiwic2Nyb2xsVG9wIiwic2Nyb2xsTGVmdCIsInNjcm9sbFJpZ2h0IiwiZ2V0U2l6ZSIsImNvbnRlbnQiLCJodG1sIiwidmlzaWJpbGl0eSIsIngiLCJ5IiwibW91c2V4IiwibW91c2V5IiwidXNlclZhbHVlcyIsInVzZXJPcHRpb25zIiwiZWFjaCIsIiR0aGlzIiwidG1wIiwiZ2V0QXR0cmlidXRlIiwiaW5uZXJIVE1MIiwiYWxlcnQiLCJpcyIsInBhcmVudHMiLCJkZWZhdWx0cyIsInNwYXJrbGluZV9kaXNwbGF5X3Zpc2libGUiLCJwbCIsImRvbmUiLCJjbG9zZXN0IiwiZXh0ZW5kZWRPcHRpb25zIiwidGFnT3B0aW9uVHlwZSIsInRhZ1ZhbENhY2hlIiwiZ2V0VGFnU2V0dGluZyIsIm1lcmdlZE9wdGlvbnMiLCJwYWlycyIsImtleXZhbCIsInByZWZpeCIsInN1YnN0ciIsImRlZmF1bHR2YWwiLCJ0YWdPcHRpb24iLCJfYmFzZSIsImRpc2FibGVkIiwiY3VycmVudFJlZ2lvbiIsImluaXRUYXJnZXQiLCJpbnRlcmFjdGl2ZSIsImNhbnZhc1dpZHRoIiwicGl4ZWxXaWR0aCIsImNhbnZhc0hlaWdodCIsInBpeGVsSGVpZ2h0IiwiZ2V0UmVnaW9uIiwibmV3UmVnaW9uIiwicmVtb3ZlSGlnaGxpZ2h0IiwicmVuZGVySGlnaGxpZ2h0IiwiY2hhbmdlSGlnaGxpZ2h0IiwiaGlnaGxpZ2h0IiwiZm9ybWF0cyIsImZvcm1hdGxlbiIsInRleHQiLCJzaG93RmllbGRzIiwic2hvd0ZpZWxkc0tleSIsIm5ld0ZpZWxkcyIsImZ2IiwiZm9ybWF0dGVyIiwiZmllbGRsZW4iLCJqIiwiaGVhZGVyIiwiZW50cmllcyIsImdldEN1cnJlbnRSZWdpb25GaWVsZHMiLCJpc051bGwiLCJzdWZmaXgiLCJjYWxjSGlnaGxpZ2h0Q29sb3IiLCJjb2xvciIsInBhcnNlIiwibXVsdCIsInJnYm5ldyIsImhpZ2hsaWdodENvbG9yIiwibGlnaHRlbiIsInJvdW5kIiwicGFyc2VJbnQiLCJuZXdTaGFwZXMiLCJzaGFwZWlkcyIsInJlZ2lvblNoYXBlcyIsInJlbmRlclJlZ2lvbiIsInJlcGxhY2VXaXRoU2hhcGVzIiwibmV3U2hhcGUiLCJyZXBsYWNlV2l0aFNoYXBlIiwic2hhcGVzIiwiaWRzIiwiYXBwZW5kIiwidmVydGljZXMiLCJyZWdpb25NYXAiLCJ4dmFsdWVzIiwieXZhbHVlcyIsInltaW5tYXgiLCJoaWdodGxpZ2h0U3BvdElkIiwibGFzdFNoYXBlSWQiLCJoaWdobGlnaHRTcG90IiwiaGlnaGxpZ2h0TGluZSIsInZlcnRleCIsImRyYXdDaXJjbGUiLCJoaWdobGlnaHRTcG90SWQiLCJpbnNlcnRBZnRlclNoYXBlIiwiZHJhd0xpbmUiLCJjYW52YXNUb3AiLCJoaWdobGlnaHRMaW5lSWQiLCJyZW1vdmVTaGFwZUlkIiwic2NhblZhbHVlcyIsImlzU3RyIiwidmFsY291bnQiLCJOdW1iZXIiLCJtYXh5IiwibWF4eW9yZyIsIm1pbnkiLCJtaW55b3JnIiwibWF4eCIsIm1pbngiLCJwcm9jZXNzUmFuZ2VPcHRpb25zIiwiZHJhd05vcm1hbFJhbmdlIiwiY2FudmFzTGVmdCIsInJhbmdleSIsInl0b3AiLCJkcmF3UmVjdCIsInJhbmdleCIsInl2YWxsYXN0IiwicGF0aCIsInBhdGhzIiwieG5leHQiLCJ4cG9zIiwieHBvc25leHQiLCJsYXN0IiwibmV4dCIsInl2YWxjb3VudCIsImxpbmVTaGFwZXMiLCJmaWxsU2hhcGVzIiwicGxlbiIsInZhbHVlU3BvdHMiLCJobFNwb3RzRW5hYmxlZCIsImNlaWwiLCJwb3AiLCJkcmF3U2hhcGUiLCJnZXRMYXN0U2hhcGVJZCIsImlzU3RhY2tTdHJpbmciLCJncm91cE1pbiIsImdyb3VwTWF4Iiwic3RhY2tSYW5nZXMiLCJudW1WYWx1ZXMiLCJ2bGVuIiwieGF4aXNPZmZzZXQiLCJjbGlwTWluIiwiY2xpcE1heCIsInN0YWNrZWQiLCJ2bGlzdCIsInNsZW4iLCJzdmFscyIsInlvZmZzZXQiLCJ5TWF4Q2FsYyIsInN0YWNrTWluIiwic3RhY2tNYXgiLCJ0b3RhbEJhcldpZHRoIiwic3RhY2tUb3RhbHMiLCJzdGFja1Jhbmdlc05lZyIsImFicyIsImNhbnZhc0hlaWdodEVmIiwiY29sb3JNYXBCeUluZGV4IiwiY29sb3JNYXBCeVZhbHVlIiwiY2FsY0NvbG9yIiwic3RhY2tudW0iLCJ2YWx1ZW51bSIsIm5ld0NvbG9yIiwieW9mZnNldE5lZyIsIm1pblBsb3R0ZWQiLCJhbGxNaW4iLCJoYWxmSGVpZ2h0IiwiaW50ZXJ2YWwiLCJpdGVtV2lkdGgiLCJwaGVpZ2h0IiwidmFsdWVTaGFwZXMiLCJyZWdpb25kYXRhIiwic2hhcGVpZCIsImdldFNoYXBlQXQiLCJmaWVsZGtleSIsInJlZ2lvbiIsInNoYXBlIiwicmVuZGVyUmFuZ2UiLCJyZW5kZXJQZXJmb3JtYW5jZSIsInJlbmRlclRhcmdldCIsInJuIiwicmFuZ2V2YWwiLCJyYW5nZXdpZHRoIiwicGVyZnZhbCIsInBlcmZ3aWR0aCIsInRhcmdldHZhbCIsInRhcmdldHRvcCIsInRhcmdldGhlaWdodCIsInAxIiwidDAiLCJyYWRpdXMiLCJwZXJjZW50IiwibmV3c2xpY2UiLCJyZW5kZXJTbGljZSIsInN0YXJ0IiwiZW5kIiwiY2lyY2xlIiwiUEkiLCJkcmF3UGllU2xpY2UiLCJmaWVsZCIsInF1YXJ0aWxlcyIsImxvdXRsaWVyIiwicm91dGxpZXIiLCJsd2hpc2tlciIsInJ3aGlza2VyIiwiaXFyIiwicTEiLCJxMiIsInEzIiwic2l6ZSIsInVuaXRTaXplIiwibWluVmFsdWUiLCJtYXhWYWx1ZSIsInNvcnQiLCJhIiwiYiIsImFwcGVuZFNoYXBlIiwiX3B4cmVnZXgiLCJ4MSIsInkxIiwieDIiLCJ5MiIsIl9nZW5TaGFwZSIsInN0YXJ0QW5nbGUiLCJlbmRBbmdsZSIsImdldEVsZW1lbnQiLCJfaW5zZXJ0IiwiX2NhbGN1bGF0ZVBpeGVsRGltcyIsInNoYXBldHlwZSIsInNoYXBlYXJncyIsImRpc3BsYXkiLCJ2ZXJ0aWNhbEFsaWduIiwic2hhcGVzZXEiLCJjdXJyZW50VGFyZ2V0U2hhcGVJZCIsIl9nZXRDb250ZXh0IiwiY29udGV4dCIsInN0cm9rZVN0eWxlIiwiZmlsbFN0eWxlIiwiY2xlYXJSZWN0IiwiX2RyYXdTaGFwZSIsImJlZ2luUGF0aCIsIm1vdmVUbyIsImxpbmVUbyIsInN0cm9rZSIsImZpbGwiLCJ0YXJnZXRYIiwidGFyZ2V0WSIsImlzUG9pbnRJblBhdGgiLCJfZHJhd0NpcmNsZSIsImFyYyIsIl9kcmF3UGllU2xpY2UiLCJjbG9zZVBhdGgiLCJfZHJhd1JlY3QiLCJzaWQiLCJmaXJzdCIsInNoYXBlbWFwIiwiZ3JvdXBlbCIsInBvc2l0aW9uIiwib3ZlcmZsb3ciLCJtYXJnaW4iLCJwYWRkaW5nIiwiaW5zZXJ0QWRqYWNlbnRIVE1MIiwiZ3JvdXAiLCJjaGlsZHJlbiIsInJlbmRlcmVkIiwicHJlcmVuZGVyIiwiaW5pdGlhbCIsImNsb3NlZCIsInZlbCIsInZwYXRoIiwic3RhcnR4Iiwic3RhcnR5IiwiZW5keCIsImVuZHkiLCJjb3MiLCJzaW4iLCJleGlzdGluZyIsIm91dGVySFRNTCIsInJlbW92ZUNoaWxkIl0sIm1hcHBpbmdzIjoiQ0E0TUMsU0FBU0EsRUFBVUMsRUFBTUMsSUFDekIsU0FBU0MsR0FDZSxrQkFBWEMsU0FBeUJBLE9BQU9DLElBQ3RDRCxRQUFRLFVBQVdELEdBQ1pHLFNBQVdBLE9BQU9DLEdBQUdDLFdBQzVCTCxFQUFRRyxTQUdmLFNBQVNHLEdBQ04sWUFFQSxJQUNJQyxHQUFhQyxFQUFhQyxFQUFVQyxFQUFTQyxFQUFVQyxFQUFnQkMsRUFDdkVDLEVBQVFDLEVBQVVDLEVBQUtDLEVBQUtDLEVBQVFDLEVBQWFDLEVBQWNDLEVBQy9EQyxFQUFjQyxFQUFTQyxFQUN2QkMsRUFBTUMsRUFBS0MsRUFBVUMsRUFBVUMsRUFBUUMsRUFBS0MsRUFBS0MsRUFBZUMsRUFDaEVDLEVBQVFDLEVBQWNDLEVBQWdCQyxFQUFhQyxFQUxuREMsS0FLNERDLEVBQWEsQ0FLN0VqQyxHQUFjLFdBQ1YsT0FFSWtDLFFBQ0lDLEtBQU0sT0FDTkMsVUFBVyxPQUNYQyxVQUFXLE9BQ1hDLHNCQUF1QixFQUN2QkMsTUFBTyxPQUNQQyxPQUFRLE9BQ1JDLFdBQVcsRUFDWEMsbUJBQW9CLFNBQ3BCQyxpQkFBa0IsUUFDbEJDLGtCQUFrQixFQUNsQkMsaUJBQWlCLEVBQ2pCQyxpQkFBa0IsSUFDbEJDLGlCQUFpQixFQUNqQkMsY0FBZSxHQUNmQyxjQUFlLEdBQ2ZDLG9CQUFvQixFQUNwQkMsaUJBQWlCLEVBQ2pCQyxzQkFBdUIsRUFDdkJDLG9CQUFxQixJQUNyQkMsa0JBQW1CLElBQ25CQyxpQkFBaUIsRUFDakJDLG9CQUFvQixHQUd4QnRDLE1BQ0l1QyxVQUFXLE9BQ1hDLG1CQUFvQixPQUNwQkMsbUJBQW9CLE9BQ3BCQyxXQUFZLElBQ1pDLGFBQWMsT0FDZEMsYUFBYyxPQUNkQyxVQUFXLEVBQ1hDLGVBQWdCeEUsRUFDaEJ5RSxlQUFnQnpFLEVBQ2hCMEUsaUJBQWtCLE9BQ2xCQyxpQkFBaUIsRUFDakJDLGNBQWU1RSxFQUNmNkUsY0FBZTdFLEVBQ2Y4RSxlQUFnQjlFLEVBQ2hCK0UsZUFBZ0IvRSxFQUNoQmdGLGNBQWUsR0FBSXRFLEdBQVMsNEVBR2hDaUIsS0FDSXNELFNBQVUsVUFDVkMsWUFBYSxPQUNiQyxpQkFBa0IsVUFBVyxVQUFXLFVBQVcsVUFBVyxVQUMxRCxVQUFXLFVBQVcsV0FDMUJDLFVBQVdwRixFQUNYcUYsVUFBV3JGLEVBQ1hzRixVQUFVLEVBQ1ZDLFNBQVUsRUFDVkMsV0FBWSxFQUNaWCxjQUFlN0UsRUFDZjRFLGNBQWU1RSxFQUNmeUYsZ0JBQWdCLEVBQ2hCQyxTQUFVMUYsRUFDVmdGLGNBQWUsR0FBSXRFLEdBQVMsZ0ZBR2hDa0IsVUFDSTJELFNBQVUsRUFDVkMsV0FBWSxFQUNaRyxZQUFhLE9BQ2JULFlBQWEsT0FDYlUsYUFBYyxPQUNkRixZQUNBVixjQUFlLEdBQUl0RSxHQUFTLCtEQUM1Qm1GLHFCQUF1QkMsS0FBT0MsS0FBTSxPQUFRQyxFQUFLLE9BQVFDLEVBQUssU0FHbEVwRSxVQUNJcUUsV0FBWSxPQUNaQyxlQUFnQm5HLEVBQ2hCb0csZUFBZ0IsRUFDaEJ2QixjQUFlN0UsRUFDZjRFLGNBQWU1RSxFQUNmeUYsZ0JBQWdCLEVBQ2hCVCxjQUFlLEdBQUl0RSxHQUFTLGtDQUdoQ29CLFFBQ0l1RSxZQUFhLE9BQ2JDLFlBQWEsRUFDYkMsaUJBQWtCLE9BQ2xCQyxhQUFjLFVBQVcsVUFBVyxXQUNwQ0MsS0FBTXpHLEVBQ05nRixjQUFlLEdBQUl0RSxHQUFTLG1DQUM1Qm1GLHFCQUF1QmEsUUFBU0MsRUFBRyxRQUFTQyxFQUFHLGNBQWVDLEVBQUcsWUFHckU5RSxLQUNJK0UsT0FBUSxFQUNSQyxhQUFjLFVBQVcsVUFBVyxVQUFXLFVBQVcsVUFDdEQsVUFBVyxVQUFXLFdBQzFCQyxZQUFhLEVBQ2JDLFlBQWEsT0FDYmpDLGNBQWUsR0FBSXRFLEdBQVMsNkVBR2hDc0IsS0FDSWtGLEtBQUssRUFDTEMsYUFBYyxPQUNkQyxhQUFjLE9BQ2RDLGFBQWMsT0FDZEMsaUJBQWtCLE9BQ2xCQyxpQkFBa0IsT0FDbEJDLFlBQWEsT0FDYkMsY0FBYyxFQUNkQyxXQUFZLElBQ1p0RCxXQUFZLElBQ1p1RCxPQUFRM0gsRUFDUnFHLFlBQWEsT0FDYnhCLGNBQWU3RSxFQUNmNEUsY0FBZTVFLEVBQ2ZnRixjQUFlLEdBQUl0RSxHQUFTLCtCQUM1QmtILDBCQUEyQixRQUMzQi9CLHFCQUF1QmEsUUFBVW1CLEdBQUksaUJBQWtCQyxJQUFLLFNBQ3hEQyxHQUFJLGlCQUFrQkMsR0FBSSxlQUFnQkMsR0FBSSxnQkFDOUNDLEdBQUksZUFBZ0JDLEdBQUkscUJBT3hDbEcsRUFBZ0IsaWtCQTZCaEJ4QixFQUFjLFdBQ1YsR0FBSTJILEdBQU9DLENBb0JYLE9BbkJBRCxHQUFRLFdBQ0pFLEtBQUtDLEtBQUtDLE1BQU1GLEtBQU1HLFlBRXRCQSxVQUFVQyxPQUFTLEdBQ2ZELFVBQVUsSUFDVkwsRUFBTU8sVUFBWXBJLEVBQUVxSSxPQUFPLEdBQUlILFdBQVUsR0FBTUEsVUFBVUEsVUFBVUMsT0FBUyxJQUM1RU4sRUFBTVMsT0FBU0osVUFBVSxHQUFHRSxXQUU1QlAsRUFBTU8sVUFBWUYsVUFBVUEsVUFBVUMsT0FBUyxHQUUvQ0QsVUFBVUMsT0FBUyxJQUNuQkwsRUFBT1MsTUFBTUgsVUFBVUksTUFBTUMsS0FBS1AsVUFBVyxFQUFHLElBQ2hESixFQUFLWSxRQUFRYixFQUFNTyxXQUNuQnBJLEVBQUVxSSxPQUFPSixNQUFNakksRUFBRzhILEtBR3RCRCxFQUFNTyxVQUFZRixVQUFVLEdBRWhDTCxFQUFNTyxVQUFVTyxJQUFNZCxFQUNmQSxHQVNYN0gsRUFBRTRJLGNBQWdCekksRUFBV0QsR0FDekIySSxJQUFLLDhCQUNMQyxPQUFRLGVBRVJkLEtBQU0sU0FBVWUsRUFBUUMsR0FDcEJqQixLQUFLZ0IsT0FBU0EsRUFDZGhCLEtBQUtpQixPQUFTQSxHQUdsQkMsT0FBUSxTQUFVQyxFQUFVQyxFQUFTQyxHQUNqQyxHQUVJQyxHQUFPQyxFQUFPQyxFQUFXQyxFQUFZQyxFQUZyQ0MsRUFBTzNCLEtBQ1A1QixFQUFTK0MsQ0FFYixPQUFPbkIsTUFBS2dCLE9BQU9ZLFFBQVE1QixLQUFLYyxJQUFLLFdBQ2pDLEdBQUllLEVBV0osT0FWQU4sR0FBUXBCLFVBQVUsR0FDbEJxQixFQUFZckIsVUFBVSxHQUN0Qm1CLEVBQVFLLEVBQUtaLE9BQU9lLEtBQUtQLEdBQ3JCRCxHQUNBSSxFQUFPSixFQUFNLEdBQ2JDLEVBQVFELEVBQU0sSUFFZEksR0FBTyxFQUVYRCxFQUFhckQsRUFBT21ELEdBQ2hCRSxJQUFlL0osRUFDUixHQUVQOEosR0FBYUosR0FBV0EsRUFBUUksSUFDaENLLEVBQVNULEVBQVFJLEdBQ2JLLEVBQU9FLElBQ0FYLEVBQVFJLEdBQVdPLElBQUlOLElBQWVBLEVBRXRDTCxFQUFRSSxHQUFXQyxJQUFlQSxJQUc3Qy9JLEVBQVMrSSxLQUVMQSxFQURBSixFQUFRVSxJQUFJLG1CQUNDVixFQUFRVSxJQUFJLG1CQUFtQk4sR0FFL0IxSSxFQUFhMEksRUFBWUMsRUFDbENMLEVBQVFVLElBQUkseUJBQ1pWLEVBQVFVLElBQUksdUJBQ1pWLEVBQVFVLElBQUksdUJBR2pCTixRQU1uQnhKLEVBQUUrSixTQUFXLFNBQVNoQixFQUFRQyxHQUMxQixNQUFPLElBQUk3SSxHQUFTNEksRUFBUUMsSUFHaEM1SSxFQUFVLFNBQVU0SixFQUFLQyxFQUFLQyxHQUMxQixNQUFVRCxHQUFORCxFQUNPQyxFQUVQRCxFQUFNRSxFQUNDQSxFQUVKRixHQUdYM0osRUFBVyxTQUFVOEosRUFBUUMsR0FDekIsR0FBSUMsRUFDSixPQUFVLEtBQU5ELEdBQ0FDLEVBQUs3SyxFQUFLOEssTUFBTUgsRUFBT2hDLE9BQVMsR0FDekJnQyxFQUFPaEMsT0FBUyxFQUFJZ0MsRUFBT0UsSUFBT0YsRUFBT0UsRUFBRyxHQUFLRixFQUFPRSxJQUFPLEdBRWxFRixFQUFPaEMsT0FBUyxHQUNoQmtDLEdBQU1GLEVBQU9oQyxPQUFTaUMsRUFBSUEsR0FBSyxFQUN4QkMsRUFBSyxHQUFLRixFQUFPM0ssRUFBSzhLLE1BQU1ELElBQU9GLEVBQU8zSyxFQUFLOEssTUFBTUQsR0FBTSxJQUFNLEVBQUlGLEVBQU9FLEVBQUcsS0FFdEZBLEdBQU1GLEVBQU9oQyxPQUFTaUMsRUFBSSxHQUFLLEVBQ3hCQyxFQUFLLEdBQUtGLEVBQU8zSyxFQUFLOEssTUFBTUQsSUFBT0YsRUFBTzNLLEVBQUs4SyxNQUFNRCxHQUFNLElBQU0sRUFBS0YsRUFBT0UsRUFBRyxLQU1uRy9KLEVBQWlCLFNBQVUwSixHQUN2QixHQUFJTyxFQUNKLFFBQVFQLEdBQ0osSUFBSyxZQUNEQSxFQUFNdkssQ0FDTixNQUNKLEtBQUssT0FDRHVLLEVBQU0sSUFDTixNQUNKLEtBQUssT0FDREEsR0FBTSxDQUNOLE1BQ0osS0FBSyxRQUNEQSxHQUFNLENBQ04sTUFDSixTQUNJTyxFQUFLQyxXQUFXUixHQUNaQSxHQUFPTyxJQUNQUCxFQUFNTyxHQUdsQixNQUFPUCxJQUdYekosRUFBa0IsU0FBVWtLLEdBQ3hCLEdBQUlDLEdBQUdDLElBQ1AsS0FBS0QsRUFBSUQsRUFBS3RDLE9BQVF1QyxLQUNsQkMsRUFBT0QsR0FBS3BLLEVBQWVtSyxFQUFLQyxHQUVwQyxPQUFPQyxJQUdYbkssRUFBUyxTQUFVaUssRUFBTUcsR0FDckIsR0FBSUYsR0FBR0wsRUFBSU0sSUFDWCxLQUFLRCxFQUFJLEVBQUdMLEVBQUtJLEVBQUt0QyxPQUFZa0MsRUFBSkssRUFBUUEsSUFDOUJELEVBQUtDLEtBQU9FLEdBQ1pELEVBQU9FLEtBQUtKLEVBQUtDLEdBR3pCLE9BQU9DLElBR1hsSyxFQUFXLFNBQVVxSyxHQUNqQixPQUFRQyxNQUFNUCxXQUFXTSxLQUFTRSxTQUFTRixJQUcvQ2hLLEVBQWUsU0FBVWdLLEVBQUtyQixFQUFNd0IsRUFBV0MsRUFBVUMsR0FDckQsR0FBSTlFLEdBQUdxRSxDQU1QLEtBTEFJLEdBQU9yQixLQUFTLEVBQVFlLFdBQVdNLEdBQUtNLFdBQWFOLEVBQUlPLFFBQVE1QixJQUFPNkIsTUFBTSxJQUM5RWpGLEdBQUtBLEVBQUlyRyxFQUFFdUwsUUFBUSxJQUFLVCxJQUFRLEVBQUlBLEVBQUkzQyxPQUFTOUIsRUFDN0NBLEVBQUl5RSxFQUFJM0MsU0FDUjJDLEVBQUl6RSxHQUFLOEUsR0FFUlQsRUFBSXJFLEVBQUk0RSxFQUFXUCxFQUFJLEVBQUdBLEdBQUtPLEVBQ2hDSCxFQUFJVSxPQUFPZCxFQUFHLEVBQUdRLEVBRXJCLE9BQU9KLEdBQUlXLEtBQUssS0FLcEIvSyxFQUFNLFNBQVVzSixFQUFLMEIsRUFBS0MsR0FDdEIsR0FBSWpCLEVBQ0osS0FBS0EsRUFBSWdCLEVBQUl2RCxPQUFRdUMsS0FDakIsS0FBSWlCLEdBQXlCLE9BQVhELEVBQUloQixLQUNsQmdCLEVBQUloQixLQUFPVixFQUNYLE9BQU8sQ0FHZixRQUFPLEdBSVhySixFQUFNLFNBQVU4SixHQUNaLEdBQWVDLEdBQVhrQixFQUFRLENBQ1osS0FBS2xCLEVBQUlELEVBQUt0QyxPQUFRdUMsS0FDbEJrQixHQUE0QixnQkFBWm5CLEdBQUtDLEdBQWtCRCxFQUFLQyxHQUFLLENBRXJELE9BQU9rQixJQUdYL0ssRUFBYyxTQUFVbUosR0FDcEIsTUFBT2hLLEdBQUU2TCxRQUFRN0IsR0FBT0EsR0FBT0EsSUFJbkNwSixFQUFTLFNBQVNrTCxHQUNkLEdBQUlDLEVBRUF4TSxHQUFTeU0saUJBQ1R6TSxFQUFTeU0sbUJBQW1CQyxRQUFVSCxHQUV0Q0MsRUFBTXhNLEVBQVMyTSxjQUFjLFNBQzdCSCxFQUFJM0osS0FBTyxXQUNYN0MsRUFBUzRNLHFCQUFxQixRQUFRLEdBQUdDLFlBQVlMLEdBQ3JEQSxFQUFvRCxnQkFBeEN4TSxHQUFTOE0sS0FBS0MsTUFBTUMsaUJBQWtELFlBQWMsYUFBZVQsSUFLdkg5TCxFQUFFRixHQUFHME0sV0FBYSxTQUFVaEssRUFBT0MsRUFBUWdLLEVBQWFDLEdBQ3BELEdBQUl0RixHQUFRdUYsQ0FDWixJQUFJRixJQUFnQnJGLEVBQVNXLEtBQUs2RSxLQUFLLGlCQUNuQyxNQUFPeEYsRUFHWCxJQUFJcEgsRUFBRUYsR0FBR0MsVUFBVThNLFVBQVcsRUFFMUIsT0FBTyxDQUVKLElBQUk3TSxFQUFFRixHQUFHQyxVQUFVOE0sU0FBV3BOLEVBQVcsQ0FFNUMsR0FBSXFOLEdBQUt2TixFQUFTMk0sY0FBYyxTQUNoQyxJQUFPWSxFQUFHQyxZQUFjRCxFQUFHQyxXQUFXLE1BRWxDL00sRUFBRUYsR0FBR0MsVUFBVThNLE9BQVMsU0FBU3JLLEVBQU9DLEVBQVEyRSxFQUFRc0YsR0FDcEQsTUFBTyxJQUFJNUssR0FBZVUsRUFBT0MsRUFBUTJFLEVBQVFzRixRQUVsRCxDQUFBLElBQUluTixFQUFTeU4sWUFBZXpOLEVBQVN5TixXQUFXQyxFQVNuRCxNQURBak4sR0FBRUYsR0FBR0MsVUFBVThNLFFBQVMsR0FDakIsQ0FQUHROLEdBQVN5TixXQUFXRSxJQUFJLElBQUssZ0NBQWlDLGdCQUM5RGxOLEVBQUVGLEdBQUdDLFVBQVU4TSxPQUFTLFNBQVNySyxFQUFPQyxFQUFRMkUsRUFBUXNGLEdBQ3BELE1BQU8sSUFBSTNLLEdBQVlTLEVBQU9DLEVBQVEyRSxLQXNCbEQsTUFiSTVFLEtBQVUvQyxJQUNWK0MsRUFBUXhDLEVBQUUrSCxNQUFNb0YsY0FFaEIxSyxJQUFXaEQsSUFDWGdELEVBQVN6QyxFQUFFK0gsTUFBTXFGLGVBR3JCaEcsRUFBU3BILEVBQUVGLEdBQUdDLFVBQVU4TSxPQUFPckssRUFBT0MsRUFBUXNGLEtBQU0yRSxHQUVwREMsRUFBVzNNLEVBQUUrSCxNQUFNNkUsS0FBSyxpQkFDcEJELEdBQ0FBLEVBQVNVLGVBQWVqRyxHQUVyQkEsR0FHWHBILEVBQUVGLEdBQUd3TixVQUFZLFdBQ2IsR0FBSWxHLEdBQVNXLEtBQUs2RSxLQUFLLGVBQ25CeEYsSUFDQUEsRUFBT21HLFNBSWZ2TixFQUFFd04sY0FBZ0J6TSxFQUFXYixHQUN6QjhILEtBQU0sU0FBVXpDLEdBQ1osR0FBSWtJLEdBQUtDLEVBQU9DLElBQ2hCLEtBQUtGLElBQU9sSSxHQUNKQSxFQUFJcUksZUFBZUgsSUFBdUIsZ0JBQVJBLElBQW9CQSxFQUFJSSxRQUFRLEtBQU8sS0FDekVILEVBQVFELEVBQUluQyxNQUFNLEtBQ2xCb0MsRUFBTSxHQUF5QixJQUFwQkEsRUFBTSxHQUFHdkYsU0FBZ0IyRixFQUFBQSxHQUFXdEQsV0FBV2tELEVBQU0sSUFDaEVBLEVBQU0sR0FBeUIsSUFBcEJBLEVBQU0sR0FBR3ZGLE9BQWUyRixFQUFBQSxFQUFXdEQsV0FBV2tELEVBQU0sSUFDL0RBLEVBQU0sR0FBS25JLEVBQUlrSSxHQUNmRSxFQUFVOUMsS0FBSzZDLEdBR3ZCM0YsTUFBS3hDLElBQU1BLEVBQ1h3QyxLQUFLNEYsVUFBWUEsSUFBYSxHQUdsQzdELElBQUssU0FBVWlFLEdBQ1gsR0FDSXJELEdBQUdnRCxFQUFPL0MsRUFEVmdELEVBQVk1RixLQUFLNEYsU0FFckIsS0FBS2hELEVBQVM1QyxLQUFLeEMsSUFBSXdJLE1BQVl0TyxFQUMvQixNQUFPa0wsRUFFWCxJQUFJZ0QsRUFDQSxJQUFLakQsRUFBSWlELEVBQVV4RixPQUFRdUMsS0FFdkIsR0FEQWdELEVBQVFDLEVBQVVqRCxHQUNkZ0QsRUFBTSxJQUFNSyxHQUFTTCxFQUFNLElBQU1LLEVBQ2pDLE1BQU9MLEdBQU0sRUFJekIsT0FBT2pPLE1BS2ZPLEVBQUVnTyxVQUFZLFNBQVN6SSxHQUNuQixNQUFPLElBQUl4RSxHQUFTd0UsSUFHeEJ2RSxFQUFlZCxHQUNYOEgsS0FBTSxTQUFVOEUsRUFBSTFELEdBQ2hCLEdBQUk2RSxHQUFNak8sRUFBRThNLEVBQ1ovRSxNQUFLa0csSUFBTUEsRUFDWGxHLEtBQUtxQixRQUFVQSxFQUNmckIsS0FBS21HLGFBQWUsRUFDcEJuRyxLQUFLb0csYUFBZSxFQUNwQnBHLEtBQUsrRSxHQUFLQSxFQUNWL0UsS0FBS3FHLFVBQ0xyRyxLQUFLc0csUUFBVSxLQUNmdEcsS0FBS3VHLE1BQU8sRUFDWnZHLEtBQUt3RyxpQkFBbUJuRixFQUFRVSxJQUFJLG1CQUNwQy9CLEtBQUt5RyxrQkFBb0JwRixFQUFRVSxJQUFJLHFCQUd6QzJFLGtCQUFtQixTQUFVQyxHQUN6QjNHLEtBQUtxRyxPQUFPdkQsS0FBSzZELEdBQ2IzRyxLQUFLdUcsTUFDTHZHLEtBQUs0RyxpQkFJYnRCLGVBQWdCLFNBQVVSLEdBQ3RCLEdBQUkrQixHQUFVNU8sRUFBRTZNLEVBQU9BLE9BQ3ZCOUUsTUFBSzhFLE9BQVNBLEVBQ2Q5RSxLQUFLNkcsUUFBVUEsRUFDZkEsRUFBUUMsV0FBVzdPLEVBQUU4TyxNQUFNL0csS0FBSzhHLFdBQVk5RyxPQUM1QzZHLEVBQVFHLFdBQVcvTyxFQUFFOE8sTUFBTS9HLEtBQUtnSCxXQUFZaEgsT0FDNUM2RyxFQUFRSSxNQUFNaFAsRUFBRThPLE1BQU0vRyxLQUFLa0gsV0FBWWxILFFBRzNDd0YsTUFBTyxTQUFVMkIsR0FDYm5ILEtBQUtxRyxVQUNEckcsS0FBS3NHLFNBQVdhLElBQ2hCbkgsS0FBS3NHLFFBQVE3TixTQUNidUgsS0FBS3NHLFFBQVU1TyxJQUl2QndQLFdBQVksU0FBVUUsR0FDbEIsR0FBSUMsR0FBYXBQLEVBQUVxUCxNQUFNLGlCQUN6QkQsR0FBV0UsY0FBZ0JILEVBQzNCQyxFQUFXRyxXQUFheEgsS0FBS3FHLE9BQzdCckcsS0FBS2tHLElBQUl1QixRQUFRSixJQUdyQlAsV0FBWSxTQUFVTSxHQUNsQm5QLEVBQUVULEVBQVM4TSxNQUFNb0QsT0FBTyxpQkFDeEJ6UCxFQUFFVCxFQUFTOE0sTUFBTXFELEtBQUssZ0JBQWlCMVAsRUFBRThPLE1BQU0vRyxLQUFLNEgsVUFBVzVILE9BQy9EQSxLQUFLdUcsTUFBTyxFQUNadkcsS0FBS21HLGFBQWVpQixFQUFFUyxNQUN0QjdILEtBQUtvRyxhQUFlZ0IsRUFBRVUsTUFDdEI5SCxLQUFLK0gsVUFBWVgsRUFBRS9ILFFBQ2RXLEtBQUtzRyxTQUFXdEcsS0FBS3dHLGtCQUN0QnhHLEtBQUtzRyxRQUFVLEdBQUlwTixHQUFROEcsS0FBS3FCLFNBQ2hDckIsS0FBS3NHLFFBQVEwQixlQUFlWixFQUFFUyxNQUFPVCxFQUFFVSxRQUUzQzlILEtBQUs0RyxpQkFHVEksV0FBWSxXQUNSL08sRUFBRVQsRUFBUzhNLE1BQU1vRCxPQUFPLGdCQUN4QixJQUdLZixHQUFJaEUsRUFITDBELEVBQVNyRyxLQUFLcUcsT0FDYjRCLEVBQVU1QixFQUFPakcsT0FDakI4SCxHQUFlLENBVXBCLEtBUkFsSSxLQUFLdUcsTUFBTyxFQUNadkcsS0FBSytILFVBQVksS0FFYi9ILEtBQUtzRyxVQUNMdEcsS0FBS3NHLFFBQVE3TixTQUNidUgsS0FBS3NHLFFBQVUsTUFHZDNELEVBQUksRUFBT3NGLEVBQUp0RixFQUFhQSxJQUNyQmdFLEVBQUtOLEVBQU8xRCxHQUNSZ0UsRUFBR3dCLHlCQUNIRCxHQUFlLEVBSW5CQSxJQUNBbEksS0FBSzhFLE9BQU81RCxVQUlwQjBHLFVBQVcsU0FBVVIsR0FDakJwSCxLQUFLbUcsYUFBZWlCLEVBQUVTLE1BQ3RCN0gsS0FBS29HLGFBQWVnQixFQUFFVSxNQUN0QjlILEtBQUsrSCxVQUFZWCxFQUFFL0gsT0FDZlcsS0FBS3NHLFNBQ0x0RyxLQUFLc0csUUFBUTBCLGVBQWVaLEVBQUVTLE1BQU9ULEVBQUVVLE9BRTNDOUgsS0FBSzRHLGlCQUdUQSxjQUFlLFdBQ1gsR0FNS3dCLEdBQWF6QixFQUFJaEUsRUFBR0MsRUFBUXlGLEVBTjdCaEMsRUFBU3JHLEtBQUtxRyxPQUNiNEIsRUFBVTVCLEVBQU9qRyxPQUNqQjhILEdBQWUsRUFDZjFKLEVBQVN3QixLQUFLNkcsUUFBUXJJLFNBQ3RCOEosRUFBU3RJLEtBQUttRyxhQUFlM0gsRUFBTytKLEtBQ3BDQyxFQUFTeEksS0FBS29HLGFBQWU1SCxFQUFPaUssR0FFekMsSUFBS3pJLEtBQUt1RyxLQUFWLENBR0EsSUFBSzVELEVBQUksRUFBT3NGLEVBQUp0RixFQUFhQSxJQUNyQmdFLEVBQUtOLEVBQU8xRCxHQUNaQyxFQUFTK0QsRUFBRytCLG1CQUFtQjFJLEtBQUsrSCxVQUFXTyxFQUFRRSxHQUNuRDVGLElBQ0FzRixHQUFlLEVBR3ZCLElBQUlBLEVBQWMsQ0FJZCxHQUhBRyxFQUFjcFEsRUFBRXFQLE1BQU0seUJBQ3RCZSxFQUFZYixXQUFheEgsS0FBS3FHLE9BQzlCckcsS0FBS2tHLElBQUl1QixRQUFRWSxHQUNickksS0FBS3NHLFFBQVMsQ0FFZCxJQURBOEIsRUFBYyxHQUNUekYsRUFBSSxFQUFPc0YsRUFBSnRGLEVBQWFBLElBQ3JCZ0UsRUFBS04sRUFBTzFELEdBQ1p5RixHQUFlekIsRUFBR2dDLHlCQUV0QjNJLE1BQUtzRyxRQUFRc0MsV0FBV1IsR0FFdkJwSSxLQUFLNkksa0JBQ043SSxLQUFLOEUsT0FBTzVELFNBR0wsT0FBWDBCLEdBQ0E1QyxLQUFLZ0gsaUJBTWpCOU4sRUFBVWYsR0FDTjJRLFVBQVcsOEdBS1g3SSxLQUFNLFNBQVVvQixHQUNaLEdBRUk3QyxHQUZBdUssRUFBbUIxSCxFQUFRVSxJQUFJLG1CQUFvQixjQUNuRGlILEVBQWVoSixLQUFLOEksU0FFeEI5SSxNQUFLaUosVUFBWTVILEVBQVFVLElBQUkscUJBQXVCdkssRUFBUzhNLEtBQzdEdEUsS0FBS2tKLGVBQWlCN0gsRUFBUVUsSUFBSSxpQkFBa0IsSUFDcEQvQixLQUFLbUosZUFBaUI5SCxFQUFRVSxJQUFJLGlCQUFrQixJQUVwRDlKLEVBQUUsZUFBZVEsU0FDakJSLEVBQUUsZUFBZVEsU0FDakJ1SCxLQUFLb0osUUFBVW5SLEVBQUUsVUFDYm9SLEdBQUksYUFDSjlFLE1BQU95RSxFQUNQTSxRQUFTUCxJQUViL0ksS0FBS3NHLFFBQVVyTyxFQUFFLFVBQ2JvUixHQUFJLGFBQ0pDLFFBQVNQLElBQ1ZRLFNBQVN2SixLQUFLaUosV0FFakJ6SyxFQUFTd0IsS0FBS3NHLFFBQVE5SCxTQUN0QndCLEtBQUt3SixXQUFhaEwsRUFBTytKLEtBQ3pCdkksS0FBS3lKLFVBQVlqTCxFQUFPaUssSUFDeEJ6SSxLQUFLMEosUUFBUyxFQUNkelIsRUFBRTBSLFFBQVFqQyxPQUFPLHlCQUNqQnpQLEVBQUUwUixRQUFRaEMsS0FBSyx3QkFBeUIxUCxFQUFFOE8sTUFBTS9HLEtBQUs0SixpQkFBa0I1SixPQUN2RUEsS0FBSzRKLG9CQUdUQSxpQkFBa0IsV0FDZDVKLEtBQUs2SixVQUFZNVIsRUFBRTBSLFFBQVFFLFlBQzNCN0osS0FBSzhKLFdBQWE3UixFQUFFMFIsUUFBUUcsYUFDNUI5SixLQUFLK0osWUFBYy9KLEtBQUs4SixXQUFhN1IsRUFBRTBSLFFBQVFsUCxRQUMvQ3VGLEtBQUtnSSxrQkFHVGdDLFFBQVMsU0FBVUMsR0FDZmpLLEtBQUtvSixRQUFRYyxLQUFLRCxHQUFTVixTQUFTdkosS0FBS2lKLFdBQ3pDakosS0FBS3ZGLE1BQVF1RixLQUFLb0osUUFBUTNPLFFBQVUsRUFDcEN1RixLQUFLdEYsT0FBU3NGLEtBQUtvSixRQUFRMU8sU0FDM0JzRixLQUFLb0osUUFBUTNRLFVBR2pCbVEsV0FBWSxTQUFVcUIsR0FDbEIsTUFBS0EsSUFLTGpLLEtBQUtnSyxRQUFRQyxHQUNiakssS0FBS3NHLFFBQVE0RCxLQUFLRCxHQUNibEcsS0FDR3RKLE1BQVN1RixLQUFLdkYsTUFDZEMsT0FBVXNGLEtBQUt0RixPQUNmeVAsV0FBYyxpQkFFbEJuSyxLQUFLMEosU0FDTDFKLEtBQUswSixRQUFTLEVBQ2QxSixLQUFLZ0kscUJBYkxoSSxLQUFLc0csUUFBUXZDLElBQUksYUFBYyxlQUMvQi9ELEtBQUswSixRQUFTLEtBZ0J0QjFCLGVBQWdCLFNBQVVvQyxFQUFHQyxHQUN6QixHQUFJRCxJQUFNMVMsRUFBVyxDQUNqQixHQUFJc0ksS0FBS3NLLFNBQVc1UyxFQUNoQixNQUVKMFMsR0FBSXBLLEtBQUtzSyxPQUFTdEssS0FBS3dKLFdBQ3ZCYSxFQUFJckssS0FBS3VLLE9BQVN2SyxLQUFLeUosY0FHdkJ6SixNQUFLc0ssT0FBU0YsR0FBUXBLLEtBQUt3SixXQUMzQnhKLEtBQUt1SyxPQUFTRixHQUFRckssS0FBS3lKLFNBRTFCekosTUFBS3RGLFFBQVdzRixLQUFLdkYsUUFBU3VGLEtBQUswSixTQUl4Q1csR0FBS3JLLEtBQUt0RixPQUFTc0YsS0FBS21KLGVBQ3hCaUIsR0FBS3BLLEtBQUtrSixlQUVObUIsRUFBSXJLLEtBQUs2SixZQUNUUSxFQUFJckssS0FBSzZKLFdBRVRPLEVBQUlwSyxLQUFLOEosV0FDVE0sRUFBSXBLLEtBQUs4SixXQUNGTSxFQUFJcEssS0FBS3ZGLE1BQVF1RixLQUFLK0osY0FDN0JLLEVBQUlwSyxLQUFLK0osWUFBYy9KLEtBQUt2RixPQUdoQ3VGLEtBQUtzRyxRQUFRdkMsS0FDVHdFLEtBQVE2QixFQUNSM0IsSUFBTzRCLE1BSWY1UixPQUFRLFdBQ0p1SCxLQUFLc0csUUFBUTdOLFNBQ2J1SCxLQUFLb0osUUFBUTNRLFNBQ2J1SCxLQUFLb0osUUFBVXBKLEtBQUtzRyxRQUFVNU8sRUFDOUJPLEVBQUUwUixRQUFRakMsT0FBTyw0QkFJekI5TixFQUFhLFdBQ1RmLEVBQU9jLElBR1gxQixFQUFFMkIsR0FFRkssS0FDQWhDLEVBQUVGLEdBQUdDLFVBQVksU0FBVXdTLEVBQVlDLEdBQ25DLE1BQU96SyxNQUFLMEssS0FBSyxXQUNiLEdBRUt4SixHQUFReUIsRUFGVHRCLEVBQVUsR0FBSXBKLEdBQUVGLEdBQUdDLFVBQVVxSixRQUFRckIsS0FBTXlLLEdBQzFDRSxFQUFRMVMsRUFBRStILEtBeURmLElBdkRBa0IsRUFBUyxXQUNMLEdBQUlrQixHQUFRM0gsRUFBT0MsRUFBUWtRLEVBQUtoRyxFQUFVK0IsRUFBSWpFLENBc0M5QyxPQXJDbUIsU0FBZjhILEdBQXlCQSxJQUFlOVMsR0FDeENnTCxFQUFPMUMsS0FBSzZLLGFBQWF4SixFQUFRVSxJQUFJLHVCQUNqQ1csSUFBU2hMLEdBQXNCLE9BQVRnTCxJQUN0QkEsRUFBT2lJLEVBQU1ULFFBRWpCOUgsRUFBU00sRUFBS2QsUUFBUSw0QkFBNkIsSUFBSTJCLE1BQU0sTUFFN0RuQixFQUFTb0ksRUFHYi9QLEVBQWlDLFNBQXpCNEcsRUFBUVUsSUFBSSxTQUFzQkssRUFBT2hDLE9BQVNpQixFQUFRVSxJQUFJLHlCQUEyQlYsRUFBUVUsSUFBSSxTQUMvRSxTQUExQlYsRUFBUVUsSUFBSSxVQUNQVixFQUFRVSxJQUFJLGNBQWlCOUosRUFBRTRNLEtBQUs3RSxLQUFNLGtCQUUzQzRLLEVBQU1wVCxFQUFTMk0sY0FBYyxRQUM3QnlHLEVBQUlFLFVBQVksSUFDaEJILEVBQU1ULEtBQUtVLEdBQ1hsUSxFQUFTekMsRUFBRTJTLEdBQUt2RixlQUFpQnBOLEVBQUUyUyxHQUFLbFEsU0FDeEN6QyxFQUFFMlMsR0FBS25TLFNBQ1BtUyxFQUFNLE1BR1ZsUSxFQUFTMkcsRUFBUVUsSUFBSSxVQUdwQlYsRUFBUVUsSUFBSSxzQkFTYjZDLEdBQVcsR0FSWEEsRUFBVzNNLEVBQUU0TSxLQUFLN0UsS0FBTSxpQkFDbkI0RSxFQUdPdkQsRUFBUVUsSUFBSSxjQUNwQjZDLEVBQVNZLFNBSFRaLEVBQVcsR0FBSTNMLEdBQWErRyxLQUFNcUIsR0FDbENwSixFQUFFNE0sS0FBSzdFLEtBQU0sZ0JBQWlCNEUsS0FRbEN2RCxFQUFRVSxJQUFJLGVBQWlCOUosRUFBRTRNLEtBQUs3RSxLQUFNLHFCQUNyQy9ILEVBQUU0TSxLQUFLN0UsS0FBTSxvQkFDZCtLLE1BQU0sc0ZBQ045UyxFQUFFNE0sS0FBSzdFLEtBQU0sa0JBQWtCLE1BS3ZDMkcsRUFBSyxJQUFJMU8sRUFBRUYsR0FBR0MsVUFBVXFKLEVBQVFVLElBQUksVUFBUy9CLEtBQU1vQyxFQUFRZixFQUFTNUcsRUFBT0MsR0FFM0VpTSxFQUFHekYsY0FFQzBELEdBQ0FBLEVBQVM4QixrQkFBa0JDLE1BRzlCMU8sRUFBRStILE1BQU1rSyxTQUFXN0ksRUFBUVUsSUFBSSx1QkFBeUI5SixFQUFFK0gsTUFBTWdMLEdBQUcsYUFBZ0IvUyxFQUFFK0gsTUFBTWlMLFFBQVEsUUFBUTdLLE9BQVEsQ0FDcEgsSUFBS2lCLEVBQVFVLElBQUksY0FBZ0I5SixFQUFFNE0sS0FBSzdFLEtBQU0sZ0JBRTFDLElBQUsyQyxFQUFJMUksRUFBUW1HLE9BQVF1QyxFQUFHQSxJQUNwQjFJLEVBQVEwSSxFQUFJLEdBQUcsSUFBTTNDLE1BQ3JCL0YsRUFBUXdKLE9BQU9kLEVBQUksRUFBRyxFQUlsQzFJLEdBQVE2SSxNQUFNOUMsS0FBTWtCLElBQ3BCakosRUFBRTRNLEtBQUs3RSxLQUFNLGdCQUFnQixPQUU3QmtCLEdBQU9SLEtBQUtWLFNBS3hCL0gsRUFBRUYsR0FBR0MsVUFBVWtULFNBQVdoVCxJQUcxQkQsRUFBRWtULDBCQUE0QixXQUMxQixHQUFJcEcsR0FBSXBDLEVBQUd5SSxFQUNQQyxJQUNKLEtBQUsxSSxFQUFJLEVBQUd5SSxFQUFLblIsRUFBUW1HLE9BQVlnTCxFQUFKekksRUFBUUEsSUFDckNvQyxFQUFLOUssRUFBUTBJLEdBQUcsR0FDWjFLLEVBQUU4TSxHQUFJaUcsR0FBRyxjQUFnQi9TLEVBQUU4TSxHQUFJa0csVUFBVUQsR0FBRyxZQUM1Qy9RLEVBQVEwSSxHQUFHLEdBQUdqQyxLQUFLcUUsR0FDbkI5TSxFQUFFNE0sS0FBSzVLLEVBQVEwSSxHQUFHLEdBQUksZ0JBQWdCLEdBQ3RDMEksRUFBS3ZJLEtBQUtILElBQ0YxSyxFQUFFOE0sR0FBSXVHLFFBQVEsUUFBUWxMLFFBQVduSSxFQUFFNE0sS0FBS0UsRUFBSSxrQkFLcEQ5TSxFQUFFNE0sS0FBSzVLLEVBQVEwSSxHQUFHLEdBQUksZ0JBQWdCLEdBQ3RDMEksRUFBS3ZJLEtBQUtILEdBR2xCLEtBQUtBLEVBQUkwSSxFQUFLakwsT0FBUXVDLEVBQUdBLElBQ3JCMUksRUFBUXdKLE9BQU80SCxFQUFLMUksRUFBSSxHQUFJLElBUXBDMUssRUFBRUYsR0FBR0MsVUFBVXFKLFFBQVVsSixHQUNyQjhILEtBQU0sU0FBVStELEVBQUt5RyxHQUNqQixHQUFJYyxHQUFpQkwsRUFBVS9NLEVBQU1xTixDQUNyQ3hMLE1BQUt5SyxZQUFjQSxFQUFjQSxNQUNqQ3pLLEtBQUtnRSxJQUFNQSxFQUNYaEUsS0FBS3lMLGVBQ0xQLEVBQVdqVCxFQUFFRixHQUFHQyxVQUFVa1QsU0FDMUIvTSxFQUFPK00sRUFBUzlRLE9BQ2hCNEYsS0FBS25GLGlCQUFtQjRQLEVBQVkzUCxtQkFBcUIyUCxFQUFZNVAsa0JBQW9Cc0QsRUFBS3RELGtCQUU5RjJRLEVBQWdCeEwsS0FBSzBMLGNBQWMsUUFFL0JILEVBREFDLElBQWtCdFIsRUFDQWdSLEVBQVNULEVBQVlwUSxNQUFROEQsRUFBSzlELE1BRWxDNlEsRUFBU00sR0FFL0J4TCxLQUFLMkwsY0FBZ0IxVCxFQUFFcUksVUFBV25DLEVBQU1vTixFQUFpQmQsSUFJN0RpQixjQUFlLFNBQVVoRyxHQUNyQixHQUNJekQsR0FBS1UsRUFBR2lKLEVBQU9DLEVBRGZDLEVBQVM5TCxLQUFLbkYsZ0JBRWxCLElBQUlpUixLQUFXLEdBQVNBLElBQVdwVSxFQUMvQixNQUFPd0MsRUFFWCxJQUFJOEYsS0FBS3lMLFlBQVk1RixlQUFlSCxHQUNoQ3pELEVBQU1qQyxLQUFLeUwsWUFBWS9GLFFBQ3BCLENBRUgsR0FEQXpELEVBQU1qQyxLQUFLZ0UsSUFBSTZHLGFBQWFpQixFQUFTcEcsR0FDakN6RCxJQUFRdkssR0FBcUIsT0FBUnVLLEVBQ3JCQSxFQUFNL0gsTUFDSCxJQUF5QixNQUFyQitILEVBQUk4SixPQUFPLEVBQUcsR0FFckIsSUFEQTlKLEVBQU1BLEVBQUk4SixPQUFPLEVBQUc5SixFQUFJN0IsT0FBUyxHQUFHbUQsTUFBTSxLQUNyQ1osRUFBSVYsRUFBSTdCLE9BQVF1QyxLQUNqQlYsRUFBSVUsR0FBS3BLLEVBQWUwSixFQUFJVSxHQUFHZixRQUFRLGlCQUFrQixTQUUxRCxJQUF5QixNQUFyQkssRUFBSThKLE9BQU8sRUFBRyxHQUdyQixJQUZBSCxFQUFRM0osRUFBSThKLE9BQU8sRUFBRzlKLEVBQUk3QixPQUFTLEdBQUdtRCxNQUFNLEtBQzVDdEIsS0FDS1UsRUFBSWlKLEVBQU14TCxPQUFRdUMsS0FDbkJrSixFQUFTRCxFQUFNakosR0FBR1ksTUFBTSxJQUFLLEdBQzdCdEIsRUFBSTRKLEVBQU8sR0FBR2pLLFFBQVEsaUJBQWtCLEtBQU9ySixFQUFlc1QsRUFBTyxHQUFHakssUUFBUSxpQkFBa0IsU0FHdEdLLEdBQU0xSixFQUFlMEosRUFFekJqQyxNQUFLeUwsWUFBWS9GLElBQU16RCxFQUUzQixNQUFPQSxJQUdYRixJQUFLLFNBQVUyRCxFQUFLc0csR0FDaEIsR0FDSXBKLEdBREFxSixFQUFZak0sS0FBSzBMLGNBQWNoRyxFQUVuQyxPQUFJdUcsS0FBYy9SLEVBQ1ArUixHQUVIckosRUFBUzVDLEtBQUsyTCxjQUFjakcsTUFBVWhPLEVBQVlzVSxFQUFhcEosS0FLL0UzSyxFQUFFRixHQUFHQyxVQUFVa1UsTUFBUS9ULEdBQ25CZ1UsVUFBVSxFQUVWbE0sS0FBTSxTQUFVOEUsRUFBSTNDLEVBQVFmLEVBQVM1RyxFQUFPQyxHQUN4Q3NGLEtBQUsrRSxHQUFLQSxFQUNWL0UsS0FBS2tHLElBQU1qTyxFQUFFOE0sR0FDYi9FLEtBQUtvQyxPQUFTQSxFQUNkcEMsS0FBS3FCLFFBQVVBLEVBQ2ZyQixLQUFLdkYsTUFBUUEsRUFDYnVGLEtBQUt0RixPQUFTQSxFQUNkc0YsS0FBS29NLGNBQWdCMVUsR0FNekIyVSxXQUFZLFdBQ1IsR0FBSUMsSUFBZXRNLEtBQUtxQixRQUFRVSxJQUFJLHVCQUM5Qi9CLEtBQUtYLE9BQVNXLEtBQUtrRyxJQUFJekIsV0FBV3pFLEtBQUt2RixNQUFPdUYsS0FBS3RGLE9BQVFzRixLQUFLcUIsUUFBUVUsSUFBSSxhQUFjdUssS0FHNUZ0TSxLQUFLdU0sWUFBY3ZNLEtBQUtYLE9BQU9tTixXQUMvQnhNLEtBQUt5TSxhQUFlek0sS0FBS1gsT0FBT3FOLGFBSGhDMU0sS0FBS21NLFVBQVcsR0FVeEJqTCxPQUFRLFdBQ0osTUFBSWxCLE1BQUttTSxVQUNMbk0sS0FBSytFLEdBQUcrRixVQUFZLElBQ2IsSUFFSixHQU1YNkIsVUFBVyxTQUFVdkMsRUFBR0MsS0FNeEIzQixtQkFBb0IsU0FBVTNELEVBQUlxRixFQUFHQyxHQUNqQyxHQUVJdUMsR0FGQVIsRUFBZ0JwTSxLQUFLb00sY0FDckIzRixHQUFvQnpHLEtBQUtxQixRQUFRVSxJQUFJLG1CQUV6QyxPQUFJcUksR0FBSXBLLEtBQUt1TSxhQUFlbEMsRUFBSXJLLEtBQUt5TSxjQUFvQixFQUFKckMsR0FBYSxFQUFKQyxFQUNuRCxNQUVYdUMsRUFBWTVNLEtBQUsyTSxVQUFVNUgsRUFBSXFGLEVBQUdDLEdBQzlCK0IsSUFBa0JRLEdBQ2RSLElBQWtCMVUsR0FBYStPLEdBQy9CekcsS0FBSzZNLGtCQUVUN00sS0FBS29NLGNBQWdCUSxFQUNqQkEsSUFBY2xWLEdBQWErTyxHQUMzQnpHLEtBQUs4TSxtQkFFRixJQUVKLElBTVgzRSxxQkFBc0IsV0FDbEIsTUFBSW5JLE1BQUtvTSxnQkFBa0IxVSxHQUN2QnNJLEtBQUs2TSxrQkFDTDdNLEtBQUtvTSxjQUFnQjFVLEdBQ2QsSUFFSixHQUdYb1YsZ0JBQWlCLFdBQ2I5TSxLQUFLK00saUJBQWdCLElBR3pCRixnQkFBaUIsV0FDYjdNLEtBQUsrTSxpQkFBZ0IsSUFHekJBLGdCQUFpQixTQUFVQyxLQUszQnJFLHdCQUF5QixXQUNyQixHQUdJdkssR0FBUTZPLEVBQVNDLEVBQVdqTSxFQUFRa00sRUFBTXhLLEVBQzFDeUssRUFBWUMsRUFBZUMsRUFBV0MsRUFDdENDLEVBQVd4TSxFQUFReU0sRUFBVUMsRUFMN0JyTSxFQUFVckIsS0FBS3FCLFFBQ2ZzTSxFQUFTLEdBQ1RDLElBSUosSUFBSTVOLEtBQUtvTSxnQkFBa0IxVSxFQUN2QixNQUFPLEVBSVgsSUFGQTBHLEVBQVM0QixLQUFLNk4seUJBQ2RMLEVBQVluTSxFQUFRVSxJQUFJLG9CQUVwQixNQUFPeUwsR0FBVXhOLEtBQU1xQixFQUFTakQsRUFNcEMsSUFKSWlELEVBQVFVLElBQUksdUJBQ1o0TCxHQUFVLDZCQUErQnRNLEVBQVFVLElBQUkscUJBQXVCLFlBRWhGa0wsRUFBVWpOLEtBQUtxQixRQUFRVSxJQUFJLGtCQUN0QmtMLEVBQ0QsTUFBTyxFQVVYLElBUktoVixFQUFFNkwsUUFBUW1KLEtBQ1hBLEdBQVdBLElBRVZoVixFQUFFNkwsUUFBUTFGLEtBQ1hBLEdBQVVBLElBRWRnUCxFQUFhcE4sS0FBS3FCLFFBQVFVLElBQUksMEJBQzlCc0wsRUFBZ0JyTixLQUFLcUIsUUFBUVUsSUFBSSw2QkFDN0JxTCxHQUFjQyxFQUFlLENBRzdCLElBREFDLEtBQ0szSyxFQUFJdkUsRUFBT2dDLE9BQVF1QyxLQUNwQjRLLEVBQUtuUCxFQUFPdUUsR0FBRzBLLEdBQ3dCLEtBQWxDSyxFQUFJelYsRUFBRXVMLFFBQVErSixFQUFJSCxNQUNuQkUsRUFBVUksR0FBS3RQLEVBQU91RSxHQUc5QnZFLEdBQVNrUCxFQUliLElBRkFKLEVBQVlELEVBQVE3TSxPQUNwQnFOLEVBQVdyUCxFQUFPZ0MsT0FDYnVDLEVBQUksRUFBT3VLLEVBQUp2SyxFQUFlQSxJQU12QixJQUxBM0IsRUFBU2lNLEVBQVF0SyxHQUNLLGdCQUFYM0IsS0FDUEEsRUFBUyxHQUFJNUksR0FBUzRJLElBRTFCQyxFQUFTRCxFQUFPQyxRQUFVLFdBQ3JCeU0sRUFBSSxFQUFPRCxFQUFKQyxFQUFjQSxJQUNqQnRQLEVBQU9zUCxHQUFHSSxRQUFXek0sRUFBUVUsSUFBSSxxQkFDbEM5SixFQUFFcUksT0FBT2xDLEVBQU9zUCxJQUNaNUIsT0FBUXpLLEVBQVFVLElBQUksaUJBQ3BCZ00sT0FBUTFNLEVBQVFVLElBQUksbUJBRXhCb0wsRUFBT25NLEVBQU9FLE9BQU85QyxFQUFPc1AsR0FBSXJNLEVBQVFVLElBQUksdUJBQXdCVixHQUNwRXVNLEVBQVE5SyxLQUFLLGVBQWlCN0IsRUFBUyxLQUFPa00sRUFBTyxVQUlqRSxPQUFJUyxHQUFReE4sT0FDRHVOLEVBQVNDLEVBQVFsSyxLQUFLLE1BRTFCLElBR1htSyx1QkFBd0IsYUFFeEJHLG1CQUFvQixTQUFVQyxFQUFPNU0sR0FDakMsR0FFSTZNLEdBQU9DLEVBQU1DLEVBQVF6TCxFQUZyQjBMLEVBQWlCaE4sRUFBUVUsSUFBSSxrQkFDN0J1TSxFQUFVak4sRUFBUVUsSUFBSSxtQkFFMUIsSUFBSXNNLEVBQ0EsTUFBT0EsRUFFWCxJQUFJQyxJQUVBSixFQUFRLHFDQUFxQ3BNLEtBQUttTSxJQUFVLDhDQUE4Q25NLEtBQUttTSxJQUNwRyxDQUdQLElBRkFHLEtBQ0FELEVBQXdCLElBQWpCRixFQUFNN04sT0FBZSxHQUFLLEVBQzVCdUMsRUFBSSxFQUFPLEVBQUpBLEVBQU9BLElBQ2Z5TCxFQUFPekwsR0FBS3RLLEVBQVFaLEVBQUs4VyxNQUFNQyxTQUFTTixFQUFNdkwsRUFBSSxHQUFJLElBQU13TCxFQUFPRyxHQUFVLEVBQUcsSUFFcEYsT0FBTyxPQUFTRixFQUFPMUssS0FBSyxLQUFPLElBSTNDLE1BQU91SyxNQUtmOVUsR0FDSTRULGdCQUFpQixTQUFVQyxHQUN2QixHQUdJeUIsR0FIQXJDLEVBQWdCcE0sS0FBS29NLGNBQ3JCL00sRUFBU1csS0FBS1gsT0FDZHFQLEVBQVcxTyxLQUFLMk8sYUFBYXZDLEVBRzdCc0MsS0FDQUQsRUFBWXpPLEtBQUs0TyxhQUFheEMsRUFBZVksR0FDekMvVSxFQUFFNkwsUUFBUTJLLElBQWN4VyxFQUFFNkwsUUFBUTRLLElBQ2xDclAsRUFBT3dQLGtCQUFrQkgsRUFBVUQsR0FDbkN6TyxLQUFLMk8sYUFBYXZDLEdBQWlCblUsRUFBRXVGLElBQUlpUixFQUFXLFNBQVVLLEdBQzFELE1BQU9BLEdBQVN6RixPQUdwQmhLLEVBQU8wUCxpQkFBaUJMLEVBQVVELEdBQ2xDek8sS0FBSzJPLGFBQWF2QyxHQUFpQnFDLEVBQVVwRixNQUt6RG5JLE9BQVEsV0FDSixHQUdJOE4sR0FBUUMsRUFBS3RNLEVBQUcrSyxFQUhoQnRMLEVBQVNwQyxLQUFLb0MsT0FDZC9DLEVBQVNXLEtBQUtYLE9BQ2RzUCxFQUFlM08sS0FBSzJPLFlBR3hCLElBQUszTyxLQUFLWSxJQUFJTCxPQUFPVyxPQUFPUixLQUFLVixNQUFqQyxDQUdBLElBQUsyQyxFQUFJUCxFQUFPaEMsT0FBUXVDLEtBRXBCLEdBREFxTSxFQUFTaFAsS0FBSzRPLGFBQWFqTSxHQUV2QixHQUFJMUssRUFBRTZMLFFBQVFrTCxHQUFTLENBRW5CLElBREFDLEtBQ0t2QixFQUFJc0IsRUFBTzVPLE9BQVFzTixLQUNwQnNCLEVBQU90QixHQUFHd0IsU0FDVkQsRUFBSW5NLEtBQUtrTSxFQUFPdEIsR0FBR3JFLEdBRXZCc0YsR0FBYWhNLEdBQUtzTSxNQUVsQkQsR0FBT0UsU0FDUFAsRUFBYWhNLEdBQUtxTSxFQUFPM0YsT0FJN0JzRixHQUFhaE0sR0FBSyxJQUcxQnRELEdBQU82QixZQU9makosRUFBRUYsR0FBR0MsVUFBVW9CLEtBQU9BLEVBQU9qQixFQUFZRixFQUFFRixHQUFHQyxVQUFVa1UsT0FDcEQ3UixLQUFNLE9BRU40RixLQUFNLFNBQVU4RSxFQUFJM0MsRUFBUWYsRUFBUzVHLEVBQU9DLEdBQ3hDdEIsRUFBS21ILE9BQU9OLEtBQUtTLEtBQUtWLEtBQU0rRSxFQUFJM0MsRUFBUWYsRUFBUzVHLEVBQU9DLEdBQ3hEc0YsS0FBS21QLFlBQ0xuUCxLQUFLb1AsYUFDTHBQLEtBQUtxUCxXQUNMclAsS0FBS3NQLFdBQ0x0UCxLQUFLdVAsV0FDTHZQLEtBQUt3UCxpQkFBbUIsS0FDeEJ4UCxLQUFLeVAsWUFBYyxLQUNuQnpQLEtBQUtxTSxjQUdUTSxVQUFXLFNBQVU1SCxFQUFJcUYsRUFBR0MsR0FDeEIsR0FBSTFILEdBQ0F5TSxFQUFZcFAsS0FBS29QLFNBQ3JCLEtBQUt6TSxFQUFJeU0sRUFBVWhQLE9BQVF1QyxLQUN2QixHQUFxQixPQUFqQnlNLEVBQVV6TSxJQUFleUgsR0FBS2dGLEVBQVV6TSxHQUFHLElBQU15SCxHQUFLZ0YsRUFBVXpNLEdBQUcsR0FDbkUsTUFBT3lNLEdBQVV6TSxHQUFHLEVBRzVCLE9BQU9qTCxJQUdYbVcsdUJBQXdCLFdBQ3BCLEdBQUl6QixHQUFnQnBNLEtBQUtvTSxhQUN6QixRQUNJMEIsT0FBd0MsT0FBaEM5TixLQUFLc1AsUUFBUWxELEdBQ3JCaEMsRUFBR3BLLEtBQUtxUCxRQUFRakQsR0FDaEIvQixFQUFHckssS0FBS3NQLFFBQVFsRCxHQUNoQjZCLE1BQU9qTyxLQUFLcUIsUUFBUVUsSUFBSSxhQUN4QnhILFVBQVd5RixLQUFLcUIsUUFBUVUsSUFBSSxhQUM1QnZELE9BQVE0TixJQUloQlUsZ0JBQWlCLFdBQ2IsR0FPSTRDLEdBQWVDLEVBUGZ2RCxFQUFnQnBNLEtBQUtvTSxjQUNyQi9NLEVBQVNXLEtBQUtYLE9BQ2R1USxFQUFTNVAsS0FBS21QLFNBQVMvQyxHQUN2Qi9LLEVBQVVyQixLQUFLcUIsUUFDZnZGLEVBQWF1RixFQUFRVSxJQUFJLGNBQ3pCbkcsRUFBcUJ5RixFQUFRVSxJQUFJLHNCQUNqQ2xHLEVBQXFCd0YsRUFBUVUsSUFBSSxxQkFHaEM2TixLQUdEOVQsR0FBY0YsSUFDZDhULEVBQWdCclEsRUFBT3dRLFdBQVdELEVBQU8sR0FBSUEsRUFBTyxHQUNoRDlULEVBQVlwRSxFQUFXa0UsR0FDM0JvRSxLQUFLOFAsZ0JBQWtCSixFQUFjckcsR0FDckNoSyxFQUFPMFEsaUJBQWlCL1AsS0FBS3lQLFlBQWFDLElBRTFDN1QsSUFDQThULEVBQWdCdFEsRUFBTzJRLFNBQVNKLEVBQU8sR0FBSTVQLEtBQUtpUSxVQUFXTCxFQUFPLEdBQzlENVAsS0FBS2lRLFVBQVlqUSxLQUFLeU0sYUFBYzVRLEdBQ3hDbUUsS0FBS2tRLGdCQUFrQlAsRUFBY3RHLEdBQ3JDaEssRUFBTzBRLGlCQUFpQi9QLEtBQUt5UCxZQUFhRSxNQUlsRDlDLGdCQUFpQixXQUNiLEdBQUl4TixHQUFTVyxLQUFLWCxNQUNkVyxNQUFLOFAsa0JBQ0x6USxFQUFPOFEsY0FBY25RLEtBQUs4UCxpQkFDMUI5UCxLQUFLOFAsZ0JBQWtCLE1BRXZCOVAsS0FBS2tRLGtCQUNMN1EsRUFBTzhRLGNBQWNuUSxLQUFLa1EsaUJBQzFCbFEsS0FBS2tRLGdCQUFrQixPQUkvQkUsV0FBWSxXQUNSLEdBS0l6TixHQUFHVixFQUFLb08sRUFBT3ZNLEVBQVM2QyxFQUx4QnZFLEVBQVNwQyxLQUFLb0MsT0FDZGtPLEVBQVdsTyxFQUFPaEMsT0FDbEJpUCxFQUFVclAsS0FBS3FQLFFBQ2ZDLEVBQVV0UCxLQUFLc1AsUUFDZkMsRUFBVXZQLEtBQUt1UCxPQUVuQixLQUFLNU0sRUFBSSxFQUFPMk4sRUFBSjNOLEVBQWNBLElBQ3RCVixFQUFNRyxFQUFPTyxHQUNiME4sRUFBOEIsZ0JBQWZqTyxHQUFPTyxHQUN0Qm1CLEVBQWdDLGdCQUFmMUIsR0FBT08sSUFBb0JQLEVBQU9PLFlBQWNuQyxPQUNqRW1HLEVBQUswSixHQUFTak8sRUFBT08sR0FBR1ksTUFBTSxLQUMxQjhNLEdBQXVCLElBQWQxSixFQUFHdkcsUUFDWmlQLEVBQVF2TSxLQUFLeU4sT0FBTzVKLEVBQUcsS0FDdkIySSxFQUFReE0sS0FBS3lOLE9BQU81SixFQUFHLEtBQ3ZCNEksRUFBUXpNLEtBQUt5TixPQUFPNUosRUFBRyxNQUNoQjdDLEdBQ1B1TCxFQUFRdk0sS0FBS2IsRUFBSSxJQUNqQnFOLEVBQVF4TSxLQUFLYixFQUFJLElBQ2pCc04sRUFBUXpNLEtBQUtiLEVBQUksTUFFakJvTixFQUFRdk0sS0FBS0gsR0FDSyxPQUFkUCxFQUFPTyxJQUE2QixTQUFkUCxFQUFPTyxHQUM3QjJNLEVBQVF4TSxLQUFLLE9BRWJ3TSxFQUFReE0sS0FBS3lOLE9BQU90TyxJQUNwQnNOLEVBQVF6TSxLQUFLeU4sT0FBT3RPLEtBSTVCakMsTUFBS3FCLFFBQVFVLElBQUksYUFDakJzTixFQUFVclAsS0FBS3FCLFFBQVFVLElBQUksWUFHL0IvQixLQUFLd1EsS0FBT3hRLEtBQUt5USxRQUFVaFosRUFBSzBLLElBQUlqQyxNQUFNekksRUFBTThYLEdBQ2hEdlAsS0FBSzBRLEtBQU8xUSxLQUFLMlEsUUFBVWxaLEVBQUt5SyxJQUFJaEMsTUFBTXpJLEVBQU04WCxHQUVoRHZQLEtBQUs0USxLQUFPblosRUFBSzBLLElBQUlqQyxNQUFNekksRUFBTTRYLEdBQ2pDclAsS0FBSzZRLEtBQU9wWixFQUFLeUssSUFBSWhDLE1BQU16SSxFQUFNNFgsR0FFakNyUCxLQUFLcVAsUUFBVUEsRUFDZnJQLEtBQUtzUCxRQUFVQSxFQUNmdFAsS0FBS3VQLFFBQVVBLEdBSW5CdUIsb0JBQXFCLFdBQ2pCLEdBQUl6UCxHQUFVckIsS0FBS3FCLFFBQ2ZuRixFQUFpQm1GLEVBQVFVLElBQUksa0JBQzdCNUYsRUFBaUJrRixFQUFRVSxJQUFJLGlCQUU3QjdGLEtBQW1CeEUsSUFDZndFLEVBQWlCOEQsS0FBSzBRLE9BQ3RCMVEsS0FBSzBRLEtBQU94VSxHQUVaQyxFQUFpQjZELEtBQUt3USxPQUN0QnhRLEtBQUt3USxLQUFPclUsSUFHaEJrRixFQUFRVSxJQUFJLG1CQUFxQnJLLElBQWMySixFQUFRVSxJQUFJLG1CQUFxQlYsRUFBUVUsSUFBSSxpQkFBbUIvQixLQUFLMFEsUUFDcEgxUSxLQUFLMFEsS0FBT3JQLEVBQVFVLElBQUksa0JBRXhCVixFQUFRVSxJQUFJLG1CQUFxQnJLLElBQWMySixFQUFRVSxJQUFJLG1CQUFxQlYsRUFBUVUsSUFBSSxpQkFBbUIvQixLQUFLd1EsUUFDcEh4USxLQUFLd1EsS0FBT25QLEVBQVFVLElBQUksa0JBRXhCVixFQUFRVSxJQUFJLG9CQUFzQnJLLElBQWMySixFQUFRVSxJQUFJLG9CQUFzQlYsRUFBUVUsSUFBSSxrQkFBb0IvQixLQUFLNlEsUUFDdkg3USxLQUFLNlEsS0FBT3hQLEVBQVFVLElBQUksbUJBRXhCVixFQUFRVSxJQUFJLG9CQUFzQnJLLElBQWMySixFQUFRVSxJQUFJLG9CQUFzQlYsRUFBUVUsSUFBSSxrQkFBb0IvQixLQUFLNFEsUUFDdkg1USxLQUFLNFEsS0FBT3ZQLEVBQVFVLElBQUksb0JBS2hDZ1AsZ0JBQWlCLFNBQVVDLEVBQVlmLEVBQVd4RCxFQUFjRixFQUFhMEUsR0FDekUsR0FBSS9VLEdBQWlCOEQsS0FBS3FCLFFBQVFVLElBQUksa0JBQ2xDNUYsRUFBaUI2RCxLQUFLcUIsUUFBUVUsSUFBSSxrQkFDbENtUCxFQUFPakIsRUFBWXhZLEVBQUs4VyxNQUFNOUIsRUFBZ0JBLElBQWlCdFEsRUFBaUI2RCxLQUFLMFEsTUFBUU8sSUFDN0Z2VyxFQUFTakQsRUFBSzhXLE1BQU85QixHQUFnQnRRLEVBQWlCRCxHQUFtQitVLEVBQzdFalIsTUFBS1gsT0FBTzhSLFNBQVNILEVBQVlFLEVBQU0zRSxFQUFhN1IsRUFBUWhELEVBQVdzSSxLQUFLcUIsUUFBUVUsSUFBSSxxQkFBcUJtTixVQUdqSGhPLE9BQVEsV0FDSixHQU9Ja1EsR0FBUUgsRUFBUUksRUFDaEJwQixFQUFXZSxFQUNYcEIsRUFBUTBCLEVBQU1DLEVBQU9uSCxFQUFHQyxFQUFHbUgsRUFBT0MsRUFBTUMsRUFDeENDLEVBQU1DLEVBQU1DLEVBQVdDLEVBQVlDLEVBQVlDLEVBQy9DQyxFQUFZQyxFQUFnQmpFLEVBQU9vQixFQUFTQyxFQUFTM00sRUFYckR0QixFQUFVckIsS0FBS3FCLFFBQ2ZoQyxFQUFTVyxLQUFLWCxPQUNka04sRUFBY3ZNLEtBQUt1TSxZQUNuQkUsRUFBZXpNLEtBQUt5TSxhQUNwQjBDLEVBQVduUCxLQUFLbVAsU0FDaEJyVCxFQUFhdUYsRUFBUVUsSUFBSSxjQUN6QnFOLEVBQVlwUCxLQUFLb1AsU0FPckIsSUFBS2hXLEVBQUttSCxPQUFPVyxPQUFPUixLQUFLVixRQUk3QkEsS0FBS29RLGFBQ0xwUSxLQUFLOFEsc0JBRUx6QixFQUFVclAsS0FBS3FQLFFBQ2ZDLEVBQVV0UCxLQUFLc1AsUUFFVnRQLEtBQUt1UCxRQUFRblAsVUFBVUosS0FBS3NQLFFBQVFsUCxPQUFTLElBQWxELENBK0NBLElBMUNBNlAsRUFBWWUsRUFBYSxFQUV6QkksRUFBU3BSLEtBQUs0USxLQUFPNVEsS0FBSzZRLE9BQVMsRUFBSSxFQUFJN1EsS0FBSzRRLEtBQU81USxLQUFLNlEsS0FDNURJLEVBQVNqUixLQUFLd1EsS0FBT3hRLEtBQUswUSxPQUFTLEVBQUksRUFBSTFRLEtBQUt3USxLQUFPeFEsS0FBSzBRLEtBQzVEVyxFQUFXclIsS0FBS3NQLFFBQVFsUCxPQUFTLEVBRTdCdEUsSUFBMkMsRUFBYkEsRUFBZnlRLEdBQStELEVBQWJ6USxFQUFoQjJRLEtBQ2pEM1EsRUFBYSxHQUViQSxJQUVBb1csRUFBaUI3USxFQUFRVSxJQUFJLHdCQUEyQlYsRUFBUVUsSUFBSSx1QkFDaEVtUSxHQUFrQjdRLEVBQVFVLElBQUksaUJBQW9CVixFQUFRVSxJQUFJLGNBQWdCdU4sRUFBUStCLEtBQWNyUixLQUFLMFEsUUFDekdqRSxHQUFnQmhWLEVBQUswYSxLQUFLclcsS0FFMUJvVyxHQUFrQjdRLEVBQVFVLElBQUksaUJBQW9CVixFQUFRVSxJQUFJLGNBQWdCdU4sRUFBUStCLEtBQWNyUixLQUFLd1EsUUFDekcvRCxHQUFnQmhWLEVBQUswYSxLQUFLclcsR0FDMUJtVSxHQUFheFksRUFBSzBhLEtBQUtyVyxLQUV2Qm9XLElBQ0c3USxFQUFRVSxJQUFJLGlCQUFtQlYsRUFBUVUsSUFBSSxtQkFBcUJ1TixFQUFRLEtBQU90UCxLQUFLMFEsTUFBUXBCLEVBQVEsS0FBT3RQLEtBQUt3USxTQUNuSFEsR0FBY3ZaLEVBQUswYSxLQUFLclcsR0FDeEJ5USxHQUFlOVUsRUFBSzBhLEtBQUtyVyxLQUV6Qm9XLEdBQWtCN1EsRUFBUVUsSUFBSSxjQUM3QlYsRUFBUVUsSUFBSSxpQkFBbUJWLEVBQVFVLElBQUksa0JBQ3ZDdU4sRUFBUStCLEtBQWNyUixLQUFLMFEsTUFBUXBCLEVBQVErQixLQUFjclIsS0FBS3dRLFNBQ25FakUsR0FBZTlVLEVBQUswYSxLQUFLclcsS0FLakMyUSxJQUVJcEwsRUFBUVUsSUFBSSxvQkFBc0JySyxHQUFjMkosRUFBUVUsSUFBSSxvQkFDNUQvQixLQUFLK1EsZ0JBQWdCQyxFQUFZZixFQUFXeEQsRUFBY0YsRUFBYTBFLEdBRzNFSyxLQUNBQyxHQUFTRCxHQUNUSyxFQUFPQyxFQUFPLEtBQ2RDLEVBQVl2QyxFQUFRbFAsT0FDZnVDLEVBQUksRUFBT2tQLEVBQUpsUCxFQUFlQSxJQUN2QnlILEVBQUlpRixFQUFRMU0sR0FDWjZPLEVBQVFuQyxFQUFRMU0sRUFBSSxHQUNwQjBILEVBQUlpRixFQUFRM00sR0FDWjhPLEVBQU9ULEVBQWF2WixFQUFLOFcsT0FBT25FLEVBQUlwSyxLQUFLNlEsT0FBU3RFLEVBQWM2RSxJQUNoRU0sRUFBZUcsRUFBWSxFQUFoQmxQLEVBQW9CcU8sRUFBYXZaLEVBQUs4VyxPQUFPaUQsRUFBUXhSLEtBQUs2USxPQUFTdEUsRUFBYzZFLElBQVc3RSxFQUN2R3FGLEVBQU9ILEdBQVNDLEVBQVdELEdBQVEsRUFDbkNyQyxFQUFVek0sSUFBTWdQLEdBQVEsRUFBR0MsRUFBTWpQLEdBQ2pDZ1AsRUFBT0MsRUFDRyxPQUFOdkgsRUFDSTFILElBQ3VCLE9BQW5CMk0sRUFBUTNNLEVBQUksS0FDWjJPLEtBQ0FDLEVBQU16TyxLQUFLd08sSUFFZm5DLEVBQVNyTSxLQUFLLFFBR2R1SCxFQUFJckssS0FBSzBRLE9BQ1RyRyxFQUFJckssS0FBSzBRLE1BRVRyRyxFQUFJckssS0FBS3dRLE9BQ1RuRyxFQUFJckssS0FBS3dRLE1BRVJjLEVBQUtsUixRQUVOa1IsRUFBS3hPLE1BQU0yTyxFQUFNeEIsRUFBWXhELElBRWpDbUQsR0FBVTZCLEVBQU14QixFQUFZeFksRUFBSzhXLE1BQU05QixFQUFnQkEsSUFBaUJwQyxFQUFJckssS0FBSzBRLE1BQVFPLEtBQ3pGSyxFQUFLeE8sS0FBSzhNLEdBQ1ZULEVBQVNyTSxLQUFLOE0sR0FPdEIsS0FIQWtDLEtBQ0FDLEtBQ0FDLEVBQU9ULEVBQU1uUixPQUNSdUMsRUFBSSxFQUFPcVAsRUFBSnJQLEVBQVVBLElBQ2xCMk8sRUFBT0MsRUFBTTVPLEdBQ1QyTyxFQUFLbFIsU0FDRGlCLEVBQVFVLElBQUksZUFDWnVQLEVBQUt4TyxNQUFNd08sRUFBS0EsRUFBS2xSLE9BQVMsR0FBRyxHQUFLNlAsRUFBWXhELElBQ2xEc0YsRUFBV2pQLEtBQUt3TyxFQUFLN1EsTUFBTSxJQUMzQjZRLEVBQUtjLE9BSUxkLEVBQUtsUixPQUFTLElBRWRrUixFQUFLLElBQU1BLEVBQUssR0FBRyxHQUFJQSxFQUFLLEdBQUcsS0FFbkNRLEVBQVdoUCxLQUFLd08sR0FNeEIsS0FEQVUsRUFBT0QsRUFBVzNSLE9BQ2J1QyxFQUFJLEVBQU9xUCxFQUFKclAsRUFBVUEsSUFDbEJ0RCxFQUFPZ1QsVUFBVU4sRUFBV3BQLEdBQ3hCdEIsRUFBUVUsSUFBSSxhQUFjVixFQUFRVSxJQUFJLGNBQWNtTixRQVE1RCxLQUxJN04sRUFBUVUsSUFBSSxvQkFBc0JySyxHQUFhMkosRUFBUVUsSUFBSSxvQkFDM0QvQixLQUFLK1EsZ0JBQWdCQyxFQUFZZixFQUFXeEQsRUFBY0YsRUFBYTBFLEdBRzNFZSxFQUFPRixFQUFXMVIsT0FDYnVDLEVBQUksRUFBT3FQLEVBQUpyUCxFQUFVQSxJQUNsQnRELEVBQU9nVCxVQUFVUCxFQUFXblAsR0FBSXRCLEVBQVFVLElBQUksYUFBY3JLLEVBQ3REMkosRUFBUVUsSUFBSSxjQUFjbU4sUUFHbEMsSUFBSXBULEdBQWN1RixFQUFRVSxJQUFJLGNBSzFCLElBSkFrUSxFQUFhNVEsRUFBUVUsSUFBSSxjQUNyQmtRLEVBQVdsUSxNQUFRckssSUFDbkJ1YSxFQUFhLEdBQUlqWixHQUFTaVosSUFFekJ0UCxFQUFJLEVBQU9rUCxFQUFKbFAsRUFBZUEsSUFDdkJzTCxFQUFRZ0UsRUFBV2xRLElBQUl1TixFQUFRM00sSUFDM0JzTCxHQUNBNU8sRUFBT3dRLFdBQVdtQixFQUFhdlosRUFBSzhXLE9BQU9jLEVBQVExTSxHQUFLM0MsS0FBSzZRLE9BQVN0RSxFQUFjNkUsSUFDaEZuQixFQUFZeFksRUFBSzhXLE1BQU05QixFQUFnQkEsSUFBaUI2QyxFQUFRM00sR0FBSzNDLEtBQUswUSxNQUFRTyxJQUNsRm5WLEVBQVlwRSxFQUNadVcsR0FBT2lCLFFBS25CcFQsSUFBY3VGLEVBQVFVLElBQUksY0FBc0MsT0FBdEJ1TixFQUFRK0IsSUFDbERoUyxFQUFPd1EsV0FBV21CLEVBQWF2WixFQUFLOFcsT0FBT2MsRUFBUUEsRUFBUWpQLE9BQVMsR0FBS0osS0FBSzZRLE9BQVN0RSxFQUFjNkUsSUFDakduQixFQUFZeFksRUFBSzhXLE1BQU05QixFQUFnQkEsSUFBaUI2QyxFQUFRK0IsR0FBWXJSLEtBQUswUSxNQUFRTyxJQUN6Rm5WLEVBQVlwRSxFQUNaMkosRUFBUVUsSUFBSSxjQUFjbU4sU0FFOUJsUCxLQUFLd1EsT0FBU3hRLEtBQUsyUSxVQUNmN1UsR0FBY3VGLEVBQVFVLElBQUksa0JBQzFCcUksRUFBSWlGLEVBQVFwWCxFQUFFdUwsUUFBUXhELEtBQUsyUSxRQUFTckIsSUFDcENqUSxFQUFPd1EsV0FBV21CLEVBQWF2WixFQUFLOFcsT0FBT25FLEVBQUlwSyxLQUFLNlEsT0FBU3RFLEVBQWM2RSxJQUN2RW5CLEVBQVl4WSxFQUFLOFcsTUFBTTlCLEVBQWdCQSxJQUFpQnpNLEtBQUsyUSxRQUFVM1EsS0FBSzBRLE1BQVFPLElBQ3BGblYsRUFBWXBFLEVBQ1oySixFQUFRVSxJQUFJLGlCQUFpQm1OLFVBRWpDcFQsR0FBY3VGLEVBQVFVLElBQUksa0JBQzFCcUksRUFBSWlGLEVBQVFwWCxFQUFFdUwsUUFBUXhELEtBQUt5USxRQUFTbkIsSUFDcENqUSxFQUFPd1EsV0FBV21CLEVBQWF2WixFQUFLOFcsT0FBT25FLEVBQUlwSyxLQUFLNlEsT0FBU3RFLEVBQWM2RSxJQUN2RW5CLEVBQVl4WSxFQUFLOFcsTUFBTTlCLEVBQWdCQSxJQUFpQnpNLEtBQUt5USxRQUFVelEsS0FBSzBRLE1BQVFPLElBQ3BGblYsRUFBWXBFLEVBQ1oySixFQUFRVSxJQUFJLGlCQUFpQm1OLFdBSXpDbFAsS0FBS3lQLFlBQWNwUSxFQUFPaVQsaUJBQzFCdFMsS0FBS2lRLFVBQVlBLEVBQ2pCNVEsRUFBTzZCLGFBT2ZqSixFQUFFRixHQUFHQyxVQUFVcUIsSUFBTUEsRUFBTWxCLEVBQVlGLEVBQUVGLEdBQUdDLFVBQVVrVSxNQUFPL1MsR0FDekRrQixLQUFNLE1BRU40RixLQUFNLFNBQVU4RSxFQUFJM0MsRUFBUWYsRUFBUzVHLEVBQU9DLEdBQ3hDLEdBT0k2WCxHQUFlQyxFQUFVQyxFQUFVQyxFQUNuQ0MsRUFBV2hRLEVBQUdpUSxFQUFNak4sRUFBTzNJLEVBQVU2VixFQUFhM1EsRUFBS0MsRUFBSzJRLEVBQVNDLEVBQ3JFQyxFQUFTQyxFQUFPdkYsRUFBR3dGLEVBQU1DLEVBQU9sUixFQUFLbVIsRUFBU0MsRUFUOUNwVyxFQUFXdVIsU0FBU25OLEVBQVFVLElBQUksWUFBYSxJQUM3QzdFLEVBQWFzUixTQUFTbk4sRUFBUVUsSUFBSSxjQUFlLElBQ2pEekYsRUFBZ0IrRSxFQUFRVSxJQUFJLGlCQUM1QnhGLEVBQWdCOEUsRUFBUVUsSUFBSSxpQkFDNUI1RSxFQUFpQmtFLEVBQVFVLElBQUksa0JBQzdCdVIsRUFBV3ZOLEVBQUFBLEVBQ1h3TixJQUFZeE4sRUFBQUEsRUFPaEIsS0FIQTFNLEVBQUlrSCxPQUFPTixLQUFLUyxLQUFLVixLQUFNK0UsRUFBSTNDLEVBQVFmLEVBQVM1RyxFQUFPQyxHQUdsRGlJLEVBQUksRUFBR2lRLEVBQU94USxFQUFPaEMsT0FBWXdTLEVBQUpqUSxFQUFVQSxJQUN4Q1YsRUFBTUcsRUFBT08sR0FDYjRQLEVBQWdDLGdCQUFoQixJQUE0QnRRLEVBQUk2RCxRQUFRLEtBQU8sSUFDM0R5TSxHQUFpQnRhLEVBQUU2TCxRQUFRN0IsTUFDM0IrUSxHQUFVLEVBQ05ULElBQ0F0USxFQUFNRyxFQUFPTyxHQUFLbkssRUFBZ0J5SixFQUFJc0IsTUFBTSxPQUVoRHRCLEVBQU14SixFQUFPd0osRUFBSyxNQUNsQnVRLEVBQVcvYSxFQUFLeUssSUFBSWhDLE1BQU16SSxFQUFNd0ssR0FDaEN3USxFQUFXaGIsRUFBSzBLLElBQUlqQyxNQUFNekksRUFBTXdLLEdBQ2pCcVIsRUFBWGQsSUFDQWMsRUFBV2QsR0FFWEMsRUFBV2MsSUFDWEEsRUFBV2QsR0FLdkJ6UyxNQUFLZ1QsUUFBVUEsRUFDZmhULEtBQUsyTyxnQkFDTDNPLEtBQUsvQyxTQUFXQSxFQUNoQitDLEtBQUs5QyxXQUFhQSxFQUNsQjhDLEtBQUt3VCxjQUFnQnZXLEVBQVdDLEVBQ2hDOEMsS0FBS3ZGLE1BQVFBLEVBQVMySCxFQUFPaEMsT0FBU25ELEdBQWNtRixFQUFPaEMsT0FBUyxHQUFLbEQsRUFFekU4QyxLQUFLcU0sYUFFRGxQLElBQ0EyVixFQUFVeFcsSUFBa0I1RSxJQUFhcU8sRUFBQUEsR0FBV3pKLEVBQ3BEeVcsRUFBVXhXLElBQWtCN0UsRUFBWXFPLEVBQUFBLEVBQVd4SixHQUd2RG9XLEtBQ0FELEVBQWNNLEtBQWVMLENBQzdCLElBQUljLE1BQ0FDLElBQ0osS0FBSy9RLEVBQUksRUFBR2lRLEVBQU94USxFQUFPaEMsT0FBWXdTLEVBQUpqUSxFQUFVQSxJQUN4QyxHQUFJcVEsRUFLQSxJQUpBQyxFQUFRN1EsRUFBT08sR0FDZlAsRUFBT08sR0FBS3dRLEtBQ1pNLEVBQVk5USxHQUFLLEVBQ2pCK1AsRUFBWS9QLEdBQUsrUSxFQUFlL1EsR0FBSyxFQUNoQytLLEVBQUksRUFBR3dGLEVBQU9ELEVBQU03UyxPQUFZOFMsRUFBSnhGLEVBQVVBLElBQ3ZDekwsRUFBTWtSLEVBQU16RixHQUFLdlEsRUFBaUI5RSxFQUFRNGEsRUFBTXZGLEdBQUlvRixFQUFTQyxHQUFXRSxFQUFNdkYsR0FDbEUsT0FBUnpMLElBQ0lBLEVBQU0sSUFDTndSLEVBQVk5USxJQUFNVixHQUVQLEVBQVhxUixHQUFnQkMsRUFBVyxFQUNqQixFQUFOdFIsRUFDQXlSLEVBQWUvUSxJQUFNbEwsRUFBS2tjLElBQUkxUixHQUU5QnlRLEVBQVkvUCxJQUFNVixFQUd0QnlRLEVBQVkvUCxJQUFNbEwsRUFBS2tjLElBQUkxUixHQUFhLEVBQU5BLEVBQVVzUixFQUFXRCxJQUUzRFgsRUFBVTdQLEtBQUtiLFFBSXZCQSxHQUFNOUUsRUFBaUI5RSxFQUFRK0osRUFBT08sR0FBSW1RLEVBQVNDLEdBQVczUSxFQUFPTyxHQUNyRVYsRUFBTUcsRUFBT08sR0FBS3BLLEVBQWUwSixHQUNyQixPQUFSQSxHQUNBMFEsRUFBVTdQLEtBQUtiLEVBSTNCakMsTUFBS21DLElBQU1BLEVBQU0xSyxFQUFLMEssSUFBSWpDLE1BQU16SSxFQUFNa2IsR0FDdEMzUyxLQUFLa0MsSUFBTUEsRUFBTXpLLEVBQUt5SyxJQUFJaEMsTUFBTXpJLEVBQU1rYixHQUN0QzNTLEtBQUt1VCxTQUFXQSxFQUFXUCxFQUFVdmIsRUFBSzBLLElBQUlqQyxNQUFNekksRUFBTWdjLEdBQWV0UixFQUN6RW5DLEtBQUtzVCxTQUFXQSxFQUFXTixFQUFVdmIsRUFBS3lLLElBQUloQyxNQUFNekksRUFBTWtiLEdBQWF6USxFQUVuRWIsRUFBUVUsSUFBSSxtQkFBcUJySyxJQUFjMkosRUFBUVUsSUFBSSxtQkFBcUJWLEVBQVFVLElBQUksaUJBQW1CRyxLQUMvR0EsRUFBTWIsRUFBUVUsSUFBSSxrQkFFbEJWLEVBQVFVLElBQUksbUJBQXFCckssSUFBYzJKLEVBQVFVLElBQUksbUJBQXFCVixFQUFRVSxJQUFJLGlCQUFtQkksS0FDL0dBLEVBQU1kLEVBQVFVLElBQUksa0JBR3RCL0IsS0FBS2hELFNBQVdBLEVBQVdxRSxFQUFRVSxJQUFJLFlBQVksR0FFL0M4USxFQURPLEdBQVAzUSxHQUFZQyxHQUFPLEdBQUtuRixFQUNWLEVBQ0ssR0FBWkEsRUFDT2tGLEVBQ1BBLEVBQU0sRUFDQ0EsRUFFQUMsRUFFbEJuQyxLQUFLNlMsWUFBY0EsRUFFbkJsTixFQUFRcU4sRUFBV3ZiLEVBQUswSyxJQUFJakMsTUFBTXpJLEVBQU1pYixHQUFlamIsRUFBSzBLLElBQUlqQyxNQUFNekksRUFBTWljLEdBQW1CdlIsRUFBTUQsRUFJckdsQyxLQUFLNFQsZUFBa0I1VyxHQUFrQixFQUFOa0YsRUFBV2xDLEtBQUt5TSxhQUFlLEVBQUl6TSxLQUFLeU0sYUFBZSxFQUVoRm9HLEVBQU4zUSxHQUNBbVIsRUFBWUwsR0FBVzdRLEdBQU8sRUFBS29SLEVBQVdwUixFQUM5Q2lSLEdBQVdDLEVBQVdSLEdBQWVsTixFQUFRM0YsS0FBS3lNLGFBQzlDMkcsSUFBWTNiLEVBQUswYSxLQUFLaUIsS0FDdEJwVCxLQUFLNFQsZ0JBQWtCLEVBQ3ZCUixFQUFVM2IsRUFBSzBhLEtBQUtpQixLQUd4QkEsRUFBVXBULEtBQUt5TSxhQUVuQnpNLEtBQUtvVCxRQUFVQSxFQUVYbmIsRUFBRTZMLFFBQVF6QyxFQUFRVSxJQUFJLGNBQ3RCL0IsS0FBSzZULGdCQUFrQnhTLEVBQVFVLElBQUksWUFDbkMvQixLQUFLOFQsZ0JBQWtCLE9BRXZCOVQsS0FBSzZULGdCQUFrQixLQUN2QjdULEtBQUs4VCxnQkFBa0J6UyxFQUFRVSxJQUFJLFlBQy9CL0IsS0FBSzhULGlCQUFtQjlULEtBQUs4VCxnQkFBZ0IvUixNQUFRckssSUFDckRzSSxLQUFLOFQsZ0JBQWtCLEdBQUk5YSxHQUFTZ0gsS0FBSzhULG1CQUlqRDlULEtBQUsyRixNQUFRQSxHQUdqQmdILFVBQVcsU0FBVTVILEVBQUlxRixFQUFHQyxHQUN4QixHQUFJekgsR0FBU25MLEVBQUs4SyxNQUFNNkgsRUFBSXBLLEtBQUt3VCxjQUNqQyxPQUFpQixHQUFUNVEsR0FBY0EsR0FBVTVDLEtBQUtvQyxPQUFPaEMsT0FBVTFJLEVBQVlrTCxHQUd0RWlMLHVCQUF3QixXQUNwQixHQUdJN0gsR0FBT3JELEVBSFB5SixFQUFnQnBNLEtBQUtvTSxjQUNyQmhLLEVBQVN0SixFQUFZa0gsS0FBS29DLE9BQU9nSyxJQUNqQ3hKLElBRUosS0FBS0QsRUFBSVAsRUFBT2hDLE9BQVF1QyxLQUNwQnFELEVBQVE1RCxFQUFPTyxHQUNmQyxFQUFPRSxNQUNIZ0wsT0FBa0IsT0FBVjlILEVBQ1JBLE1BQU9BLEVBQ1BpSSxNQUFPak8sS0FBSytULFVBQVVwUixFQUFHcUQsRUFBT29HLEdBQ2hDNU4sT0FBUTROLEdBR2hCLE9BQU94SixJQUdYbVIsVUFBVyxTQUFVQyxFQUFVaE8sRUFBT2lPLEdBQ2xDLEdBR0loRyxHQUFPaUcsRUFIUEwsRUFBa0I3VCxLQUFLNlQsZ0JBQ3ZCQyxFQUFrQjlULEtBQUs4VCxnQkFDdkJ6UyxFQUFVckIsS0FBS3FCLE9BZW5CLE9BWkk0TSxHQURBak8sS0FBS2dULFFBQ0czUixFQUFRVSxJQUFJLG1CQUVILEVBQVJpRSxFQUFhM0UsRUFBUVUsSUFBSSxlQUFpQlYsRUFBUVUsSUFBSSxZQUVyRCxJQUFWaUUsR0FBZTNFLEVBQVFVLElBQUksZUFBaUJySyxJQUM1Q3VXLEVBQVE1TSxFQUFRVSxJQUFJLGNBRXBCK1IsSUFBb0JJLEVBQVdKLEVBQWdCL1IsSUFBSWlFLElBQ25EaUksRUFBUWlHLEVBQ0RMLEdBQW1CQSxFQUFnQnpULE9BQVM2VCxJQUNuRGhHLEVBQVE0RixFQUFnQkksSUFFckJoYyxFQUFFNkwsUUFBUW1LLEdBQVNBLEVBQU0rRixFQUFXL0YsRUFBTTdOLFFBQVU2TixHQU0vRFcsYUFBYyxTQUFVcUYsRUFBVWpILEdBQzlCLEdBVUkzQyxHQUFHM1AsRUFBUXVULEVBQU9ILEVBQVFxRyxFQUFZeFIsRUFBRzJOLEVBQVVyTyxFQUFLbVMsRUFBWUMsRUFWcEUzUixFQUFPMUMsS0FBS29DLE9BQU82UixHQUNuQjVTLEVBQVVyQixLQUFLcUIsUUFDZndSLEVBQWM3UyxLQUFLNlMsWUFDbkJqUSxLQUNBK0MsRUFBUTNGLEtBQUsyRixNQUNicU4sRUFBVWhULEtBQUtnVCxRQUNmM1QsRUFBU1csS0FBS1gsT0FDZCtLLEVBQUk2SixFQUFXalUsS0FBS3dULGNBQ3BCSSxFQUFpQjVULEtBQUs0VCxlQUN0QlIsRUFBVXBULEtBQUtvVCxPQVNuQixJQU5BMVEsRUFBT3pLLEVBQUU2TCxRQUFRcEIsR0FBUUEsR0FBUUEsR0FDakM0TixFQUFXNU4sRUFBS3RDLE9BQ2hCNkIsRUFBTVMsRUFBSyxHQUNYb0wsRUFBU25WLEVBQUksS0FBTStKLEdBQ25CMlIsRUFBUzFiLEVBQUlrYSxFQUFhblEsR0FBTSxHQUU1Qm9MLEVBQ0EsTUFBSXpNLEdBQVFVLElBQUksY0FDWmtNLEVBQVFqQixFQUFZM0wsRUFBUVUsSUFBSSxhQUFlL0IsS0FBS2dPLG1CQUFtQjNNLEVBQVFVLElBQUksYUFBY1YsR0FDakdnSixFQUFLK0ksRUFBVSxFQUFLQSxFQUFVLEVBQUlBLEVBQzNCL1QsRUFBTzhSLFNBQVMvRyxFQUFHQyxFQUFHckssS0FBSy9DLFNBQVcsRUFBRyxFQUFHZ1IsRUFBT0EsSUFFbkR2VyxDQUlmLEtBREF5YyxFQUFhZixFQUNSelEsRUFBSSxFQUFPMk4sRUFBSjNOLEVBQWNBLElBQUssQ0FHM0IsR0FGQVYsRUFBTVMsRUFBS0MsR0FFUHFRLEdBQVcvUSxJQUFRNFEsRUFBYSxDQUNoQyxJQUFLd0IsR0FBVUQsRUFDWCxRQUVKQSxJQUFhLEVBSWIxWixFQURBaUwsRUFBUSxFQUNDbE8sRUFBSzhLLE1BQU1xUixHQUFtQm5jLEVBQUtrYyxJQUFJMVIsRUFBTTRRLEdBQWVsTixJQUFXLEVBRXZFLEVBRUhrTixFQUFONVEsR0FBc0JBLElBQVE0USxHQUEyQixJQUFaTyxHQUM3Qy9JLEVBQUk4SixFQUNKQSxHQUFjelosSUFFZDJQLEVBQUkrSSxFQUFVMVksRUFDZDBZLEdBQVcxWSxHQUVmdVQsRUFBUWpPLEtBQUsrVCxVQUFVcFIsRUFBR1YsRUFBS2dTLEdBQzNCakgsSUFDQWlCLEVBQVFqTyxLQUFLZ08sbUJBQW1CQyxFQUFPNU0sSUFFM0N1QixFQUFPRSxLQUFLekQsRUFBTzhSLFNBQVMvRyxFQUFHQyxFQUFHckssS0FBSy9DLFNBQVcsRUFBR3ZDLEVBQVMsRUFBR3VULEVBQU9BLElBRTVFLE1BQXNCLEtBQWxCckwsRUFBT3hDLE9BQ0F3QyxFQUFPLEdBRVhBLEtBT2YzSyxFQUFFRixHQUFHQyxVQUFVc0IsU0FBV0EsRUFBV25CLEVBQVlGLEVBQUVGLEdBQUdDLFVBQVVrVSxNQUFPL1MsR0FDbkVrQixLQUFNLFdBRU40RixLQUFNLFNBQVU4RSxFQUFJM0MsRUFBUWYsRUFBUzVHLEVBQU9DLEdBQ3hDLEdBQUl1QyxHQUFXdVIsU0FBU25OLEVBQVFVLElBQUksWUFBYSxJQUM3QzdFLEVBQWFzUixTQUFTbk4sRUFBUVUsSUFBSSxjQUFlLEdBQ3JEekksR0FBU2lILE9BQU9OLEtBQUtTLEtBQUtWLEtBQU0rRSxFQUFJM0MsRUFBUWYsRUFBUzVHLEVBQU9DLEdBRTVEc0YsS0FBSzJPLGdCQUNMM08sS0FBSy9DLFNBQVdBLEVBQ2hCK0MsS0FBSzlDLFdBQWFBLEVBQ2xCOEMsS0FBS3dULGNBQWdCdlcsRUFBV0MsRUFDaEM4QyxLQUFLb0MsT0FBU25LLEVBQUV1RixJQUFJNEUsRUFBUW1PLFFBQzVCdlEsS0FBS3ZGLE1BQVFBLEVBQVMySCxFQUFPaEMsT0FBU25ELEdBQWNtRixFQUFPaEMsT0FBUyxHQUFLbEQsRUFFckVqRixFQUFFNkwsUUFBUXpDLEVBQVFVLElBQUksY0FDdEIvQixLQUFLNlQsZ0JBQWtCeFMsRUFBUVUsSUFBSSxZQUNuQy9CLEtBQUs4VCxnQkFBa0IsT0FFdkI5VCxLQUFLNlQsZ0JBQWtCLEtBQ3ZCN1QsS0FBSzhULGdCQUFrQnpTLEVBQVFVLElBQUksWUFDL0IvQixLQUFLOFQsaUJBQW1COVQsS0FBSzhULGdCQUFnQi9SLE1BQVFySyxJQUNyRHNJLEtBQUs4VCxnQkFBa0IsR0FBSTlhLEdBQVNnSCxLQUFLOFQsbUJBR2pEOVQsS0FBS3FNLGNBR1RNLFVBQVcsU0FBVTVILEVBQUlxRixFQUFHQyxHQUN4QixNQUFPNVMsR0FBSzhLLE1BQU02SCxFQUFJcEssS0FBS3dULGdCQUcvQjNGLHVCQUF3QixXQUNwQixHQUFJekIsR0FBZ0JwTSxLQUFLb00sYUFDekIsUUFDSTBCLE9BQVE5TixLQUFLb0MsT0FBT2dLLEtBQW1CMVUsRUFDdkNzTyxNQUFPaEcsS0FBS29DLE9BQU9nSyxHQUNuQjZCLE1BQU9qTyxLQUFLK1QsVUFBVS9ULEtBQUtvQyxPQUFPZ0ssR0FBZ0JBLEdBQ2xENU4sT0FBUTROLElBSWhCMkgsVUFBVyxTQUFVL04sRUFBT2lPLEdBQ3hCLEdBSUloRyxHQUFPaUcsRUFKUDlSLEVBQVNwQyxLQUFLb0MsT0FDZGYsRUFBVXJCLEtBQUtxQixRQUNmd1MsRUFBa0I3VCxLQUFLNlQsZ0JBQ3ZCQyxFQUFrQjlULEtBQUs4VCxlQWMzQixPQVZJN0YsR0FEQTZGLElBQW9CSSxFQUFXSixFQUFnQi9SLElBQUlpRSxJQUMzQ2tPLEVBQ0RMLEdBQW1CQSxFQUFnQnpULE9BQVM2VCxFQUMzQ0osRUFBZ0JJLEdBQ2pCN1IsRUFBTzZSLEdBQVksRUFDbEI1UyxFQUFRVSxJQUFJLGVBQ2JLLEVBQU82UixHQUFZLEVBQ2xCNVMsRUFBUVUsSUFBSSxlQUVaVixFQUFRVSxJQUFJLGlCQUs1QjZNLGFBQWMsU0FBVXFGLEVBQVVqSCxHQUM5QixHQUdJUCxHQUFjL1IsRUFBUTRaLEVBQ3RCbEssRUFBR0MsRUFBRzRELEVBSk43TCxFQUFTcEMsS0FBS29DLE9BQ2RmLEVBQVVyQixLQUFLcUIsUUFDZmhDLEVBQVNXLEtBQUtYLE1BbUJsQixPQWZBb04sR0FBZXBOLEVBQU9xTixZQUN0QjRILEVBQWE3YyxFQUFLOFcsTUFBTTlCLEVBQWUsR0FFdkNyQyxFQUFJNkosRUFBV2pVLEtBQUt3VCxjQUNoQnBSLEVBQU82UixHQUFZLEdBQ25CNUosRUFBSWlLLEVBQ0o1WixFQUFTNFosRUFBYSxHQUNmbFMsRUFBTzZSLEdBQVksR0FDMUI1SixFQUFJLEVBQ0ozUCxFQUFTNFosRUFBYSxJQUV0QmpLLEVBQUlpSyxFQUFhLEVBQ2pCNVosRUFBUyxHQUVidVQsRUFBUWpPLEtBQUsrVCxVQUFVM1IsRUFBTzZSLEdBQVdBLEdBQzNCLE9BQVZoRyxHQUdBakIsSUFDQWlCLEVBQVFqTyxLQUFLZ08sbUJBQW1CQyxFQUFPNU0sSUFFcENoQyxFQUFPOFIsU0FBUy9HLEVBQUdDLEVBQUdySyxLQUFLL0MsU0FBVyxFQUFHdkMsRUFBUyxFQUFHdVQsRUFBT0EsSUFObkUsVUFhUmhXLEVBQUVGLEdBQUdDLFVBQVV1QixTQUFXQSxFQUFXcEIsRUFBWUYsRUFBRUYsR0FBR0MsVUFBVWtVLE1BQU8vUyxHQUNuRWtCLEtBQU0sV0FFTjRGLEtBQU0sU0FBVThFLEVBQUkzQyxFQUFRZixFQUFTNUcsRUFBT0MsR0FDeENuQixFQUFTZ0gsT0FBT04sS0FBS1MsS0FBS1YsS0FBTStFLEVBQUkzQyxFQUFRZixFQUFTNUcsRUFBT0MsR0FFNURzRixLQUFLMk8sZ0JBQ0wzTyxLQUFLb0MsT0FBU0EsRUFBU25LLEVBQUV1RixJQUFJNEUsRUFBUW1PLFFBQ3JDdlEsS0FBS2tDLElBQU16SyxFQUFLeUssSUFBSWhDLE1BQU16SSxFQUFNMkssR0FDaENwQyxLQUFLbUMsSUFBTTFLLEVBQUswSyxJQUFJakMsTUFBTXpJLEVBQU0ySyxHQUNoQ3BDLEtBQUsyRixNQUFRM0YsS0FBS21DLElBQU1uQyxLQUFLa0MsSUFDN0JsQyxLQUFLdkYsTUFBUUEsRUFBaUMsU0FBekI0RyxFQUFRVSxJQUFJLFNBQXNDLEVBQWhCSyxFQUFPaEMsT0FBYUosS0FBS3ZGLE1BQ2hGdUYsS0FBS3VVLFNBQVc5YyxFQUFLOEssTUFBTTlILEVBQVEySCxFQUFPaEMsUUFDMUNKLEtBQUt3VSxVQUFZL1osRUFBUTJILEVBQU9oQyxPQUM1QmlCLEVBQVFVLElBQUksbUJBQXFCckssSUFBYzJKLEVBQVFVLElBQUksbUJBQXFCVixFQUFRVSxJQUFJLGlCQUFtQi9CLEtBQUtrQyxPQUNwSGxDLEtBQUtrQyxJQUFNYixFQUFRVSxJQUFJLGtCQUV2QlYsRUFBUVUsSUFBSSxtQkFBcUJySyxJQUFjMkosRUFBUVUsSUFBSSxtQkFBcUJWLEVBQVFVLElBQUksaUJBQW1CL0IsS0FBS21DLE9BQ3BIbkMsS0FBS21DLElBQU1kLEVBQVFVLElBQUksa0JBRTNCL0IsS0FBS3FNLGFBQ0RyTSxLQUFLWCxTQUNMVyxLQUFLcEMsV0FBMkMsU0FBOUJ5RCxFQUFRVSxJQUFJLGNBQTJCdEssRUFBSzhXLE1BQTBCLEdBQXBCdk8sS0FBS3lNLGNBQXNCcEwsRUFBUVUsSUFBSSxnQkFJbkg0SyxVQUFXLFNBQVU1SCxFQUFJcUYsRUFBR0MsR0FDeEIsTUFBTzVTLEdBQUs4SyxNQUFNNkgsRUFBSXBLLEtBQUt3VSxZQUcvQjNHLHVCQUF3QixXQUNwQixHQUFJekIsR0FBZ0JwTSxLQUFLb00sYUFDekIsUUFDSTBCLE9BQVE5TixLQUFLb0MsT0FBT2dLLEtBQW1CMVUsRUFDdkNzTyxNQUFPaEcsS0FBS29DLE9BQU9nSyxHQUNuQjVOLE9BQVE0TixJQUloQndDLGFBQWMsU0FBVXFGLEVBQVVqSCxHQUM5QixHQVVJa0UsR0FBTWpQLEVBQUtnTSxFQUFPN0QsRUFWbEJoSSxFQUFTcEMsS0FBS29DLE9BQ2RmLEVBQVVyQixLQUFLcUIsUUFDZmEsRUFBTWxDLEtBQUtrQyxJQUNYQyxFQUFNbkMsS0FBS21DLElBQ1h3RCxFQUFRM0YsS0FBSzJGLE1BQ2I0TyxFQUFXdlUsS0FBS3VVLFNBQ2hCbFYsRUFBU1csS0FBS1gsT0FDZG9OLEVBQWV6TSxLQUFLeU0sYUFDcEI3TyxFQUFhb0MsS0FBS3BDLFdBQ2xCNlcsRUFBVWhJLEVBQWU3TyxDQVU3QixPQVBBcUUsR0FBTTVKLEVBQVErSixFQUFPNlIsR0FBVy9SLEVBQUtDLEdBQ3JDaUksRUFBSTZKLEVBQVdNLEVBQ2ZyRCxFQUFPelosRUFBSzhXLE1BQU1rRyxFQUFVQSxJQUFZeFMsRUFBTUMsR0FBT3lELElBQ3JEc0ksRUFBUzVNLEVBQVFVLElBQUksbUJBQXFCRSxFQUFNWixFQUFRVSxJQUFJLGtCQUFxQlYsRUFBUVUsSUFBSSxrQkFBb0JWLEVBQVFVLElBQUksYUFDekhpTCxJQUNBaUIsRUFBUWpPLEtBQUtnTyxtQkFBbUJDLEVBQU81TSxJQUVwQ2hDLEVBQU8yUSxTQUFTNUYsRUFBRzhHLEVBQU05RyxFQUFHOEcsRUFBT3RULEVBQVlxUSxNQU85RGhXLEVBQUVGLEdBQUdDLFVBQVV3QixPQUFTQSxFQUFTckIsRUFBWUYsRUFBRUYsR0FBR0MsVUFBVWtVLE9BQ3hEN1IsS0FBTSxTQUVONEYsS0FBTSxTQUFVOEUsRUFBSTNDLEVBQVFmLEVBQVM1RyxFQUFPQyxHQUN4QyxHQUFJd0gsR0FBS0MsRUFBS08sQ0FDZGxKLEdBQU8rRyxPQUFPTixLQUFLUyxLQUFLVixLQUFNK0UsRUFBSTNDLEVBQVFmLEVBQVM1RyxFQUFPQyxHQUcxRHNGLEtBQUtvQyxPQUFTQSxFQUFTNUosRUFBZ0I0SixHQUV2Q00sRUFBT04sRUFBTzNCLFFBQ2RpQyxFQUFLLEdBQWlCLE9BQVpBLEVBQUssR0FBY0EsRUFBSyxHQUFLQSxFQUFLLEdBQzVDQSxFQUFLLEdBQW1CLE9BQWROLEVBQU8sR0FBY00sRUFBSyxHQUFLQSxFQUFLLEdBQzlDUixFQUFNekssRUFBS3lLLElBQUloQyxNQUFNekksRUFBTTJLLEdBQzNCRCxFQUFNMUssRUFBSzBLLElBQUlqQyxNQUFNekksRUFBTTJLLEdBRXZCRixFQURBYixFQUFRVSxJQUFJLFVBQVlySyxFQUNaLEVBQU53SyxFQUFVQSxFQUFNLEVBRWhCYixFQUFRVSxJQUFJLFFBRXRCL0IsS0FBS2tDLElBQU1BLEVBQ1hsQyxLQUFLbUMsSUFBTUEsRUFDWG5DLEtBQUsyRixNQUFReEQsRUFBTUQsRUFDbkJsQyxLQUFLZ1AsVUFDTGhQLEtBQUswVSxlQUNMMVUsS0FBSzJVLGNBQ0wzVSxLQUFLdkYsTUFBUUEsRUFBaUMsU0FBekI0RyxFQUFRVSxJQUFJLFNBQXNCLFFBQVV0SCxFQUNqRXVGLEtBQUtYLE9BQVNXLEtBQUtrRyxJQUFJekIsV0FBV2hLLEVBQU9DLEVBQVEyRyxFQUFRVSxJQUFJLGNBQ3hESyxFQUFPaEMsU0FDUkosS0FBS21NLFVBQVcsR0FFcEJuTSxLQUFLcU0sY0FHVE0sVUFBVyxTQUFVNUgsRUFBSXFGLEVBQUdDLEdBQ3hCLEdBQUl1SyxHQUFVNVUsS0FBS1gsT0FBT3dWLFdBQVc5UCxFQUFJcUYsRUFBR0MsRUFDNUMsT0FBUXVLLEtBQVlsZCxHQUFhc0ksS0FBS2dQLE9BQU80RixLQUFhbGQsRUFBYXNJLEtBQUtnUCxPQUFPNEYsR0FBV2xkLEdBR2xHbVcsdUJBQXdCLFdBQ3BCLEdBQUl6QixHQUFnQnBNLEtBQUtvTSxhQUN6QixRQUNJMEksU0FBVTFJLEVBQWNMLE9BQU8sRUFBRyxHQUNsQy9GLE1BQU9oRyxLQUFLb0MsT0FBT2dLLEVBQWNMLE9BQU8sSUFDeENnSixPQUFRM0ksSUFJaEJXLGdCQUFpQixTQUFVQyxHQUN2QixHQUVJZ0ksR0FGQTVJLEVBQWdCcE0sS0FBS29NLGNBQ3JCd0ksRUFBVTVVLEtBQUswVSxZQUFZdEksRUFHL0IsY0FET3BNLE1BQUtnUCxPQUFPNEYsR0FDWHhJLEVBQWNMLE9BQU8sRUFBRyxJQUM1QixJQUFLLElBQ0RpSixFQUFRaFYsS0FBS2lWLFlBQVk3SSxFQUFjTCxPQUFPLEdBQUlpQixFQUNsRCxNQUNKLEtBQUssSUFDRGdJLEVBQVFoVixLQUFLa1Ysa0JBQWtCbEksRUFDL0IsTUFDSixLQUFLLElBQ0RnSSxFQUFRaFYsS0FBS21WLGFBQWFuSSxHQUdsQ2hOLEtBQUswVSxZQUFZdEksR0FBaUI0SSxFQUFNM0wsR0FDeENySixLQUFLZ1AsT0FBT2dHLEVBQU0zTCxJQUFNK0MsRUFDeEJwTSxLQUFLWCxPQUFPMFAsaUJBQWlCNkYsRUFBU0ksSUFHMUNDLFlBQWEsU0FBVUcsRUFBSXBJLEdBQ3ZCLEdBQUlxSSxHQUFXclYsS0FBS29DLE9BQU9nVCxHQUN2QkUsRUFBYTdkLEVBQUs4VyxNQUFNdk8sS0FBS3VNLGNBQWdCOEksRUFBV3JWLEtBQUtrQyxLQUFPbEMsS0FBSzJGLFFBQ3pFc0ksRUFBUWpPLEtBQUtxQixRQUFRVSxJQUFJLGVBQWVxVCxFQUFLLEVBSWpELE9BSElwSSxLQUNBaUIsRUFBUWpPLEtBQUtnTyxtQkFBbUJDLEVBQU9qTyxLQUFLcUIsVUFFekNyQixLQUFLWCxPQUFPOFIsU0FBUyxFQUFHLEVBQUdtRSxFQUFhLEVBQUd0VixLQUFLeU0sYUFBZSxFQUFHd0IsRUFBT0EsSUFHcEZpSCxrQkFBbUIsU0FBVWxJLEdBQ3pCLEdBQUl1SSxHQUFVdlYsS0FBS29DLE9BQU8sR0FDdEJvVCxFQUFZL2QsRUFBSzhXLE1BQU12TyxLQUFLdU0sY0FBZ0JnSixFQUFVdlYsS0FBS2tDLEtBQU9sQyxLQUFLMkYsUUFDdkVzSSxFQUFRak8sS0FBS3FCLFFBQVFVLElBQUksbUJBSTdCLE9BSElpTCxLQUNBaUIsRUFBUWpPLEtBQUtnTyxtQkFBbUJDLEVBQU9qTyxLQUFLcUIsVUFFekNyQixLQUFLWCxPQUFPOFIsU0FBUyxFQUFHMVosRUFBSzhXLE1BQTBCLEdBQXBCdk8sS0FBS3lNLGNBQXFCK0ksRUFBWSxFQUM1RS9kLEVBQUs4VyxNQUEwQixHQUFwQnZPLEtBQUt5TSxjQUFzQixFQUFHd0IsRUFBT0EsSUFHeERrSCxhQUFjLFNBQVVuSSxHQUNwQixHQUFJeUksR0FBWXpWLEtBQUtvQyxPQUFPLEdBQ3hCZ0ksRUFBSTNTLEVBQUs4VyxNQUFNdk8sS0FBS3VNLGNBQWdCa0osRUFBWXpWLEtBQUtrQyxLQUFPbEMsS0FBSzJGLE9BQVUzRixLQUFLcUIsUUFBUVUsSUFBSSxlQUFpQixHQUM3RzJULEVBQVlqZSxFQUFLOFcsTUFBMEIsR0FBcEJ2TyxLQUFLeU0sY0FDNUJrSixFQUFlM1YsS0FBS3lNLGFBQTRCLEVBQVppSixFQUNwQ3pILEVBQVFqTyxLQUFLcUIsUUFBUVUsSUFBSSxjQUk3QixPQUhJaUwsS0FDQWlCLEVBQVFqTyxLQUFLZ08sbUJBQW1CQyxFQUFPak8sS0FBS3FCLFVBRXpDckIsS0FBS1gsT0FBTzhSLFNBQVMvRyxFQUFHc0wsRUFBVzFWLEtBQUtxQixRQUFRVSxJQUFJLGVBQWlCLEVBQUc0VCxFQUFlLEVBQUcxSCxFQUFPQSxJQUc1Ry9NLE9BQVEsV0FDSixHQUVJeUIsR0FBR3FTLEVBRkhwQyxFQUFPNVMsS0FBS29DLE9BQU9oQyxPQUNuQmYsRUFBU1csS0FBS1gsTUFFbEIsSUFBSzdGLEVBQU8rRyxPQUFPVyxPQUFPUixLQUFLVixNQUEvQixDQUdBLElBQUsyQyxFQUFJLEVBQU9pUSxFQUFKalEsRUFBVUEsSUFDbEJxUyxFQUFRaFYsS0FBS2lWLFlBQVl0UyxHQUFHdU0sU0FDNUJsUCxLQUFLZ1AsT0FBT2dHLEVBQU0zTCxJQUFNLElBQU0xRyxFQUM5QjNDLEtBQUswVSxZQUFZLElBQU0vUixHQUFLcVMsRUFBTTNMLEVBRWYsUUFBbkJySixLQUFLb0MsT0FBTyxLQUNaNFMsRUFBUWhWLEtBQUtrVixvQkFBb0JoRyxTQUNqQ2xQLEtBQUtnUCxPQUFPZ0csRUFBTTNMLElBQU0sS0FDeEJySixLQUFLMFUsWUFBWWtCLEdBQUtaLEVBQU0zTCxJQUVULE9BQW5CckosS0FBS29DLE9BQU8sS0FDWjRTLEVBQVFoVixLQUFLbVYsZUFBZWpHLFNBQzVCbFAsS0FBS2dQLE9BQU9nRyxFQUFNM0wsSUFBTSxLQUN4QnJKLEtBQUswVSxZQUFZbUIsR0FBS2IsRUFBTTNMLElBRWhDaEssRUFBTzZCLGFBT2ZqSixFQUFFRixHQUFHQyxVQUFVeUIsSUFBTUEsRUFBTXRCLEVBQVlGLEVBQUVGLEdBQUdDLFVBQVVrVSxPQUNsRDdSLEtBQU0sTUFFTjRGLEtBQU0sU0FBVThFLEVBQUkzQyxFQUFRZixFQUFTNUcsRUFBT0MsR0FDeEMsR0FBZWlJLEdBQVhrQixFQUFRLENBWVosSUFWQXBLLEVBQUk4RyxPQUFPTixLQUFLUyxLQUFLVixLQUFNK0UsRUFBSTNDLEVBQVFmLEVBQVM1RyxFQUFPQyxHQUV2RHNGLEtBQUtnUCxVQUNMaFAsS0FBSzBVLGVBQ0wxVSxLQUFLb0MsT0FBU0EsRUFBU25LLEVBQUV1RixJQUFJNEUsRUFBUW1PLFFBRVIsU0FBekJsUCxFQUFRVSxJQUFJLFdBQ1ovQixLQUFLdkYsTUFBUXVGLEtBQUt0RixRQUdsQjBILEVBQU9oQyxPQUFTLEVBQ2hCLElBQUt1QyxFQUFJUCxFQUFPaEMsT0FBUXVDLEtBQ3BCa0IsR0FBU3pCLEVBQU9PLEVBR3hCM0MsTUFBSzZELE1BQVFBLEVBQ2I3RCxLQUFLcU0sYUFDTHJNLEtBQUs4VixPQUFTcmUsRUFBSzhLLE1BQU05SyxFQUFLeUssSUFBSWxDLEtBQUt1TSxZQUFhdk0sS0FBS3lNLGNBQWdCLElBRzdFRSxVQUFXLFNBQVU1SCxFQUFJcUYsRUFBR0MsR0FDeEIsR0FBSXVLLEdBQVU1VSxLQUFLWCxPQUFPd1YsV0FBVzlQLEVBQUlxRixFQUFHQyxFQUM1QyxPQUFRdUssS0FBWWxkLEdBQWFzSSxLQUFLZ1AsT0FBTzRGLEtBQWFsZCxFQUFhc0ksS0FBS2dQLE9BQU80RixHQUFXbGQsR0FHbEdtVyx1QkFBd0IsV0FDcEIsR0FBSXpCLEdBQWdCcE0sS0FBS29NLGFBQ3pCLFFBQ0kwQixPQUFROU4sS0FBS29DLE9BQU9nSyxLQUFtQjFVLEVBQ3ZDc08sTUFBT2hHLEtBQUtvQyxPQUFPZ0ssR0FDbkIySixRQUFTL1YsS0FBS29DLE9BQU9nSyxHQUFpQnBNLEtBQUs2RCxNQUFRLElBQ25Eb0ssTUFBT2pPLEtBQUtxQixRQUFRVSxJQUFJLGVBQWVxSyxFQUFnQnBNLEtBQUtxQixRQUFRVSxJQUFJLGVBQWUzQixRQUN2RjVCLE9BQVE0TixJQUloQlcsZ0JBQWlCLFNBQVVDLEdBQ3ZCLEdBQUlaLEdBQWdCcE0sS0FBS29NLGNBQ3BCNEosRUFBV2hXLEtBQUtpVyxZQUFZN0osRUFBZVksR0FDM0M0SCxFQUFVNVUsS0FBSzBVLFlBQVl0SSxTQUN6QnBNLE1BQUtnUCxPQUFPNEYsR0FDbkI1VSxLQUFLWCxPQUFPMFAsaUJBQWlCNkYsRUFBU29CLEdBQ3RDaFcsS0FBSzBVLFlBQVl0SSxHQUFpQjRKLEVBQVMzTSxHQUMzQ3JKLEtBQUtnUCxPQUFPZ0gsRUFBUzNNLElBQU0rQyxHQUcvQjZKLFlBQWEsU0FBVWhDLEVBQVVqSCxHQUM3QixHQVNJa0osR0FBT0MsRUFBS3hULEVBQUdpUSxFQUFNM0UsRUFUckI1TyxFQUFTVyxLQUFLWCxPQUNkZ0MsRUFBVXJCLEtBQUtxQixRQUNmeVUsRUFBUzlWLEtBQUs4VixPQUNkcFgsRUFBYzJDLEVBQVFVLElBQUksZUFDMUJ2RCxFQUFTNkMsRUFBUVUsSUFBSSxVQUNyQnFVLEVBQVMsRUFBSTNlLEVBQUs0ZSxHQUNsQmpVLEVBQVNwQyxLQUFLb0MsT0FDZHlCLEVBQVE3RCxLQUFLNkQsTUFDYitOLEVBQU9wVCxFQUFVLEVBQUUvRyxFQUFLNGUsSUFBSzdYLEVBQU8sS0FBTyxDQUkvQyxLQURBb1UsRUFBT3hRLEVBQU9oQyxPQUNUdUMsRUFBSSxFQUFPaVEsRUFBSmpRLEVBQVVBLElBQUssQ0FNdkIsR0FMQXVULEVBQVF0RSxFQUNSdUUsRUFBTXZFLEVBQ0YvTixFQUFRLElBQ1JzUyxFQUFNdkUsRUFBUXdFLEdBQVVoVSxFQUFPTyxHQUFLa0IsSUFFcENvUSxJQUFhdFIsRUFNYixNQUxBc0wsR0FBUTVNLEVBQVFVLElBQUksZUFBZVksRUFBSXRCLEVBQVFVLElBQUksZUFBZTNCLFFBQzlENE0sSUFDQWlCLEVBQVFqTyxLQUFLZ08sbUJBQW1CQyxFQUFPNU0sSUFHcENoQyxFQUFPaVgsYUFBYVIsRUFBUUEsRUFBUUEsRUFBU3BYLEVBQWF3WCxFQUFPQyxFQUFLemUsRUFBV3VXLEVBRTVGMkQsR0FBT3VFLElBSWZqVixPQUFRLFdBQ0osR0FLSThULEdBQU9yUyxFQUxQdEQsRUFBU1csS0FBS1gsT0FDZCtDLEVBQVNwQyxLQUFLb0MsT0FDZGYsRUFBVXJCLEtBQUtxQixRQUNmeVUsRUFBUzlWLEtBQUs4VixPQUNkcFgsRUFBYzJDLEVBQVFVLElBQUk7QUFHOUIsR0FBS3RJLEVBQUk4RyxPQUFPVyxPQUFPUixLQUFLVixNQUE1QixDQU9BLElBSkl0QixHQUNBVyxFQUFPd1EsV0FBV2lHLEVBQVFBLEVBQVFyZSxFQUFLOEssTUFBTXVULEVBQVVwWCxFQUFjLEdBQ2pFMkMsRUFBUVUsSUFBSSxlQUFnQnJLLEVBQVdnSCxHQUFhd1EsU0FFdkR2TSxFQUFJUCxFQUFPaEMsT0FBUXVDLEtBQ2hCUCxFQUFPTyxLQUNQcVMsRUFBUWhWLEtBQUtpVyxZQUFZdFQsR0FBR3VNLFNBQzVCbFAsS0FBSzBVLFlBQVkvUixHQUFLcVMsRUFBTTNMLEdBQzVCckosS0FBS2dQLE9BQU9nRyxFQUFNM0wsSUFBTTFHLEVBR2hDdEQsR0FBTzZCLGFBT2ZqSixFQUFFRixHQUFHQyxVQUFVMEIsSUFBTUEsRUFBTXZCLEVBQVlGLEVBQUVGLEdBQUdDLFVBQVVrVSxPQUNsRDdSLEtBQU0sTUFFTjRGLEtBQU0sU0FBVThFLEVBQUkzQyxFQUFRZixFQUFTNUcsRUFBT0MsR0FDeENoQixFQUFJNkcsT0FBT04sS0FBS1MsS0FBS1YsS0FBTStFLEVBQUkzQyxFQUFRZixFQUFTNUcsRUFBT0MsR0FDdkRzRixLQUFLb0MsT0FBU25LLEVBQUV1RixJQUFJNEUsRUFBUW1PLFFBQzVCdlEsS0FBS3ZGLE1BQWlDLFNBQXpCNEcsRUFBUVUsSUFBSSxTQUFzQixRQUFVdEgsRUFDekR1RixLQUFLcU0sYUFDQXJNLEtBQUtvQyxPQUFPaEMsU0FDYkosS0FBS21NLFNBQVcsSUFPeEJRLFVBQVcsV0FDUCxNQUFPLElBR1hrQix1QkFBd0IsV0FDcEIsR0FBSWpMLEtBQ0UyVCxNQUFPLEtBQU12USxNQUFPaEcsS0FBS3dXLFVBQVUsS0FDbkNELE1BQU8sTUFBT3ZRLE1BQU9oRyxLQUFLd1csVUFBVSxLQUNwQ0QsTUFBTyxLQUFNdlEsTUFBT2hHLEtBQUt3VyxVQUFVLElBY3pDLE9BWkl4VyxNQUFLeVcsV0FBYS9lLEdBQ2xCa0wsRUFBT0UsTUFBT3lULE1BQU8sS0FBTXZRLE1BQU9oRyxLQUFLeVcsV0FFdkN6VyxLQUFLMFcsV0FBYWhmLEdBQ2xCa0wsRUFBT0UsTUFBT3lULE1BQU8sS0FBTXZRLE1BQU9oRyxLQUFLMFcsV0FFdkMxVyxLQUFLMlcsV0FBYWpmLEdBQ2xCa0wsRUFBT0UsTUFBT3lULE1BQU8sS0FBTXZRLE1BQU9oRyxLQUFLMlcsV0FFdkMzVyxLQUFLNFcsV0FBYWxmLEdBQ2xCa0wsRUFBT0UsTUFBT3lULE1BQU8sS0FBTXZRLE1BQU9oRyxLQUFLNFcsV0FFcENoVSxHQUdYMUIsT0FBUSxXQUNKLEdBU0l5VixHQUFVRixFQUFVSSxFQUFLQyxFQUFJQyxFQUFJQyxFQUFJSixFQUFVRixFQUFVL1QsRUFDekRzVSxFQUFNQyxFQVZON1gsRUFBU1csS0FBS1gsT0FDZCtDLEVBQVNwQyxLQUFLb0MsT0FDZHdRLEVBQU94USxFQUFPaEMsT0FDZGlCLEVBQVVyQixLQUFLcUIsUUFDZmtMLEVBQWN2TSxLQUFLdU0sWUFDbkJFLEVBQWV6TSxLQUFLeU0sYUFDcEIwSyxFQUFXOVYsRUFBUVUsSUFBSSxtQkFBcUJySyxFQUFZRCxFQUFLeUssSUFBSWhDLE1BQU16SSxFQUFNMkssR0FBVWYsRUFBUVUsSUFBSSxpQkFDbkdxVixFQUFXL1YsRUFBUVUsSUFBSSxtQkFBcUJySyxFQUFZRCxFQUFLMEssSUFBSWpDLE1BQU16SSxFQUFNMkssR0FBVWYsRUFBUVUsSUFBSSxpQkFDbkdpUCxFQUFhLENBSWpCLElBQUt0WCxFQUFJNkcsT0FBT1csT0FBT1IsS0FBS1YsTUFBNUIsQ0FJQSxHQUFJcUIsRUFBUVUsSUFBSSxPQUNSVixFQUFRVSxJQUFJLGlCQUFtQkssRUFBT2hDLE9BQVMsR0FDL0NxVyxFQUFXclUsRUFBTyxHQUNsQnVVLEVBQVd2VSxFQUFPLEdBQ2xCMFUsRUFBSzFVLEVBQU8sR0FDWjJVLEVBQUszVSxFQUFPLEdBQ1o0VSxFQUFLNVUsRUFBTyxHQUNad1UsRUFBV3hVLEVBQU8sR0FDbEJzVSxFQUFXdFUsRUFBTyxLQUVsQnVVLEVBQVd2VSxFQUFPLEdBQ2xCMFUsRUFBSzFVLEVBQU8sR0FDWjJVLEVBQUszVSxFQUFPLEdBQ1o0VSxFQUFLNVUsRUFBTyxHQUNad1UsRUFBV3hVLEVBQU8sUUFRdEIsSUFMQUEsRUFBT2lWLEtBQUssU0FBVUMsRUFBR0MsR0FBSyxNQUFPRCxHQUFJQyxJQUN6Q1QsRUFBS3hlLEVBQVM4SixFQUFRLEdBQ3RCMlUsRUFBS3plLEVBQVM4SixFQUFRLEdBQ3RCNFUsRUFBSzFlLEVBQVM4SixFQUFRLEdBQ3RCeVUsRUFBTUcsRUFBS0YsRUFDUHpWLEVBQVFVLElBQUksZ0JBQWlCLENBRTdCLElBREE0VSxFQUFXQyxFQUFXbGYsRUFDakJpTCxFQUFJLEVBQU9pUSxFQUFKalEsRUFBVUEsSUFDZGdVLElBQWFqZixHQUFhMEssRUFBT08sR0FBS21VLEVBQU1ELEVBQU14VixFQUFRVSxJQUFJLGdCQUM5RDRVLEVBQVd2VSxFQUFPTyxJQUVsQlAsRUFBT08sR0FBS3FVLEVBQU1ILEVBQU14VixFQUFRVSxJQUFJLGdCQUNwQzZVLEVBQVd4VSxFQUFPTyxHQUcxQjhULEdBQVdyVSxFQUFPLEdBQ2xCc1UsRUFBV3RVLEVBQU93USxFQUFPLE9BRXpCK0QsR0FBV3ZVLEVBQU8sR0FDbEJ3VSxFQUFXeFUsRUFBT3dRLEVBQU8sRUFHakM1UyxNQUFLd1csV0FBYU0sRUFBSUMsRUFBSUMsR0FDMUJoWCxLQUFLMlcsU0FBV0EsRUFDaEIzVyxLQUFLNFcsU0FBV0EsRUFDaEI1VyxLQUFLeVcsU0FBV0EsRUFDaEJ6VyxLQUFLMFcsU0FBV0EsRUFFaEJRLEVBQVczSyxHQUFlNkssRUFBV0QsRUFBVyxHQUM1QzlWLEVBQVFVLElBQUksa0JBQ1ppUCxFQUFhdlosRUFBSzBhLEtBQUs5USxFQUFRVSxJQUFJLGVBQ25Dd0ssR0FBZSxFQUFJOVUsRUFBSzBhLEtBQUs5USxFQUFRVSxJQUFJLGVBQ3pDbVYsRUFBVzNLLEdBQWU2SyxFQUFXRCxFQUFXLEdBQ2pDUixFQUFYRixHQUNBcFgsRUFBT3dRLFlBQVk0RyxFQUFXVSxHQUFZRCxFQUFXbEcsRUFDakR2RSxFQUFlLEVBQ2ZwTCxFQUFRVSxJQUFJLGNBQ1pWLEVBQVFVLElBQUksb0JBQ1pWLEVBQVFVLElBQUkscUJBQXFCbU4sU0FFckN3SCxFQUFXRSxHQUNYdlgsRUFBT3dRLFlBQVk2RyxFQUFXUyxHQUFZRCxFQUFXbEcsRUFDakR2RSxFQUFlLEVBQ2ZwTCxFQUFRVSxJQUFJLGNBQ1pWLEVBQVFVLElBQUksb0JBQ1pWLEVBQVFVLElBQUkscUJBQXFCbU4sVUFLN0M3UCxFQUFPOFIsU0FDSDFaLEVBQUs4VyxPQUFPdUksRUFBS0ssR0FBWUQsRUFBV2xHLEdBQ3hDdlosRUFBSzhXLE1BQXFCLEdBQWY5QixHQUNYaFYsRUFBSzhXLE9BQU95SSxFQUFLRixHQUFNSSxHQUN2QnpmLEVBQUs4VyxNQUFxQixHQUFmOUIsR0FDWHBMLEVBQVFVLElBQUksZ0JBQ1pWLEVBQVFVLElBQUksaUJBQWlCbU4sU0FFakM3UCxFQUFPMlEsU0FDSHZZLEVBQUs4VyxPQUFPb0ksRUFBV1EsR0FBWUQsRUFBV2xHLEdBQzlDdlosRUFBSzhXLE1BQU05QixFQUFlLEdBQzFCaFYsRUFBSzhXLE9BQU91SSxFQUFLSyxHQUFZRCxFQUFXbEcsR0FDeEN2WixFQUFLOFcsTUFBTTlCLEVBQWUsR0FDMUJwTCxFQUFRVSxJQUFJLGNBQWNtTixTQUM5QjdQLEVBQU8yUSxTQUNIdlksRUFBSzhXLE9BQU9vSSxFQUFXUSxHQUFZRCxFQUFXbEcsR0FDOUN2WixFQUFLOFcsTUFBTTlCLEVBQWUsR0FDMUJoVixFQUFLOFcsT0FBT29JLEVBQVdRLEdBQVlELEVBQVdsRyxHQUM5Q3ZaLEVBQUs4VyxNQUFNOUIsRUFBZUEsRUFBZSxHQUN6Q3BMLEVBQVFVLElBQUksaUJBQWlCbU4sU0FFakM3UCxFQUFPMlEsU0FBU3ZZLEVBQUs4VyxPQUFPcUksRUFBV08sR0FBWUQsRUFBV2xHLEdBQzFEdlosRUFBSzhXLE1BQU05QixFQUFlLEdBQzFCaFYsRUFBSzhXLE9BQU95SSxFQUFLRyxHQUFZRCxFQUFXbEcsR0FDeEN2WixFQUFLOFcsTUFBTTlCLEVBQWUsR0FDMUJwTCxFQUFRVSxJQUFJLGNBQWNtTixTQUM5QjdQLEVBQU8yUSxTQUNIdlksRUFBSzhXLE9BQU9xSSxFQUFXTyxHQUFZRCxFQUFXbEcsR0FDOUN2WixFQUFLOFcsTUFBTTlCLEVBQWUsR0FDMUJoVixFQUFLOFcsT0FBT3FJLEVBQVdPLEdBQVlELEVBQVdsRyxHQUM5Q3ZaLEVBQUs4VyxNQUFNOUIsRUFBZUEsRUFBZSxHQUN6Q3BMLEVBQVFVLElBQUksaUJBQWlCbU4sU0FFakM3UCxFQUFPMlEsU0FDSHZZLEVBQUs4VyxPQUFPd0ksRUFBS0ksR0FBWUQsRUFBV2xHLEdBQ3hDdlosRUFBSzhXLE1BQXFCLEdBQWY5QixHQUNYaFYsRUFBSzhXLE9BQU93SSxFQUFLSSxHQUFZRCxFQUFXbEcsR0FDeEN2WixFQUFLOFcsTUFBcUIsR0FBZjlCLEdBQ1hwTCxFQUFRVSxJQUFJLGdCQUFnQm1OLFNBQzVCN04sRUFBUVUsSUFBSSxZQUNaa1YsRUFBT3hmLEVBQUswYSxLQUFLOVEsRUFBUVUsSUFBSSxlQUM3QjFDLEVBQU8yUSxTQUNIdlksRUFBSzhXLE9BQU9sTixFQUFRVSxJQUFJLFVBQVlvVixHQUFZRCxFQUFXbEcsR0FDM0R2WixFQUFLOFcsTUFBTzlCLEVBQWUsRUFBS3dLLEdBQ2hDeGYsRUFBSzhXLE9BQU9sTixFQUFRVSxJQUFJLFVBQVlvVixHQUFZRCxFQUFXbEcsR0FDM0R2WixFQUFLOFcsTUFBTzlCLEVBQWUsRUFBS3dLLEdBQ2hDNVYsRUFBUVUsSUFBSSxnQkFBZ0JtTixTQUNoQzdQLEVBQU8yUSxTQUNIdlksRUFBSzhXLE9BQU9sTixFQUFRVSxJQUFJLFVBQVlvVixHQUFZRCxFQUFXbEcsRUFBYWlHLEdBQ3hFeGYsRUFBSzhXLE1BQU05QixFQUFlLEdBQzFCaFYsRUFBSzhXLE9BQU9sTixFQUFRVSxJQUFJLFVBQVlvVixHQUFZRCxFQUFXbEcsRUFBYWlHLEdBQ3hFeGYsRUFBSzhXLE1BQU05QixFQUFlLEdBQzFCcEwsRUFBUVUsSUFBSSxnQkFBZ0JtTixVQUVwQzdQLEVBQU82QixhQU9mckgsRUFBUzFCLEdBQ0w4SCxLQUFNLFNBQVVaLEVBQVFnSyxFQUFJaFAsRUFBTTBGLEdBQzlCQyxLQUFLWCxPQUFTQSxFQUNkVyxLQUFLcUosR0FBS0EsRUFDVnJKLEtBQUszRixLQUFPQSxFQUNaMkYsS0FBS0QsS0FBT0EsR0FFaEJtUCxPQUFRLFdBRUosTUFEQWxQLE1BQUtYLE9BQU9tWSxZQUFZeFgsTUFDakJBLFFBSWZsRyxFQUFlM0IsR0FDWHNmLFNBQVUsa0JBRVZ4WCxLQUFNLFNBQVV4RixFQUFPQyxFQUFRMkUsR0FDdEI1RSxJQUdMdUYsS0FBS3ZGLE1BQVFBLEVBQ2J1RixLQUFLdEYsT0FBU0EsRUFDZHNGLEtBQUtYLE9BQVNBLEVBQ2RXLEtBQUt5UCxZQUFjLEtBQ2ZwUSxFQUFPLEtBQ1BBLEVBQVNBLEVBQU8sSUFFcEJwSCxFQUFFNE0sS0FBS3hGLEVBQVEsZUFBZ0JXLFFBR25DZ1EsU0FBVSxTQUFVMEgsRUFBSUMsRUFBSUMsRUFBSUMsRUFBSXZkLEVBQVcyQixHQUMzQyxNQUFPK0QsTUFBS3FTLFlBQVlxRixFQUFJQyxJQUFNQyxFQUFJQyxJQUFNdmQsRUFBVzJCLElBRzNEb1csVUFBVyxTQUFVZixFQUFNaFgsRUFBV0MsRUFBVzBCLEdBQzdDLE1BQU8rRCxNQUFLOFgsVUFBVSxTQUFVeEcsRUFBTWhYLEVBQVdDLEVBQVcwQixLQUdoRTRULFdBQVksU0FBVXpGLEVBQUdDLEVBQUd5TCxFQUFReGIsRUFBV0MsRUFBVzBCLEdBQ3RELE1BQU8rRCxNQUFLOFgsVUFBVSxVQUFXMU4sRUFBR0MsRUFBR3lMLEVBQVF4YixFQUFXQyxFQUFXMEIsS0FHekVxYSxhQUFjLFNBQVVsTSxFQUFHQyxFQUFHeUwsRUFBUWlDLEVBQVlDLEVBQVUxZCxFQUFXQyxHQUNuRSxNQUFPeUYsTUFBSzhYLFVBQVUsWUFBYTFOLEVBQUdDLEVBQUd5TCxFQUFRaUMsRUFBWUMsRUFBVTFkLEVBQVdDLEtBR3RGNFcsU0FBVSxTQUFVL0csRUFBR0MsRUFBRzVQLEVBQU9DLEVBQVFKLEVBQVdDLEdBQ2hELE1BQU95RixNQUFLOFgsVUFBVSxRQUFTMU4sRUFBR0MsRUFBRzVQLEVBQU9DLEVBQVFKLEVBQVdDLEtBR25FMGQsV0FBWSxXQUNSLE1BQU9qWSxNQUFLOEUsUUFNaEJ3TixlQUFnQixXQUNaLE1BQU90UyxNQUFLeVAsYUFNaEJqSyxNQUFPLFdBQ0h1RixNQUFNLDBCQUdWbU4sUUFBUyxTQUFVblQsRUFBSTFGLEdBQ25CcEgsRUFBRW9ILEdBQVE2SyxLQUFLbkYsSUFNbkJvVCxvQkFBcUIsU0FBVTFkLEVBQU9DLEVBQVFvSyxHQUUxQyxHQUFJeEQsRUFDSkEsR0FBUXRCLEtBQUt5WCxTQUFTM1YsS0FBS3BILEdBQ3ZCNEcsRUFDQXRCLEtBQUswTSxZQUFjcEwsRUFBTSxHQUV6QnRCLEtBQUswTSxZQUFjelUsRUFBRTZNLEdBQVFwSyxTQUVqQzRHLEVBQVF0QixLQUFLeVgsU0FBUzNWLEtBQUtySCxHQUN2QjZHLEVBQ0F0QixLQUFLd00sV0FBYWxMLEVBQU0sR0FFeEJ0QixLQUFLd00sV0FBYXZVLEVBQUU2TSxHQUFRckssU0FPcENxZCxVQUFXLFNBQVVNLEVBQVdDLEdBQzVCLEdBQUloUCxHQUFLbFAsR0FFVCxPQURBa2UsR0FBVTFYLFFBQVEwSSxHQUNYLEdBQUl4UCxHQUFPbUcsS0FBTXFKLEVBQUkrTyxFQUFXQyxJQU0zQ2IsWUFBYSxTQUFVeEMsR0FDbkJqSyxNQUFNLGdDQU1WZ0UsaUJBQWtCLFNBQVU2RixFQUFTSSxHQUNqQ2pLLE1BQU0scUNBTVZnRixpQkFBa0IsU0FBVTZFLEVBQVNJLEdBQ2pDakssTUFBTSxxQ0FNVm9GLGNBQWUsU0FBVXlFLEdBQ3JCN0osTUFBTSxrQ0FNVjhKLFdBQVksU0FBVTlQLEVBQUlxRixFQUFHQyxHQUN6QlUsTUFBTSwrQkFNVjdKLE9BQVEsV0FDSjZKLE1BQU0sNkJBSWRoUixFQUFpQjVCLEVBQVkyQixHQUN6Qm1HLEtBQU0sU0FBVXhGLEVBQU9DLEVBQVEyRSxFQUFRc0YsR0FDbkM1SyxFQUFld0csT0FBT04sS0FBS1MsS0FBS1YsS0FBTXZGLEVBQU9DLEVBQVEyRSxHQUNyRFcsS0FBSzhFLE9BQVN0TixFQUFTMk0sY0FBYyxVQUNqQzlFLEVBQU8sS0FDUEEsRUFBU0EsRUFBTyxJQUVwQnBILEVBQUU0TSxLQUFLeEYsRUFBUSxlQUFnQlcsTUFDL0IvSCxFQUFFK0gsS0FBSzhFLFFBQVFmLEtBQU11VSxRQUFTLGVBQWdCN2QsTUFBT0EsRUFBT0MsT0FBUUEsRUFBUTZkLGNBQWUsUUFDM0Z2WSxLQUFLa1ksUUFBUWxZLEtBQUs4RSxPQUFRekYsR0FDMUJXLEtBQUttWSxvQkFBb0IxZCxFQUFPQyxFQUFRc0YsS0FBSzhFLFFBQzdDOUUsS0FBSzhFLE9BQU9ySyxNQUFRdUYsS0FBS3dNLFdBQ3pCeE0sS0FBSzhFLE9BQU9wSyxPQUFTc0YsS0FBSzBNLFlBQzFCMU0sS0FBSzJFLFNBQVdBLEVBQ2hCM0UsS0FBS2dQLFVBQ0xoUCxLQUFLd1ksWUFDTHhZLEtBQUt5WSxxQkFBdUIvZ0IsRUFDNUJPLEVBQUUrSCxLQUFLOEUsUUFBUWYsS0FBS3RKLE1BQU91RixLQUFLd00sV0FBWTlSLE9BQVFzRixLQUFLME0sZUFHN0RnTSxZQUFhLFNBQVVwZSxFQUFXQyxFQUFXMEIsR0FDekMsR0FBSTBjLEdBQVUzWSxLQUFLOEUsT0FBT0UsV0FBVyxLQVFyQyxPQVBJMUssS0FBYzVDLElBQ2RpaEIsRUFBUUMsWUFBY3RlLEdBRTFCcWUsRUFBUTFjLFVBQVlBLElBQWN2RSxFQUFZLEVBQUl1RSxFQUM5QzFCLElBQWM3QyxJQUNkaWhCLEVBQVFFLFVBQVl0ZSxHQUVqQm9lLEdBR1huVCxNQUFPLFdBQ0gsR0FBSW1ULEdBQVUzWSxLQUFLMFksYUFDbkJDLEdBQVFHLFVBQVUsRUFBRyxFQUFHOVksS0FBS3dNLFdBQVl4TSxLQUFLME0sYUFDOUMxTSxLQUFLZ1AsVUFDTGhQLEtBQUt3WSxZQUNMeFksS0FBS3lZLHFCQUF1Qi9nQixHQUdoQ3FoQixXQUFZLFNBQVVuRSxFQUFTdEQsRUFBTWhYLEVBQVdDLEVBQVcwQixHQUN2RCxHQUNJMEcsR0FBR3FQLEVBREgyRyxFQUFVM1ksS0FBSzBZLFlBQVlwZSxFQUFXQyxFQUFXMEIsRUFJckQsS0FGQTBjLEVBQVFLLFlBQ1JMLEVBQVFNLE9BQU8zSCxFQUFLLEdBQUcsR0FBSyxHQUFLQSxFQUFLLEdBQUcsR0FBSyxJQUN6QzNPLEVBQUksRUFBR3FQLEVBQU9WLEVBQUtsUixPQUFZNFIsRUFBSnJQLEVBQVVBLElBQ3RDZ1csRUFBUU8sT0FBTzVILEVBQUszTyxHQUFHLEdBQUssR0FBSzJPLEVBQUszTyxHQUFHLEdBQUssR0FFOUNySSxLQUFjNUMsR0FDZGloQixFQUFRUSxTQUVSNWUsSUFBYzdDLEdBQ2RpaEIsRUFBUVMsT0FFUnBaLEtBQUtxWixVQUFZM2hCLEdBQWFzSSxLQUFLc1osVUFBWTVoQixHQUMvQ2loQixFQUFRWSxjQUFjdlosS0FBS3FaLFFBQVNyWixLQUFLc1osV0FDekN0WixLQUFLeVkscUJBQXVCN0QsSUFJcEM0RSxZQUFhLFNBQVU1RSxFQUFTeEssRUFBR0MsRUFBR3lMLEVBQVF4YixFQUFXQyxFQUFXMEIsR0FDaEUsR0FBSTBjLEdBQVUzWSxLQUFLMFksWUFBWXBlLEVBQVdDLEVBQVcwQixFQUNyRDBjLEdBQVFLLFlBQ1JMLEVBQVFjLElBQUlyUCxFQUFHQyxFQUFHeUwsRUFBUSxFQUFHLEVBQUlyZSxFQUFLNGUsSUFBSSxHQUN0Q3JXLEtBQUtxWixVQUFZM2hCLEdBQWFzSSxLQUFLc1osVUFBWTVoQixHQUMvQ2loQixFQUFRWSxjQUFjdlosS0FBS3FaLFFBQVNyWixLQUFLc1osV0FDekN0WixLQUFLeVkscUJBQXVCN0QsR0FFNUJ0YSxJQUFjNUMsR0FDZGloQixFQUFRUSxTQUVSNWUsSUFBYzdDLEdBQ2RpaEIsRUFBUVMsUUFJaEJNLGNBQWUsU0FBVTlFLEVBQVN4SyxFQUFHQyxFQUFHeUwsRUFBUWlDLEVBQVlDLEVBQVUxZCxFQUFXQyxHQUM3RSxHQUFJb2UsR0FBVTNZLEtBQUswWSxZQUFZcGUsRUFBV0MsRUFDMUNvZSxHQUFRSyxZQUNSTCxFQUFRTSxPQUFPN08sRUFBR0MsR0FDbEJzTyxFQUFRYyxJQUFJclAsRUFBR0MsRUFBR3lMLEVBQVFpQyxFQUFZQyxHQUFVLEdBQ2hEVyxFQUFRTyxPQUFPOU8sRUFBR0MsR0FDbEJzTyxFQUFRZ0IsWUFDSnJmLElBQWM1QyxHQUNkaWhCLEVBQVFRLFNBRVI1ZSxHQUNBb2UsRUFBUVMsT0FFUnBaLEtBQUtxWixVQUFZM2hCLEdBQWFzSSxLQUFLc1osVUFBWTVoQixHQUMvQ2loQixFQUFRWSxjQUFjdlosS0FBS3FaLFFBQVNyWixLQUFLc1osV0FDekN0WixLQUFLeVkscUJBQXVCN0QsSUFJcENnRixVQUFXLFNBQVVoRixFQUFTeEssRUFBR0MsRUFBRzVQLEVBQU9DLEVBQVFKLEVBQVdDLEdBQzFELE1BQU95RixNQUFLK1ksV0FBV25FLElBQVd4SyxFQUFHQyxJQUFLRCxFQUFJM1AsRUFBTzRQLElBQUtELEVBQUkzUCxFQUFPNFAsRUFBSTNQLElBQVUwUCxFQUFHQyxFQUFJM1AsSUFBVTBQLEVBQUdDLElBQUsvUCxFQUFXQyxJQUczSGlkLFlBQWEsU0FBVXhDLEdBSW5CLE1BSEFoVixNQUFLZ1AsT0FBT2dHLEVBQU0zTCxJQUFNMkwsRUFDeEJoVixLQUFLd1ksU0FBUzFWLEtBQUtrUyxFQUFNM0wsSUFDekJySixLQUFLeVAsWUFBY3VGLEVBQU0zTCxHQUNsQjJMLEVBQU0zTCxJQUdqQjBGLGlCQUFrQixTQUFVNkYsRUFBU0ksR0FDakMsR0FDSXJTLEdBREE2VixFQUFXeFksS0FBS3dZLFFBR3BCLEtBREF4WSxLQUFLZ1AsT0FBT2dHLEVBQU0zTCxJQUFNMkwsRUFDbkJyUyxFQUFJNlYsRUFBU3BZLE9BQVF1QyxLQUNsQjZWLEVBQVM3VixJQUFNaVMsSUFDZjRELEVBQVM3VixHQUFLcVMsRUFBTTNMLFVBR3JCckosTUFBS2dQLE9BQU80RixJQUd2Qi9GLGtCQUFtQixTQUFVSCxFQUFVTSxHQUNuQyxHQUVJNkssR0FBS2xYLEVBQUdtWCxFQUZSdEIsRUFBV3hZLEtBQUt3WSxTQUNoQnVCLElBR0osS0FBS3BYLEVBQUkrTCxFQUFTdE8sT0FBUXVDLEtBQ3RCb1gsRUFBU3JMLEVBQVMvTCxLQUFNLENBRTVCLEtBQUtBLEVBQUk2VixFQUFTcFksT0FBUXVDLEtBQ3RCa1gsRUFBTXJCLEVBQVM3VixHQUNYb1gsRUFBU0YsS0FDVHJCLEVBQVMvVSxPQUFPZCxFQUFHLFNBQ1ozQyxNQUFLZ1AsT0FBTzZLLEdBQ25CQyxFQUFRblgsRUFHaEIsS0FBS0EsRUFBSXFNLEVBQU81TyxPQUFRdUMsS0FDcEI2VixFQUFTL1UsT0FBT3FXLEVBQU8sRUFBRzlLLEVBQU9yTSxHQUFHMEcsSUFDcENySixLQUFLZ1AsT0FBT0EsRUFBT3JNLEdBQUcwRyxJQUFNMkYsRUFBT3JNLElBSzNDb04saUJBQWtCLFNBQVU2RSxFQUFTSSxHQUNqQyxHQUNJclMsR0FEQTZWLEVBQVd4WSxLQUFLd1ksUUFFcEIsS0FBSzdWLEVBQUk2VixFQUFTcFksT0FBUXVDLEtBQ3RCLEdBQUk2VixFQUFTN1YsS0FBT2lTLEVBR2hCLE1BRkE0RCxHQUFTL1UsT0FBT2QsRUFBSSxFQUFHLEVBQUdxUyxFQUFNM0wsU0FDaENySixLQUFLZ1AsT0FBT2dHLEVBQU0zTCxJQUFNMkwsSUFNcEM3RSxjQUFlLFNBQVV5RSxHQUNyQixHQUNJalMsR0FEQTZWLEVBQVd4WSxLQUFLd1ksUUFFcEIsS0FBSzdWLEVBQUk2VixFQUFTcFksT0FBUXVDLEtBQ3RCLEdBQUk2VixFQUFTN1YsS0FBT2lTLEVBQVMsQ0FDekI0RCxFQUFTL1UsT0FBT2QsRUFBRyxFQUNuQixhQUdEM0MsTUFBS2dQLE9BQU80RixJQUd2QkMsV0FBWSxTQUFVOVAsRUFBSXFGLEVBQUdDLEdBSXpCLE1BSEFySyxNQUFLcVosUUFBVWpQLEVBQ2ZwSyxLQUFLc1osUUFBVWpQLEVBQ2ZySyxLQUFLa0IsU0FDRWxCLEtBQUt5WSxzQkFHaEJ2WCxPQUFRLFdBQ0osR0FJSTBULEdBQVNJLEVBQU9yUyxFQUpoQjZWLEVBQVd4WSxLQUFLd1ksU0FDaEJ4SixFQUFTaFAsS0FBS2dQLE9BQ2Q3VSxFQUFhcWUsRUFBU3BZLE9BQ3RCdVksRUFBVTNZLEtBQUswWSxhQUduQixLQURBQyxFQUFRRyxVQUFVLEVBQUcsRUFBRzlZLEtBQUt3TSxXQUFZeE0sS0FBSzBNLGFBQ3pDL0osRUFBSSxFQUFPeEksRUFBSndJLEVBQWdCQSxJQUN4QmlTLEVBQVU0RCxFQUFTN1YsR0FDbkJxUyxFQUFRaEcsRUFBTzRGLEdBQ2Y1VSxLQUFLLFFBQVVnVixFQUFNM2EsTUFBTTZGLE1BQU1GLEtBQU1nVixFQUFNalYsS0FFNUNDLE1BQUsyRSxXQUVOM0UsS0FBS2dQLFVBQ0xoUCxLQUFLd1ksZ0JBTWpCeGUsRUFBYzdCLEVBQVkyQixHQUN0Qm1HLEtBQU0sU0FBVXhGLEVBQU9DLEVBQVEyRSxHQUMzQixHQUFJMmEsRUFDSmhnQixHQUFZdUcsT0FBT04sS0FBS1MsS0FBS1YsS0FBTXZGLEVBQU9DLEVBQVEyRSxHQUM5Q0EsRUFBTyxLQUNQQSxFQUFTQSxFQUFPLElBRXBCcEgsRUFBRTRNLEtBQUt4RixFQUFRLGVBQWdCVyxNQUMvQkEsS0FBSzhFLE9BQVN0TixFQUFTMk0sY0FBYyxRQUNyQ2xNLEVBQUUrSCxLQUFLOEUsUUFBUWYsS0FBTXVVLFFBQVMsZUFBZ0IyQixTQUFVLFdBQVlDLFNBQVUsU0FBVXpmLE1BQU9BLEVBQU9DLE9BQVFBLEVBQVF5ZixPQUFRLE1BQU9DLFFBQVMsTUFBTzdCLGNBQWUsUUFDcEt2WSxLQUFLa1ksUUFBUWxZLEtBQUs4RSxPQUFRekYsR0FDMUJXLEtBQUttWSxvQkFBb0IxZCxFQUFPQyxFQUFRc0YsS0FBSzhFLFFBQzdDOUUsS0FBSzhFLE9BQU9ySyxNQUFRdUYsS0FBS3dNLFdBQ3pCeE0sS0FBSzhFLE9BQU9wSyxPQUFTc0YsS0FBSzBNLFlBQzFCc04sRUFBVSx5Q0FBMkNoYSxLQUFLd00sV0FBYSxJQUFNeE0sS0FBSzBNLFlBQWMsaURBQ3RDMU0sS0FBS3dNLFdBQWEsYUFBZXhNLEtBQUswTSxZQUFjLGtCQUM5RzFNLEtBQUs4RSxPQUFPdVYsbUJBQW1CLFlBQWFMLEdBQzVDaGEsS0FBS3NhLE1BQVFyaUIsRUFBRStILEtBQUs4RSxRQUFReVYsV0FBVyxHQUN2Q3ZhLEtBQUt3YSxVQUFXLEVBQ2hCeGEsS0FBS3lhLFVBQVksSUFHckIxQixXQUFZLFNBQVVuRSxFQUFTdEQsRUFBTWhYLEVBQVdDLEVBQVcwQixHQUN2RCxHQUNJeWUsR0FBU3ZCLEVBQVFDLEVBQU11QixFQUFRQyxFQUFLNUksRUFBTXJQLEVBRDFDa1ksSUFFSixLQUFLbFksRUFBSSxFQUFHcVAsRUFBT1YsRUFBS2xSLE9BQVk0UixFQUFKclAsRUFBVUEsSUFDdENrWSxFQUFNbFksR0FBSyxHQUFNMk8sRUFBSzNPLEdBQUcsR0FBTSxJQUFPMk8sRUFBSzNPLEdBQUcsRUFjbEQsT0FaQStYLEdBQVVHLEVBQU1wWCxPQUFPLEVBQUcsR0FDMUJ4SCxFQUFZQSxJQUFjdkUsRUFBWSxFQUFJdUUsRUFDMUNrZCxFQUFTN2UsSUFBYzVDLEVBQVksb0JBQXNCLGtCQUFvQnVFLEVBQVksb0JBQXNCM0IsRUFBWSxLQUMzSDhlLEVBQU83ZSxJQUFjN0MsRUFBWSxrQkFBb0IsZUFBaUI2QyxFQUFZLG1CQUNsRm9nQixFQUFTRSxFQUFNLEtBQU9BLEVBQU1BLEVBQU16YSxPQUFTLEdBQUssS0FBTyxHQUN2RHdhLEVBQU0seUNBQTJDNWEsS0FBS3dNLFdBQWEsSUFBTXhNLEtBQUswTSxZQUFjLGtCQUNyRWtJLEVBQVUsS0FDNUJ1RSxFQUNBQyxFQUNELHFEQUF1RHBaLEtBQUswTSxZQUFjLFlBQWMxTSxLQUFLd00sV0FBYSx3Q0FDNUZrTyxFQUFVLE1BQVFHLEVBQU1uWCxLQUFLLE1BQVEsSUFBTWlYLEVBQVMsa0JBSzFFbkIsWUFBYSxTQUFVNUUsRUFBU3hLLEVBQUdDLEVBQUd5TCxFQUFReGIsRUFBV0MsRUFBVzBCLEdBQ2hFLEdBQUlrZCxHQUFRQyxFQUFNd0IsQ0FVbEIsT0FUQXhRLElBQUswTCxFQUNMekwsR0FBS3lMLEVBQ0xxRCxFQUFTN2UsSUFBYzVDLEVBQVksb0JBQXNCLGtCQUFvQnVFLEVBQVksb0JBQXNCM0IsRUFBWSxLQUMzSDhlLEVBQU83ZSxJQUFjN0MsRUFBWSxrQkFBb0IsZUFBaUI2QyxFQUFZLG1CQUNsRnFnQixFQUFNLHdCQUNpQmhHLEVBQVUsS0FDN0J1RSxFQUNBQyxFQUNBLGlDQUFtQy9PLEVBQUksWUFBY0QsRUFBSSxhQUF5QixFQUFUMEwsRUFBYyxjQUEwQixFQUFUQSxFQUFjLGlCQUs5SDRELGNBQWUsU0FBVTlFLEVBQVN4SyxFQUFHQyxFQUFHeUwsRUFBUWlDLEVBQVlDLEVBQVUxZCxFQUFXQyxHQUM3RSxHQUFJc2dCLEdBQU9DLEVBQVFDLEVBQVFDLEVBQU1DLEVBQU05QixFQUFRQyxFQUFNd0IsQ0FDckQsSUFBSTdDLElBQWVDLEVBQ2YsTUFBTyxFQVlYLElBVktBLEVBQVdELElBQWlCLEVBQUl0Z0IsRUFBSzRlLEtBQ3RDMEIsRUFBYSxFQUNiQyxFQUFZLEVBQUl2Z0IsRUFBSzRlLElBR3pCeUUsRUFBUzFRLEVBQUkzUyxFQUFLOFcsTUFBTTlXLEVBQUt5akIsSUFBSW5ELEdBQWNqQyxHQUMvQ2lGLEVBQVMxUSxFQUFJNVMsRUFBSzhXLE1BQU05VyxFQUFLMGpCLElBQUlwRCxHQUFjakMsR0FDL0NrRixFQUFPNVEsRUFBSTNTLEVBQUs4VyxNQUFNOVcsRUFBS3lqQixJQUFJbEQsR0FBWWxDLEdBQzNDbUYsRUFBTzVRLEVBQUk1UyxFQUFLOFcsTUFBTTlXLEVBQUswakIsSUFBSW5ELEdBQVlsQyxHQUV2Q2dGLElBQVdFLEdBQVFELElBQVdFLEVBQU0sQ0FDcEMsR0FBS2pELEVBQVdELEVBQWN0Z0IsRUFBSzRlLEdBRS9CLE1BQU8sRUFHWHlFLEdBQVNFLEVBQU81USxFQUFJMEwsRUFDcEJpRixFQUFTRSxFQUFPNVEsRUFHcEIsTUFBSXlRLEtBQVdFLEdBQVFELElBQVdFLEdBQVNqRCxFQUFXRCxFQUFjdGdCLEVBQUs0ZSxHQUM5RCxJQUdYd0UsR0FBU3pRLEVBQUkwTCxFQUFRekwsRUFBSXlMLEVBQVExTCxFQUFJMEwsRUFBUXpMLEVBQUl5TCxFQUFRZ0YsRUFBUUMsRUFBUUMsRUFBTUMsR0FDL0U5QixFQUFTN2UsSUFBYzVDLEVBQVksb0JBQXNCLG9DQUFzQzRDLEVBQVksS0FDM0c4ZSxFQUFPN2UsSUFBYzdDLEVBQVksa0JBQW9CLGVBQWlCNkMsRUFBWSxtQkFDbEZxZ0IsRUFBTSx5Q0FBMkM1YSxLQUFLd00sV0FBYSxJQUFNeE0sS0FBSzBNLFlBQWMsa0JBQ3JFa0ksRUFBVSxLQUM1QnVFLEVBQ0FDLEVBQ0QscURBQXVEcFosS0FBSzBNLFlBQWMsWUFBYzFNLEtBQUt3TSxXQUFhLHdDQUM1RnBDLEVBQUksSUFBTUMsRUFBSSxPQUFTd1EsRUFBTW5YLEtBQUssTUFBUSxzQkFLaEVrVyxVQUFXLFNBQVVoRixFQUFTeEssRUFBR0MsRUFBRzVQLEVBQU9DLEVBQVFKLEVBQVdDLEdBQzFELE1BQU95RixNQUFLK1ksV0FBV25FLElBQVd4SyxFQUFHQyxJQUFLRCxFQUFHQyxFQUFJM1AsSUFBVTBQLEVBQUkzUCxFQUFPNFAsRUFBSTNQLElBQVUwUCxFQUFJM1AsRUFBTzRQLElBQUtELEVBQUdDLElBQUsvUCxFQUFXQyxJQUczSGlMLE1BQU8sV0FDSHhGLEtBQUtzYSxNQUFNeFAsVUFBWSxJQUczQjBNLFlBQWEsU0FBVXhDLEdBQ25CLEdBQUk0RixHQUFNNWEsS0FBSyxRQUFVZ1YsRUFBTTNhLE1BQU02RixNQUFNRixLQUFNZ1YsRUFBTWpWLEtBT3ZELE9BTklDLE1BQUt3YSxTQUNMeGEsS0FBS3NhLE1BQU1ELG1CQUFtQixZQUFhTyxHQUUzQzVhLEtBQUt5YSxXQUFhRyxFQUV0QjVhLEtBQUt5UCxZQUFjdUYsRUFBTTNMLEdBQ2xCMkwsRUFBTTNMLElBR2pCMEYsaUJBQWtCLFNBQVU2RixFQUFTSSxHQUNqQyxHQUFJb0csR0FBV25qQixFQUFFLFlBQWMyYyxHQUMzQmdHLEVBQU01YSxLQUFLLFFBQVVnVixFQUFNM2EsTUFBTTZGLE1BQU1GLEtBQU1nVixFQUFNalYsS0FDdkRxYixHQUFTLEdBQUdDLFVBQVlULEdBRzVCL0wsa0JBQW1CLFNBQVVILEVBQVVNLEdBRW5DLEdBR0lyTSxHQUhBeVksRUFBV25qQixFQUFFLFlBQWN5VyxFQUFTLElBQ3BDOU0sRUFBVSxHQUNWc1IsRUFBT2xFLEVBQU81TyxNQUVsQixLQUFLdUMsRUFBSSxFQUFPdVEsRUFBSnZRLEVBQVVBLElBQ2xCZixHQUFXNUIsS0FBSyxRQUFVZ1AsRUFBT3JNLEdBQUd0SSxNQUFNNkYsTUFBTUYsS0FBTWdQLEVBQU9yTSxHQUFHNUMsS0FHcEUsS0FEQXFiLEVBQVMsR0FBR0MsVUFBWXpaLEVBQ25CZSxFQUFJLEVBQUdBLEVBQUkrTCxFQUFTdE8sT0FBUXVDLElBQzdCMUssRUFBRSxZQUFjeVcsRUFBUy9MLElBQUlsSyxVQUlyQ3NYLGlCQUFrQixTQUFVNkUsRUFBU0ksR0FDakMsR0FBSW9HLEdBQVduakIsRUFBRSxZQUFjMmMsR0FDMUJnRyxFQUFNNWEsS0FBSyxRQUFVZ1YsRUFBTTNhLE1BQU02RixNQUFNRixLQUFNZ1YsRUFBTWpWLEtBQ3hEcWIsR0FBUyxHQUFHZixtQkFBbUIsV0FBWU8sSUFHL0N6SyxjQUFlLFNBQVV5RSxHQUNyQixHQUFJd0csR0FBV25qQixFQUFFLFlBQWMyYyxFQUMvQjVVLE1BQUtzYSxNQUFNZ0IsWUFBWUYsRUFBUyxLQUdwQ3ZHLFdBQVksU0FBVTlQLEVBQUlxRixFQUFHQyxHQUN6QixHQUFJdUssR0FBVTdQLEVBQUdzRSxHQUFHMEMsT0FBTyxFQUMzQixPQUFPNkksSUFHWDFULE9BQVEsV0FDQ2xCLEtBQUt3YSxXQUVOeGEsS0FBS3NhLE1BQU14UCxVQUFZOUssS0FBS3lhLFVBQzVCemEsS0FBS3dhLFVBQVcsU0FLM0JoakIsU0FBVUMiLCJmaWxlIjoib3JjaGVzdHJhL2NvbW1vbi9qcy9saWIvanF1ZXJ5LnNwYXJrbGluZS5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbipcbioganF1ZXJ5LnNwYXJrbGluZS5qc1xuKlxuKiB2Mi4xLjJcbiogKGMpIFNwbHVuaywgSW5jXG4qIENvbnRhY3Q6IEdhcmV0aCBXYXR0cyAoZ2FyZXRoQHNwbHVuay5jb20pXG4qIGh0dHA6Ly9vbW5pcG90ZW50Lm5ldC9qcXVlcnkuc3BhcmtsaW5lL1xuKlxuKiBHZW5lcmF0ZXMgaW5saW5lIHNwYXJrbGluZSBjaGFydHMgZnJvbSBkYXRhIHN1cHBsaWVkIGVpdGhlciB0byB0aGUgbWV0aG9kXG4qIG9yIGlubGluZSBpbiBIVE1MXG4qXG4qIENvbXBhdGlibGUgd2l0aCBJbnRlcm5ldCBFeHBsb3JlciA2LjArIGFuZCBtb2Rlcm4gYnJvd3NlcnMgZXF1aXBwZWQgd2l0aCB0aGUgY2FudmFzIHRhZ1xuKiAoRmlyZWZveCAyLjArLCBTYWZhcmksIE9wZXJhLCBldGMpXG4qXG4qIExpY2Vuc2U6IE5ldyBCU0QgTGljZW5zZVxuKlxuKiBDb3B5cmlnaHQgKGMpIDIwMTIsIFNwbHVuayBJbmMuXG4qIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qXG4qIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dCBtb2RpZmljYXRpb24sXG4qIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbipcbiogICAgICogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuKiAgICAgICB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuKiAgICAgKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4qICAgICAgIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb25cbiogICAgICAgYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4qICAgICAqIE5laXRoZXIgdGhlIG5hbWUgb2YgU3BsdW5rIEluYyBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnMgbWF5XG4qICAgICAgIGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXRcbiogICAgICAgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuKlxuKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIiBBTkQgQU5ZXG4qIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRUQgV0FSUkFOVElFU1xuKiBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVFxuKiBTSEFMTCBUSEUgQ09QWVJJR0hUIE9XTkVSIE9SIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLFxuKiBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UXG4qIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pXG4qIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSxcbiogT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJU1xuKiBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbipcbipcbiogVXNhZ2U6XG4qICAkKHNlbGVjdG9yKS5zcGFya2xpbmUodmFsdWVzLCBvcHRpb25zKVxuKlxuKiBJZiB2YWx1ZXMgaXMgdW5kZWZpbmVkIG9yIHNldCB0byAnaHRtbCcgdGhlbiB0aGUgZGF0YSB2YWx1ZXMgYXJlIHJlYWQgZnJvbSB0aGUgc3BlY2lmaWVkIHRhZzpcbiogICA8cD5TcGFya2xpbmU6IDxzcGFuIGNsYXNzPVwic3BhcmtsaW5lXCI+MSw0LDYsNiw4LDUsMyw1PC9zcGFuPjwvcD5cbiogICAkKCcuc3BhcmtsaW5lJykuc3BhcmtsaW5lKCk7XG4qIFRoZXJlIG11c3QgYmUgbm8gc3BhY2VzIGluIHRoZSBlbmNsb3NlZCBkYXRhIHNldFxuKlxuKiBPdGhlcndpc2UgdmFsdWVzIG11c3QgYmUgYW4gYXJyYXkgb2YgbnVtYmVycyBvciBudWxsIHZhbHVlc1xuKiAgICA8cD5TcGFya2xpbmU6IDxzcGFuIGlkPVwic3BhcmtsaW5lMVwiPlRoaXMgdGV4dCByZXBsYWNlZCBpZiB0aGUgYnJvd3NlciBpcyBjb21wYXRpYmxlPC9zcGFuPjwvcD5cbiogICAgJCgnI3NwYXJrbGluZTEnKS5zcGFya2xpbmUoWzEsNCw2LDYsOCw1LDMsNV0pXG4qICAgICQoJyNzcGFya2xpbmUyJykuc3BhcmtsaW5lKFsxLDQsNixudWxsLG51bGwsNSwzLDVdKVxuKlxuKiBWYWx1ZXMgY2FuIGFsc28gYmUgc3BlY2lmaWVkIGluIGFuIEhUTUwgY29tbWVudCwgb3IgYXMgYSB2YWx1ZXMgYXR0cmlidXRlOlxuKiAgICA8cD5TcGFya2xpbmU6IDxzcGFuIGNsYXNzPVwic3BhcmtsaW5lXCI+PCEtLTEsNCw2LDYsOCw1LDMsNSAtLT48L3NwYW4+PC9wPlxuKiAgICA8cD5TcGFya2xpbmU6IDxzcGFuIGNsYXNzPVwic3BhcmtsaW5lXCIgdmFsdWVzPVwiMSw0LDYsNiw4LDUsMyw1XCI+PC9zcGFuPjwvcD5cbiogICAgJCgnLnNwYXJrbGluZScpLnNwYXJrbGluZSgpO1xuKlxuKiBGb3IgbGluZSBjaGFydHMsIHggdmFsdWVzIGNhbiBhbHNvIGJlIHNwZWNpZmllZDpcbiogICA8cD5TcGFya2xpbmU6IDxzcGFuIGNsYXNzPVwic3BhcmtsaW5lXCI+MToxLDIuNzo0LDMuNDo2LDU6Niw2OjgsOC43OjUsOTozLDEwOjU8L3NwYW4+PC9wPlxuKiAgICAkKCcjc3BhcmtsaW5lMScpLnNwYXJrbGluZShbIFsxLDFdLCBbMi43LDRdLCBbMy40LDZdLCBbNSw2XSwgWzYsOF0sIFs4LjcsNV0sIFs5LDNdLCBbMTAsNV0gXSlcbipcbiogQnkgZGVmYXVsdCwgb3B0aW9ucyBzaG91bGQgYmUgcGFzc2VkIGluIGFzIHRlaCBzZWNvbmQgYXJndW1lbnQgdG8gdGhlIHNwYXJrbGluZSBmdW5jdGlvbjpcbiogICAkKCcuc3BhcmtsaW5lJykuc3BhcmtsaW5lKFsxLDIsMyw0XSwge3R5cGU6ICdiYXInfSlcbipcbiogT3B0aW9ucyBjYW4gYWxzbyBiZSBzZXQgYnkgcGFzc2luZyB0aGVtIG9uIHRoZSB0YWcgaXRzZWxmLiAgVGhpcyBmZWF0dXJlIGlzIGRpc2FibGVkIGJ5IGRlZmF1bHQgdGhvdWdoXG4qIGFzIHRoZXJlJ3MgYSBzbGlnaHQgcGVyZm9ybWFuY2Ugb3ZlcmhlYWQ6XG4qICAgJCgnLnNwYXJrbGluZScpLnNwYXJrbGluZShbMSwyLDMsNF0sIHtlbmFibGVUYWdPcHRpb25zOiB0cnVlfSlcbiogICA8cD5TcGFya2xpbmU6IDxzcGFuIGNsYXNzPVwic3BhcmtsaW5lXCIgc3BhcmtUeXBlPVwiYmFyXCIgc3BhcmtCYXJDb2xvcj1cInJlZFwiPmxvYWRpbmc8L3NwYW4+PC9wPlxuKiBQcmVmaXggYWxsIG9wdGlvbnMgc3VwcGxpZWQgYXMgdGFnIGF0dHJpYnV0ZSB3aXRoIFwic3BhcmtcIiAoY29uZmlndXJhYmxlIGJ5IHNldHRpbmcgdGFnT3B0aW9uUHJlZml4KVxuKlxuKiBTdXBwb3J0ZWQgb3B0aW9uczpcbiogICBsaW5lQ29sb3IgLSBDb2xvciBvZiB0aGUgbGluZSB1c2VkIGZvciB0aGUgY2hhcnRcbiogICBmaWxsQ29sb3IgLSBDb2xvciB1c2VkIHRvIGZpbGwgaW4gdGhlIGNoYXJ0IC0gU2V0IHRvICcnIG9yIGZhbHNlIGZvciBhIHRyYW5zcGFyZW50IGNoYXJ0XG4qICAgd2lkdGggLSBXaWR0aCBvZiB0aGUgY2hhcnQgLSBEZWZhdWx0cyB0byAzIHRpbWVzIHRoZSBudW1iZXIgb2YgdmFsdWVzIGluIHBpeGVsc1xuKiAgIGhlaWdodCAtIEhlaWdodCBvZiB0aGUgY2hhcnQgLSBEZWZhdWx0cyB0byB0aGUgaGVpZ2h0IG9mIHRoZSBjb250YWluaW5nIGVsZW1lbnRcbiogICBjaGFydFJhbmdlTWluIC0gU3BlY2lmeSB0aGUgbWluaW11bSB2YWx1ZSB0byB1c2UgZm9yIHRoZSBZIHJhbmdlIG9mIHRoZSBjaGFydCAtIERlZmF1bHRzIHRvIHRoZSBtaW5pbXVtIHZhbHVlIHN1cHBsaWVkXG4qICAgY2hhcnRSYW5nZU1heCAtIFNwZWNpZnkgdGhlIG1heGltdW0gdmFsdWUgdG8gdXNlIGZvciB0aGUgWSByYW5nZSBvZiB0aGUgY2hhcnQgLSBEZWZhdWx0cyB0byB0aGUgbWF4aW11bSB2YWx1ZSBzdXBwbGllZFxuKiAgIGNoYXJ0UmFuZ2VDbGlwIC0gQ2xpcCBvdXQgb2YgcmFuZ2UgdmFsdWVzIHRvIHRoZSBtYXgvbWluIHNwZWNpZmllZCBieSBjaGFydFJhbmdlTWluIGFuZCBjaGFydFJhbmdlTWF4XG4qICAgY2hhcnRSYW5nZU1pblggLSBTcGVjaWZ5IHRoZSBtaW5pbXVtIHZhbHVlIHRvIHVzZSBmb3IgdGhlIFggcmFuZ2Ugb2YgdGhlIGNoYXJ0IC0gRGVmYXVsdHMgdG8gdGhlIG1pbmltdW0gdmFsdWUgc3VwcGxpZWRcbiogICBjaGFydFJhbmdlTWF4WCAtIFNwZWNpZnkgdGhlIG1heGltdW0gdmFsdWUgdG8gdXNlIGZvciB0aGUgWCByYW5nZSBvZiB0aGUgY2hhcnQgLSBEZWZhdWx0cyB0byB0aGUgbWF4aW11bSB2YWx1ZSBzdXBwbGllZFxuKiAgIGNvbXBvc2l0ZSAtIElmIHRydWUgdGhlbiBkb24ndCBlcmFzZSBhbnkgZXhpc3RpbmcgY2hhcnQgYXR0YWNoZWQgdG8gdGhlIHRhZywgYnV0IGRyYXdcbiogICAgICAgICAgIGFub3RoZXIgY2hhcnQgb3ZlciB0aGUgdG9wIC0gTm90ZSB0aGF0IHdpZHRoIGFuZCBoZWlnaHQgYXJlIGlnbm9yZWQgaWYgYW5cbiogICAgICAgICAgIGV4aXN0aW5nIGNoYXJ0IGlzIGRldGVjdGVkLlxuKiAgIHRhZ1ZhbHVlc0F0dHJpYnV0ZSAtIE5hbWUgb2YgdGFnIGF0dHJpYnV0ZSB0byBjaGVjayBmb3IgZGF0YSB2YWx1ZXMgLSBEZWZhdWx0cyB0byAndmFsdWVzJ1xuKiAgIGVuYWJsZVRhZ09wdGlvbnMgLSBXaGV0aGVyIHRvIGNoZWNrIHRhZ3MgZm9yIHNwYXJrbGluZSBvcHRpb25zXG4qICAgdGFnT3B0aW9uUHJlZml4IC0gUHJlZml4IHVzZWQgZm9yIG9wdGlvbnMgc3VwcGxpZWQgYXMgdGFnIGF0dHJpYnV0ZXMgLSBEZWZhdWx0cyB0byAnc3BhcmsnXG4qICAgZGlzYWJsZUhpZGRlbkNoZWNrIC0gSWYgc2V0IHRvIHRydWUsIHRoZW4gdGhlIHBsdWdpbiB3aWxsIGFzc3VtZSB0aGF0IGNoYXJ0cyB3aWxsIG5ldmVyIGJlIGRyYXduIGludG8gYVxuKiAgICAgICAgICAgaGlkZGVuIGRvbSBlbGVtZW50LCBhdm9kaW5nIGEgYnJvd3NlciByZWZsb3dcbiogICBkaXNhYmxlSW50ZXJhY3Rpb24gLSBJZiBzZXQgdG8gdHJ1ZSB0aGVuIGFsbCBtb3VzZW92ZXIvY2xpY2sgaW50ZXJhY3Rpb24gYmVoYXZpb3VyIHdpbGwgYmUgZGlzYWJsZWQsXG4qICAgICAgIG1ha2luZyB0aGUgcGx1Z2luIHBlcmZvcm0gbXVjaCBsaWtlIGl0IGRpZCBpbiAxLnhcbiogICBkaXNhYmxlVG9vbHRpcHMgLSBJZiBzZXQgdG8gdHJ1ZSB0aGVuIHRvb2x0aXBzIHdpbGwgYmUgZGlzYWJsZWQgLSBEZWZhdWx0cyB0byBmYWxzZSAodG9vbHRpcHMgZW5hYmxlZClcbiogICBkaXNhYmxlSGlnaGxpZ2h0IC0gSWYgc2V0IHRvIHRydWUgdGhlbiBoaWdobGlnaHRpbmcgb2Ygc2VsZWN0ZWQgY2hhcnQgZWxlbWVudHMgb24gbW91c2VvdmVyIHdpbGwgYmUgZGlzYWJsZWRcbiogICAgICAgZGVmYXVsdHMgdG8gZmFsc2UgKGhpZ2hsaWdodHMgZW5hYmxlZClcbiogICBoaWdobGlnaHRMaWdodGVuIC0gRmFjdG9yIHRvIGxpZ2h0ZW4vZGFya2VuIGhpZ2hsaWdodGVkIGNoYXJ0IHZhbHVlcyBieSAtIERlZmF1bHRzIHRvIDEuNCBmb3IgYSA0MCUgaW5jcmVhc2VcbiogICB0b29sdGlwQ29udGFpbmVyIC0gU3BlY2lmeSB3aGljaCBET00gZWxlbWVudCB0aGUgdG9vbHRpcCBzaG91bGQgYmUgcmVuZGVyZWQgaW50byAtIGRlZmF1bHRzIHRvIGRvY3VtZW50LmJvZHlcbiogICB0b29sdGlwQ2xhc3NuYW1lIC0gT3B0aW9uYWwgQ1NTIGNsYXNzbmFtZSB0byBhcHBseSB0byB0b29sdGlwcyAtIElmIG5vdCBzcGVjaWZpZWQgdGhlbiBhIGRlZmF1bHQgc3R5bGUgd2lsbCBiZSBhcHBsaWVkXG4qICAgdG9vbHRpcE9mZnNldFggLSBIb3cgbWFueSBwaXhlbHMgYXdheSBmcm9tIHRoZSBtb3VzZSBwb2ludGVyIHRvIHJlbmRlciB0aGUgdG9vbHRpcCBvbiB0aGUgWCBheGlzXG4qICAgdG9vbHRpcE9mZnNldFkgLSBIb3cgbWFueSBwaXhlbHMgYXdheSBmcm9tIHRoZSBtb3VzZSBwb2ludGVyIHRvIHJlbmRlciB0aGUgdG9vbHRpcCBvbiB0aGUgciBheGlzXG4qICAgdG9vbHRpcEZvcm1hdHRlciAgLSBPcHRpb25hbCBjYWxsYmFjayB0aGF0IGFsbG93cyB5b3UgdG8gb3ZlcnJpZGUgdGhlIEhUTUwgZGlzcGxheWVkIGluIHRoZSB0b29sdGlwXG4qICAgICAgIGNhbGxiYWNrIGlzIGdpdmVuIGFyZ3VtZW50cyBvZiAoc3BhcmtsaW5lLCBvcHRpb25zLCBmaWVsZHMpXG4qICAgdG9vbHRpcENoYXJ0VGl0bGUgLSBJZiBzcGVjaWZpZWQgdGhlbiB0aGUgdG9vbHRpcCB1c2VzIHRoZSBzdHJpbmcgc3BlY2lmaWVkIGJ5IHRoaXMgc2V0dGluZyBhcyBhIHRpdGxlXG4qICAgdG9vbHRpcEZvcm1hdCAtIEEgZm9ybWF0IHN0cmluZyBvciBTUEZvcm1hdCBvYmplY3QgIChvciBhbiBhcnJheSB0aGVyZW9mIGZvciBtdWx0aXBsZSBlbnRyaWVzKVxuKiAgICAgICB0byBjb250cm9sIHRoZSBmb3JtYXQgb2YgdGhlIHRvb2x0aXBcbiogICB0b29sdGlwUHJlZml4IC0gQSBzdHJpbmcgdG8gcHJlcGVuZCB0byBlYWNoIGZpZWxkIGRpc3BsYXllZCBpbiBhIHRvb2x0aXBcbiogICB0b29sdGlwU3VmZml4IC0gQSBzdHJpbmcgdG8gYXBwZW5kIHRvIGVhY2ggZmllbGQgZGlzcGxheWVkIGluIGEgdG9vbHRpcFxuKiAgIHRvb2x0aXBTa2lwTnVsbCAtIElmIHRydWUgdGhlbiBudWxsIHZhbHVlcyB3aWxsIG5vdCBoYXZlIGEgdG9vbHRpcCBkaXNwbGF5ZWQgKGRlZmF1bHRzIHRvIHRydWUpXG4qICAgdG9vbHRpcFZhbHVlTG9va3VwcyAtIEFuIG9iamVjdCBvciByYW5nZSBtYXAgdG8gbWFwIGZpZWxkIHZhbHVlcyB0byB0b29sdGlwIHN0cmluZ3NcbiogICAgICAgKGVnLiB0byBtYXAgLTEgdG8gXCJMb3N0XCIsIDAgdG8gXCJEcmF3XCIsIGFuZCAxIHRvIFwiV2luXCIpXG4qICAgbnVtYmVyRm9ybWF0dGVyIC0gT3B0aW9uYWwgY2FsbGJhY2sgZm9yIGZvcm1hdHRpbmcgbnVtYmVycyBpbiB0b29sdGlwc1xuKiAgIG51bWJlckRpZ2l0R3JvdXBTZXAgLSBDaGFyYWN0ZXIgdG8gdXNlIGZvciBncm91cCBzZXBhcmF0b3IgaW4gbnVtYmVycyBcIjEsMjM0XCIgLSBEZWZhdWx0cyB0byBcIixcIlxuKiAgIG51bWJlckRlY2ltYWxNYXJrIC0gQ2hhcmFjdGVyIHRvIHVzZSBmb3IgdGhlIGRlY2ltYWwgcG9pbnQgd2hlbiBmb3JtYXR0aW5nIG51bWJlcnMgLSBEZWZhdWx0cyB0byBcIi5cIlxuKiAgIG51bWJlckRpZ2l0R3JvdXBDb3VudCAtIE51bWJlciBvZiBkaWdpdHMgYmV0d2VlbiBncm91cCBzZXBhcmF0b3IgLSBEZWZhdWx0cyB0byAzXG4qXG4qIFRoZXJlIGFyZSA3IHR5cGVzIG9mIHNwYXJrbGluZSwgc2VsZWN0ZWQgYnkgc3VwcGx5aW5nIGEgXCJ0eXBlXCIgb3B0aW9uIG9mICdsaW5lJyAoZGVmYXVsdCksXG4qICdiYXInLCAndHJpc3RhdGUnLCAnYnVsbGV0JywgJ2Rpc2NyZXRlJywgJ3BpZScgb3IgJ2JveCdcbiogICAgbGluZSAtIExpbmUgY2hhcnQuICBPcHRpb25zOlxuKiAgICAgICBzcG90Q29sb3IgLSBTZXQgdG8gJycgdG8gbm90IGVuZCBlYWNoIGxpbmUgaW4gYSBjaXJjdWxhciBzcG90XG4qICAgICAgIG1pblNwb3RDb2xvciAtIElmIHNldCwgY29sb3Igb2Ygc3BvdCBhdCBtaW5pbXVtIHZhbHVlXG4qICAgICAgIG1heFNwb3RDb2xvciAtIElmIHNldCwgY29sb3Igb2Ygc3BvdCBhdCBtYXhpbXVtIHZhbHVlXG4qICAgICAgIHNwb3RSYWRpdXMgLSBSYWRpdXMgaW4gcGl4ZWxzXG4qICAgICAgIGxpbmVXaWR0aCAtIFdpZHRoIG9mIGxpbmUgaW4gcGl4ZWxzXG4qICAgICAgIG5vcm1hbFJhbmdlTWluXG4qICAgICAgIG5vcm1hbFJhbmdlTWF4IC0gSWYgc2V0IGRyYXdzIGEgZmlsbGVkIGhvcml6b250YWwgYmFyIGJldHdlZW4gdGhlc2UgdHdvIHZhbHVlcyBtYXJraW5nIHRoZSBcIm5vcm1hbFwiXG4qICAgICAgICAgICAgICAgICAgICAgIG9yIGV4cGVjdGVkIHJhbmdlIG9mIHZhbHVlc1xuKiAgICAgICBub3JtYWxSYW5nZUNvbG9yIC0gQ29sb3IgdG8gdXNlIGZvciB0aGUgYWJvdmUgYmFyXG4qICAgICAgIGRyYXdOb3JtYWxPblRvcCAtIERyYXcgdGhlIG5vcm1hbCByYW5nZSBhYm92ZSB0aGUgY2hhcnQgZmlsbCBjb2xvciBpZiB0cnVlXG4qICAgICAgIGRlZmF1bHRQaXhlbHNQZXJWYWx1ZSAtIERlZmF1bHRzIHRvIDMgcGl4ZWxzIG9mIHdpZHRoIGZvciBlYWNoIHZhbHVlIGluIHRoZSBjaGFydFxuKiAgICAgICBoaWdobGlnaHRTcG90Q29sb3IgLSBUaGUgY29sb3IgdG8gdXNlIGZvciBkcmF3aW5nIGEgaGlnaGxpZ2h0IHNwb3Qgb24gbW91c2VvdmVyIC0gU2V0IHRvIG51bGwgdG8gZGlzYWJsZVxuKiAgICAgICBoaWdobGlnaHRMaW5lQ29sb3IgLSBUaGUgY29sb3IgdG8gdXNlIGZvciBkcmF3aW5nIGEgaGlnaGxpZ2h0IGxpbmUgb24gbW91c2VvdmVyIC0gU2V0IHRvIG51bGwgdG8gZGlzYWJsZVxuKiAgICAgICB2YWx1ZVNwb3RzIC0gU3BlY2lmeSB3aGljaCBwb2ludHMgdG8gZHJhdyBzcG90cyBvbiwgYW5kIGluIHdoaWNoIGNvbG9yLiAgQWNjZXB0cyBhIHJhbmdlIG1hcFxuKlxuKiAgIGJhciAtIEJhciBjaGFydC4gIE9wdGlvbnM6XG4qICAgICAgIGJhckNvbG9yIC0gQ29sb3Igb2YgYmFycyBmb3IgcG9zdGl2ZSB2YWx1ZXNcbiogICAgICAgbmVnQmFyQ29sb3IgLSBDb2xvciBvZiBiYXJzIGZvciBuZWdhdGl2ZSB2YWx1ZXNcbiogICAgICAgemVyb0NvbG9yIC0gQ29sb3Igb2YgYmFycyB3aXRoIHplcm8gdmFsdWVzXG4qICAgICAgIG51bGxDb2xvciAtIENvbG9yIG9mIGJhcnMgd2l0aCBudWxsIHZhbHVlcyAtIERlZmF1bHRzIHRvIG9taXR0aW5nIHRoZSBiYXIgZW50aXJlbHlcbiogICAgICAgYmFyV2lkdGggLSBXaWR0aCBvZiBiYXJzIGluIHBpeGVsc1xuKiAgICAgICBjb2xvck1hcCAtIE9wdGlvbmFsIG1hcHBuaWcgb2YgdmFsdWVzIHRvIGNvbG9ycyB0byBvdmVycmlkZSB0aGUgKkJhckNvbG9yIHZhbHVlcyBhYm92ZVxuKiAgICAgICAgICAgICAgICAgIGNhbiBiZSBhbiBBcnJheSBvZiB2YWx1ZXMgdG8gY29udHJvbCB0aGUgY29sb3Igb2YgaW5kaXZpZHVhbCBiYXJzIG9yIGEgcmFuZ2UgbWFwXG4qICAgICAgICAgICAgICAgICAgdG8gc3BlY2lmeSBjb2xvcnMgZm9yIGluZGl2aWR1YWwgcmFuZ2VzIG9mIHZhbHVlc1xuKiAgICAgICBiYXJTcGFjaW5nIC0gR2FwIGJldHdlZW4gYmFycyBpbiBwaXhlbHNcbiogICAgICAgemVyb0F4aXMgLSBDZW50ZXJzIHRoZSB5LWF4aXMgYXJvdW5kIHplcm8gaWYgdHJ1ZVxuKlxuKiAgIHRyaXN0YXRlIC0gQ2hhcnRzIHZhbHVlcyBvZiB3aW4gKD4wKSwgbG9zZSAoPDApIG9yIGRyYXcgKD0wKVxuKiAgICAgICBwb3NCYXJDb2xvciAtIENvbG9yIG9mIHdpbiB2YWx1ZXNcbiogICAgICAgbmVnQmFyQ29sb3IgLSBDb2xvciBvZiBsb3NlIHZhbHVlc1xuKiAgICAgICB6ZXJvQmFyQ29sb3IgLSBDb2xvciBvZiBkcmF3IHZhbHVlc1xuKiAgICAgICBiYXJXaWR0aCAtIFdpZHRoIG9mIGJhcnMgaW4gcGl4ZWxzXG4qICAgICAgIGJhclNwYWNpbmcgLSBHYXAgYmV0d2VlbiBiYXJzIGluIHBpeGVsc1xuKiAgICAgICBjb2xvck1hcCAtIE9wdGlvbmFsIG1hcHBuaWcgb2YgdmFsdWVzIHRvIGNvbG9ycyB0byBvdmVycmlkZSB0aGUgKkJhckNvbG9yIHZhbHVlcyBhYm92ZVxuKiAgICAgICAgICAgICAgICAgIGNhbiBiZSBhbiBBcnJheSBvZiB2YWx1ZXMgdG8gY29udHJvbCB0aGUgY29sb3Igb2YgaW5kaXZpZHVhbCBiYXJzIG9yIGEgcmFuZ2UgbWFwXG4qICAgICAgICAgICAgICAgICAgdG8gc3BlY2lmeSBjb2xvcnMgZm9yIGluZGl2aWR1YWwgcmFuZ2VzIG9mIHZhbHVlc1xuKlxuKiAgIGRpc2NyZXRlIC0gT3B0aW9uczpcbiogICAgICAgbGluZUhlaWdodCAtIEhlaWdodCBvZiBlYWNoIGxpbmUgaW4gcGl4ZWxzIC0gRGVmYXVsdHMgdG8gMzAlIG9mIHRoZSBncmFwaCBoZWlnaHRcbiogICAgICAgdGhlc2hvbGRWYWx1ZSAtIFZhbHVlcyBsZXNzIHRoYW4gdGhpcyB2YWx1ZSB3aWxsIGJlIGRyYXduIHVzaW5nIHRocmVzaG9sZENvbG9yIGluc3RlYWQgb2YgbGluZUNvbG9yXG4qICAgICAgIHRocmVzaG9sZENvbG9yXG4qXG4qICAgYnVsbGV0IC0gVmFsdWVzIGZvciBidWxsZXQgZ3JhcGhzIG1zdXQgYmUgaW4gdGhlIG9yZGVyOiB0YXJnZXQsIHBlcmZvcm1hbmNlLCByYW5nZTEsIHJhbmdlMiwgcmFuZ2UzLCAuLi5cbiogICAgICAgb3B0aW9uczpcbiogICAgICAgdGFyZ2V0Q29sb3IgLSBUaGUgY29sb3Igb2YgdGhlIHZlcnRpY2FsIHRhcmdldCBtYXJrZXJcbiogICAgICAgdGFyZ2V0V2lkdGggLSBUaGUgd2lkdGggb2YgdGhlIHRhcmdldCBtYXJrZXIgaW4gcGl4ZWxzXG4qICAgICAgIHBlcmZvcm1hbmNlQ29sb3IgLSBUaGUgY29sb3Igb2YgdGhlIHBlcmZvcm1hbmNlIG1lYXN1cmUgaG9yaXpvbnRhbCBiYXJcbiogICAgICAgcmFuZ2VDb2xvcnMgLSBDb2xvcnMgdG8gdXNlIGZvciBlYWNoIHF1YWxpdGF0aXZlIHJhbmdlIGJhY2tncm91bmQgY29sb3JcbipcbiogICBwaWUgLSBQaWUgY2hhcnQuIE9wdGlvbnM6XG4qICAgICAgIHNsaWNlQ29sb3JzIC0gQW4gYXJyYXkgb2YgY29sb3JzIHRvIHVzZSBmb3IgcGllIHNsaWNlc1xuKiAgICAgICBvZmZzZXQgLSBBbmdsZSBpbiBkZWdyZWVzIHRvIG9mZnNldCB0aGUgZmlyc3Qgc2xpY2UgLSBUcnkgLTkwIG9yICs5MFxuKiAgICAgICBib3JkZXJXaWR0aCAtIFdpZHRoIG9mIGJvcmRlciB0byBkcmF3IGFyb3VuZCB0aGUgcGllIGNoYXJ0LCBpbiBwaXhlbHMgLSBEZWZhdWx0cyB0byAwIChubyBib3JkZXIpXG4qICAgICAgIGJvcmRlckNvbG9yIC0gQ29sb3IgdG8gdXNlIGZvciB0aGUgcGllIGNoYXJ0IGJvcmRlciAtIERlZmF1bHRzIHRvICMwMDBcbipcbiogICBib3ggLSBCb3ggcGxvdC4gT3B0aW9uczpcbiogICAgICAgcmF3IC0gU2V0IHRvIHRydWUgdG8gc3VwcGx5IHByZS1jb21wdXRlZCBwbG90IHBvaW50cyBhcyB2YWx1ZXNcbiogICAgICAgICAgICAgdmFsdWVzIHNob3VsZCBiZTogbG93X291dGxpZXIsIGxvd193aGlza2VyLCBxMSwgbWVkaWFuLCBxMywgaGlnaF93aGlza2VyLCBoaWdoX291dGxpZXJcbiogICAgICAgICAgICAgV2hlbiBzZXQgdG8gZmFsc2UgeW91IGNhbiBzdXBwbHkgYW55IG51bWJlciBvZiB2YWx1ZXMgYW5kIHRoZSBib3ggcGxvdCB3aWxsXG4qICAgICAgICAgICAgIGJlIGNvbXB1dGVkIGZvciB5b3UuICBEZWZhdWx0IGlzIGZhbHNlLlxuKiAgICAgICBzaG93T3V0bGllcnMgLSBTZXQgdG8gdHJ1ZSAoZGVmYXVsdCkgdG8gZGlzcGxheSBvdXRsaWVycyBhcyBjaXJjbGVzXG4qICAgICAgIG91dGxpZXJJUVIgLSBJbnRlcnF1YXJ0aWxlIHJhbmdlIHVzZWQgdG8gZGV0ZXJtaW5lIG91dGxpZXJzLiAgRGVmYXVsdCAxLjVcbiogICAgICAgYm94TGluZUNvbG9yIC0gT3V0bGluZSBjb2xvciBvZiB0aGUgYm94XG4qICAgICAgIGJveEZpbGxDb2xvciAtIEZpbGwgY29sb3IgZm9yIHRoZSBib3hcbiogICAgICAgd2hpc2tlckNvbG9yIC0gTGluZSBjb2xvciB1c2VkIGZvciB3aGlza2Vyc1xuKiAgICAgICBvdXRsaWVyTGluZUNvbG9yIC0gT3V0bGluZSBjb2xvciBvZiBvdXRsaWVyIGNpcmNsZXNcbiogICAgICAgb3V0bGllckZpbGxDb2xvciAtIEZpbGwgY29sb3Igb2YgdGhlIG91dGxpZXIgY2lyY2xlc1xuKiAgICAgICBzcG90UmFkaXVzIC0gUmFkaXVzIG9mIG91dGxpZXIgY2lyY2xlc1xuKiAgICAgICBtZWRpYW5Db2xvciAtIExpbmUgY29sb3Igb2YgdGhlIG1lZGlhbiBsaW5lXG4qICAgICAgIHRhcmdldCAtIERyYXcgYSB0YXJnZXQgY3Jvc3MgaGFpciBhdCB0aGUgc3VwcGxpZWQgdmFsdWUgKGRlZmF1bHQgdW5kZWZpbmVkKVxuKlxuKlxuKlxuKiAgIEV4YW1wbGVzOlxuKiAgICQoJyNzcGFya2xpbmUxJykuc3BhcmtsaW5lKG15dmFsdWVzLCB7IGxpbmVDb2xvcjogJyNmMDAnLCBmaWxsQ29sb3I6IGZhbHNlIH0pO1xuKiAgICQoJy5iYXJzcGFya3MnKS5zcGFya2xpbmUoJ2h0bWwnLCB7IHR5cGU6J2JhcicsIGhlaWdodDonNDBweCcsIGJhcldpZHRoOjUgfSk7XG4qICAgJCgnI3RyaXN0YXRlJykuc3BhcmtsaW5lKFsxLDEsLTEsMSwwLDAsLTFdLCB7IHR5cGU6J3RyaXN0YXRlJyB9KTpcbiogICAkKCcjZGlzY3JldGUnKS5zcGFya2xpbmUoWzEsMyw0LDUsNSwzLDQsNV0sIHsgdHlwZTonZGlzY3JldGUnIH0pO1xuKiAgICQoJyNidWxsZXQnKS5zcGFya2xpbmUoWzEwLDEyLDEyLDksN10sIHsgdHlwZTonYnVsbGV0JyB9KTtcbiogICAkKCcjcGllJykuc3BhcmtsaW5lKFsxLDEsMl0sIHsgdHlwZToncGllJyB9KTtcbiovXG5cbi8qanNsaW50IHJlZ2V4cDogdHJ1ZSwgYnJvd3NlcjogdHJ1ZSwganF1ZXJ5OiB0cnVlLCB3aGl0ZTogdHJ1ZSwgbm9tZW46IGZhbHNlLCBwbHVzcGx1czogZmFsc2UsIG1heGVycjogNTAwLCBpbmRlbnQ6IDQgKi9cblxuKGZ1bmN0aW9uKGRvY3VtZW50LCBNYXRoLCB1bmRlZmluZWQpIHsgLy8gcGVyZm9ybWFuY2UvbWluaWZpZWQtc2l6ZSBvcHRpbWl6YXRpb25cbihmdW5jdGlvbihmYWN0b3J5KSB7XG4gICAgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgICAgIGRlZmluZShbJ2pxdWVyeSddLCBmYWN0b3J5KTtcbiAgICB9IGVsc2UgaWYgKGpRdWVyeSAmJiAhalF1ZXJ5LmZuLnNwYXJrbGluZSkge1xuICAgICAgICBmYWN0b3J5KGpRdWVyeSk7XG4gICAgfVxufVxuKGZ1bmN0aW9uKCQpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICB2YXIgVU5TRVRfT1BUSU9OID0ge30sXG4gICAgICAgIGdldERlZmF1bHRzLCBjcmVhdGVDbGFzcywgU1BGb3JtYXQsIGNsaXB2YWwsIHF1YXJ0aWxlLCBub3JtYWxpemVWYWx1ZSwgbm9ybWFsaXplVmFsdWVzLFxuICAgICAgICByZW1vdmUsIGlzTnVtYmVyLCBhbGwsIHN1bSwgYWRkQ1NTLCBlbnN1cmVBcnJheSwgZm9ybWF0TnVtYmVyLCBSYW5nZU1hcCxcbiAgICAgICAgTW91c2VIYW5kbGVyLCBUb29sdGlwLCBiYXJIaWdobGlnaHRNaXhpbixcbiAgICAgICAgbGluZSwgYmFyLCB0cmlzdGF0ZSwgZGlzY3JldGUsIGJ1bGxldCwgcGllLCBib3gsIGRlZmF1bHRTdHlsZXMsIGluaXRTdHlsZXMsXG4gICAgICAgIFZTaGFwZSwgVkNhbnZhc19iYXNlLCBWQ2FudmFzX2NhbnZhcywgVkNhbnZhc192bWwsIHBlbmRpbmcsIHNoYXBlQ291bnQgPSAwO1xuXG4gICAgLyoqXG4gICAgICogRGVmYXVsdCBjb25maWd1cmF0aW9uIHNldHRpbmdzXG4gICAgICovXG4gICAgZ2V0RGVmYXVsdHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAvLyBTZXR0aW5ncyBjb21tb24gdG8gbW9zdC9hbGwgY2hhcnQgdHlwZXNcbiAgICAgICAgICAgIGNvbW1vbjoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdsaW5lJyxcbiAgICAgICAgICAgICAgICBsaW5lQ29sb3I6ICcjMDBmJyxcbiAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjY2RmJyxcbiAgICAgICAgICAgICAgICBkZWZhdWx0UGl4ZWxzUGVyVmFsdWU6IDMsXG4gICAgICAgICAgICAgICAgd2lkdGg6ICdhdXRvJyxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6ICdhdXRvJyxcbiAgICAgICAgICAgICAgICBjb21wb3NpdGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHRhZ1ZhbHVlc0F0dHJpYnV0ZTogJ3ZhbHVlcycsXG4gICAgICAgICAgICAgICAgdGFnT3B0aW9uc1ByZWZpeDogJ3NwYXJrJyxcbiAgICAgICAgICAgICAgICBlbmFibGVUYWdPcHRpb25zOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBlbmFibGVIaWdobGlnaHQ6IHRydWUsXG4gICAgICAgICAgICAgICAgaGlnaGxpZ2h0TGlnaHRlbjogMS40LFxuICAgICAgICAgICAgICAgIHRvb2x0aXBTa2lwTnVsbDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB0b29sdGlwUHJlZml4OiAnJyxcbiAgICAgICAgICAgICAgICB0b29sdGlwU3VmZml4OiAnJyxcbiAgICAgICAgICAgICAgICBkaXNhYmxlSGlkZGVuQ2hlY2s6IGZhbHNlLFxuICAgICAgICAgICAgICAgIG51bWJlckZvcm1hdHRlcjogZmFsc2UsXG4gICAgICAgICAgICAgICAgbnVtYmVyRGlnaXRHcm91cENvdW50OiAzLFxuICAgICAgICAgICAgICAgIG51bWJlckRpZ2l0R3JvdXBTZXA6ICcsJyxcbiAgICAgICAgICAgICAgICBudW1iZXJEZWNpbWFsTWFyazogJy4nLFxuICAgICAgICAgICAgICAgIGRpc2FibGVUb29sdGlwczogZmFsc2UsXG4gICAgICAgICAgICAgICAgZGlzYWJsZUludGVyYWN0aW9uOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8vIERlZmF1bHRzIGZvciBsaW5lIGNoYXJ0c1xuICAgICAgICAgICAgbGluZToge1xuICAgICAgICAgICAgICAgIHNwb3RDb2xvcjogJyNmODAnLFxuICAgICAgICAgICAgICAgIGhpZ2hsaWdodFNwb3RDb2xvcjogJyM1ZjUnLFxuICAgICAgICAgICAgICAgIGhpZ2hsaWdodExpbmVDb2xvcjogJyNmMjInLFxuICAgICAgICAgICAgICAgIHNwb3RSYWRpdXM6IDEuNSxcbiAgICAgICAgICAgICAgICBtaW5TcG90Q29sb3I6ICcjZjgwJyxcbiAgICAgICAgICAgICAgICBtYXhTcG90Q29sb3I6ICcjZjgwJyxcbiAgICAgICAgICAgICAgICBsaW5lV2lkdGg6IDEsXG4gICAgICAgICAgICAgICAgbm9ybWFsUmFuZ2VNaW46IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBub3JtYWxSYW5nZU1heDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIG5vcm1hbFJhbmdlQ29sb3I6ICcjY2NjJyxcbiAgICAgICAgICAgICAgICBkcmF3Tm9ybWFsT25Ub3A6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGNoYXJ0UmFuZ2VNaW46IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBjaGFydFJhbmdlTWF4OiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgY2hhcnRSYW5nZU1pblg6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBjaGFydFJhbmdlTWF4WDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIHRvb2x0aXBGb3JtYXQ6IG5ldyBTUEZvcm1hdCgnPHNwYW4gc3R5bGU9XCJjb2xvcjoge3tjb2xvcn19XCI+JiM5Njc5Ozwvc3Bhbj4ge3twcmVmaXh9fXt7eX19e3tzdWZmaXh9fScpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLy8gRGVmYXVsdHMgZm9yIGJhciBjaGFydHNcbiAgICAgICAgICAgIGJhcjoge1xuICAgICAgICAgICAgICAgIGJhckNvbG9yOiAnIzMzNjZjYycsXG4gICAgICAgICAgICAgICAgbmVnQmFyQ29sb3I6ICcjZjQ0JyxcbiAgICAgICAgICAgICAgICBzdGFja2VkQmFyQ29sb3I6IFsnIzMzNjZjYycsICcjZGMzOTEyJywgJyNmZjk5MDAnLCAnIzEwOTYxOCcsICcjNjZhYTAwJyxcbiAgICAgICAgICAgICAgICAgICAgJyNkZDQ0NzcnLCAnIzAwOTljNicsICcjOTkwMDk5J10sXG4gICAgICAgICAgICAgICAgemVyb0NvbG9yOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgbnVsbENvbG9yOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgemVyb0F4aXM6IHRydWUsXG4gICAgICAgICAgICAgICAgYmFyV2lkdGg6IDQsXG4gICAgICAgICAgICAgICAgYmFyU3BhY2luZzogMSxcbiAgICAgICAgICAgICAgICBjaGFydFJhbmdlTWF4OiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgY2hhcnRSYW5nZU1pbjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIGNoYXJ0UmFuZ2VDbGlwOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBjb2xvck1hcDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIHRvb2x0aXBGb3JtYXQ6IG5ldyBTUEZvcm1hdCgnPHNwYW4gc3R5bGU9XCJjb2xvcjoge3tjb2xvcn19XCI+JiM5Njc5Ozwvc3Bhbj4ge3twcmVmaXh9fXt7dmFsdWV9fXt7c3VmZml4fX0nKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8vIERlZmF1bHRzIGZvciB0cmlzdGF0ZSBjaGFydHNcbiAgICAgICAgICAgIHRyaXN0YXRlOiB7XG4gICAgICAgICAgICAgICAgYmFyV2lkdGg6IDQsXG4gICAgICAgICAgICAgICAgYmFyU3BhY2luZzogMSxcbiAgICAgICAgICAgICAgICBwb3NCYXJDb2xvcjogJyM2ZjYnLFxuICAgICAgICAgICAgICAgIG5lZ0JhckNvbG9yOiAnI2Y0NCcsXG4gICAgICAgICAgICAgICAgemVyb0JhckNvbG9yOiAnIzk5OScsXG4gICAgICAgICAgICAgICAgY29sb3JNYXA6IHt9LFxuICAgICAgICAgICAgICAgIHRvb2x0aXBGb3JtYXQ6IG5ldyBTUEZvcm1hdCgnPHNwYW4gc3R5bGU9XCJjb2xvcjoge3tjb2xvcn19XCI+JiM5Njc5Ozwvc3Bhbj4ge3t2YWx1ZTptYXB9fScpLFxuICAgICAgICAgICAgICAgIHRvb2x0aXBWYWx1ZUxvb2t1cHM6IHsgbWFwOiB7ICctMSc6ICdMb3NzJywgJzAnOiAnRHJhdycsICcxJzogJ1dpbicgfSB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLy8gRGVmYXVsdHMgZm9yIGRpc2NyZXRlIGNoYXJ0c1xuICAgICAgICAgICAgZGlzY3JldGU6IHtcbiAgICAgICAgICAgICAgICBsaW5lSGVpZ2h0OiAnYXV0bycsXG4gICAgICAgICAgICAgICAgdGhyZXNob2xkQ29sb3I6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICB0aHJlc2hvbGRWYWx1ZTogMCxcbiAgICAgICAgICAgICAgICBjaGFydFJhbmdlTWF4OiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgY2hhcnRSYW5nZU1pbjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIGNoYXJ0UmFuZ2VDbGlwOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB0b29sdGlwRm9ybWF0OiBuZXcgU1BGb3JtYXQoJ3t7cHJlZml4fX17e3ZhbHVlfX17e3N1ZmZpeH19JylcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvLyBEZWZhdWx0cyBmb3IgYnVsbGV0IGNoYXJ0c1xuICAgICAgICAgICAgYnVsbGV0OiB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0Q29sb3I6ICcjZjMzJyxcbiAgICAgICAgICAgICAgICB0YXJnZXRXaWR0aDogMywgLy8gd2lkdGggb2YgdGhlIHRhcmdldCBiYXIgaW4gcGl4ZWxzXG4gICAgICAgICAgICAgICAgcGVyZm9ybWFuY2VDb2xvcjogJyMzM2YnLFxuICAgICAgICAgICAgICAgIHJhbmdlQ29sb3JzOiBbJyNkM2RhZmUnLCAnI2E4YjZmZicsICcjN2Y5NGZmJ10sXG4gICAgICAgICAgICAgICAgYmFzZTogdW5kZWZpbmVkLCAvLyBzZXQgdGhpcyB0byBhIG51bWJlciB0byBjaGFuZ2UgdGhlIGJhc2Ugc3RhcnQgbnVtYmVyXG4gICAgICAgICAgICAgICAgdG9vbHRpcEZvcm1hdDogbmV3IFNQRm9ybWF0KCd7e2ZpZWxka2V5OmZpZWxkc319IC0ge3t2YWx1ZX19JyksXG4gICAgICAgICAgICAgICAgdG9vbHRpcFZhbHVlTG9va3VwczogeyBmaWVsZHM6IHtyOiAnUmFuZ2UnLCBwOiAnUGVyZm9ybWFuY2UnLCB0OiAnVGFyZ2V0J30gfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8vIERlZmF1bHRzIGZvciBwaWUgY2hhcnRzXG4gICAgICAgICAgICBwaWU6IHtcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IDAsXG4gICAgICAgICAgICAgICAgc2xpY2VDb2xvcnM6IFsnIzMzNjZjYycsICcjZGMzOTEyJywgJyNmZjk5MDAnLCAnIzEwOTYxOCcsICcjNjZhYTAwJyxcbiAgICAgICAgICAgICAgICAgICAgJyNkZDQ0NzcnLCAnIzAwOTljNicsICcjOTkwMDk5J10sXG4gICAgICAgICAgICAgICAgYm9yZGVyV2lkdGg6IDAsXG4gICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6ICcjMDAwJyxcbiAgICAgICAgICAgICAgICB0b29sdGlwRm9ybWF0OiBuZXcgU1BGb3JtYXQoJzxzcGFuIHN0eWxlPVwiY29sb3I6IHt7Y29sb3J9fVwiPiYjOTY3OTs8L3NwYW4+IHt7dmFsdWV9fSAoe3twZXJjZW50LjF9fSUpJylcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvLyBEZWZhdWx0cyBmb3IgYm94IHBsb3RzXG4gICAgICAgICAgICBib3g6IHtcbiAgICAgICAgICAgICAgICByYXc6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGJveExpbmVDb2xvcjogJyMwMDAnLFxuICAgICAgICAgICAgICAgIGJveEZpbGxDb2xvcjogJyNjZGYnLFxuICAgICAgICAgICAgICAgIHdoaXNrZXJDb2xvcjogJyMwMDAnLFxuICAgICAgICAgICAgICAgIG91dGxpZXJMaW5lQ29sb3I6ICcjMzMzJyxcbiAgICAgICAgICAgICAgICBvdXRsaWVyRmlsbENvbG9yOiAnI2ZmZicsXG4gICAgICAgICAgICAgICAgbWVkaWFuQ29sb3I6ICcjZjAwJyxcbiAgICAgICAgICAgICAgICBzaG93T3V0bGllcnM6IHRydWUsXG4gICAgICAgICAgICAgICAgb3V0bGllcklRUjogMS41LFxuICAgICAgICAgICAgICAgIHNwb3RSYWRpdXM6IDEuNSxcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICB0YXJnZXRDb2xvcjogJyM0YTInLFxuICAgICAgICAgICAgICAgIGNoYXJ0UmFuZ2VNYXg6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBjaGFydFJhbmdlTWluOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgdG9vbHRpcEZvcm1hdDogbmV3IFNQRm9ybWF0KCd7e2ZpZWxkOmZpZWxkc319OiB7e3ZhbHVlfX0nKSxcbiAgICAgICAgICAgICAgICB0b29sdGlwRm9ybWF0RmllbGRsaXN0S2V5OiAnZmllbGQnLFxuICAgICAgICAgICAgICAgIHRvb2x0aXBWYWx1ZUxvb2t1cHM6IHsgZmllbGRzOiB7IGxxOiAnTG93ZXIgUXVhcnRpbGUnLCBtZWQ6ICdNZWRpYW4nLFxuICAgICAgICAgICAgICAgICAgICB1cTogJ1VwcGVyIFF1YXJ0aWxlJywgbG86ICdMZWZ0IE91dGxpZXInLCBybzogJ1JpZ2h0IE91dGxpZXInLFxuICAgICAgICAgICAgICAgICAgICBsdzogJ0xlZnQgV2hpc2tlcicsIHJ3OiAnUmlnaHQgV2hpc2tlcid9IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9O1xuXG4gICAgLy8gWW91IGNhbiBoYXZlIHRvb2x0aXBzIHVzZSBhIGNzcyBjbGFzcyBvdGhlciB0aGFuIGpxc3Rvb2x0aXAgYnkgc3BlY2lmeWluZyB0b29sdGlwQ2xhc3NuYW1lXG4gICAgLy8gdG9vbHRpcCBtb2RpZmllZCBieSB3ZXN0aWxpYW46amFtYW5cbiAgICBkZWZhdWx0U3R5bGVzID0gJy5qcXN0b29sdGlwIHsgJyArXG4gICAgICAgICAgICAncG9zaXRpb246IGFic29sdXRlOycgK1xuICAgICAgICAgICAgJ2xlZnQ6IDBweDsnICtcbiAgICAgICAgICAgICd0b3A6IDBweDsnICtcbiAgICAgICAgICAgICdkaXNwbGF5OiBibG9jazsnICtcbiAgICAgICAgICAgICd2aXNpYmlsaXR5OiBoaWRkZW47JyArXG4gICAgICAgICAgICAnYmFja2dyb3VuZDogcmdiKDAsIDAsIDApIHRyYW5zcGFyZW50OycgK1xuICAgICAgICAgICAgJ2JhY2tncm91bmQtY29sb3I6IHJnYmEoMCwwLDAsMC42KTsnICtcbiAgICAgICAgICAgICdmaWx0ZXI6cHJvZ2lkOkRYSW1hZ2VUcmFuc2Zvcm0uTWljcm9zb2Z0LmdyYWRpZW50KHN0YXJ0Q29sb3JzdHI9Izk5MDAwMDAwLCBlbmRDb2xvcnN0cj0jOTkwMDAwMDApOycgK1xuICAgICAgICAgICAgJy1tcy1maWx0ZXI6IFwicHJvZ2lkOkRYSW1hZ2VUcmFuc2Zvcm0uTWljcm9zb2Z0LmdyYWRpZW50KHN0YXJ0Q29sb3JzdHI9Izk5MDAwMDAwLCBlbmRDb2xvcnN0cj0jOTkwMDAwMDApXCI7JyArXG4gICAgICAgICAgICAnY29sb3I6IHdoaXRlOycgK1xuICAgICAgICAgICAgJ2ZvbnQ6IDEwcHggYXJpYWwsIHNhbiBzZXJpZjsnICtcbiAgICAgICAgICAgICd0ZXh0LWFsaWduOiBsZWZ0OycgK1xuICAgICAgICAgICAgJ3doaXRlLXNwYWNlOiBub3dyYXA7JyArXG4gICAgICAgICAgICBcbiAgICAgICAgICAgICdib3JkZXI6IDFweCBzb2xpZCB3aGl0ZTsnICtcbiAgICAgICAgICAgICd6LWluZGV4OiAxMDAwMDsnICtcbiAgICAgICAgICAgICd9JyArXG4gICAgICAgICAgICAnLmpxc2ZpZWxkIHsgJyArXG4gICAgICAgICAgICAnY29sb3I6IHdoaXRlOycgK1xuICAgICAgICAgICAgJ3BhZGRpbmc6IDVweCA1cHggOHB4IDVweDsnICtcbiAgICAgICAgICAgICdmb250OiAxMHB4IGFyaWFsLCBzYW4gc2VyaWY7JyArXG4gICAgICAgICAgICAndGV4dC1hbGlnbjogbGVmdDsnICtcbiAgICAgICAgICAgICd9JztcblxuICAgIC8qKlxuICAgICAqIFV0aWxpdGllc1xuICAgICAqL1xuXG4gICAgY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoLyogW2Jhc2VjbGFzcywgW21peGluLCAuLi5dXSwgZGVmaW5pdGlvbiAqLykge1xuICAgICAgICB2YXIgQ2xhc3MsIGFyZ3M7XG4gICAgICAgIENsYXNzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5pbml0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH07XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgaWYgKGFyZ3VtZW50c1swXSkge1xuICAgICAgICAgICAgICAgIENsYXNzLnByb3RvdHlwZSA9ICQuZXh0ZW5kKG5ldyBhcmd1bWVudHNbMF0oKSwgYXJndW1lbnRzW2FyZ3VtZW50cy5sZW5ndGggLSAxXSk7XG4gICAgICAgICAgICAgICAgQ2xhc3MuX3N1cGVyID0gYXJndW1lbnRzWzBdLnByb3RvdHlwZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgQ2xhc3MucHJvdG90eXBlID0gYXJndW1lbnRzW2FyZ3VtZW50cy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMikge1xuICAgICAgICAgICAgICAgIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEsIC0xKTtcbiAgICAgICAgICAgICAgICBhcmdzLnVuc2hpZnQoQ2xhc3MucHJvdG90eXBlKTtcbiAgICAgICAgICAgICAgICAkLmV4dGVuZC5hcHBseSgkLCBhcmdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIENsYXNzLnByb3RvdHlwZSA9IGFyZ3VtZW50c1swXTtcbiAgICAgICAgfVxuICAgICAgICBDbGFzcy5wcm90b3R5cGUuY2xzID0gQ2xhc3M7XG4gICAgICAgIHJldHVybiBDbGFzcztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogV3JhcHMgYSBmb3JtYXQgc3RyaW5nIGZvciB0b29sdGlwc1xuICAgICAqIHt7eH19XG4gICAgICoge3t4LjJ9XG4gICAgICoge3t4Om1vbnRoc319XG4gICAgICovXG4gICAgJC5TUEZvcm1hdENsYXNzID0gU1BGb3JtYXQgPSBjcmVhdGVDbGFzcyh7XG4gICAgICAgIGZyZTogL1xce1xceyhbXFx3Ll0rPykoOiguKz8pKT9cXH1cXH0vZyxcbiAgICAgICAgcHJlY3JlOiAvKFxcdyspXFwuKFxcZCspLyxcblxuICAgICAgICBpbml0OiBmdW5jdGlvbiAoZm9ybWF0LCBmY2xhc3MpIHtcbiAgICAgICAgICAgIHRoaXMuZm9ybWF0ID0gZm9ybWF0O1xuICAgICAgICAgICAgdGhpcy5mY2xhc3MgPSBmY2xhc3M7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVuZGVyOiBmdW5jdGlvbiAoZmllbGRzZXQsIGxvb2t1cHMsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcyxcbiAgICAgICAgICAgICAgICBmaWVsZHMgPSBmaWVsZHNldCxcbiAgICAgICAgICAgICAgICBtYXRjaCwgdG9rZW4sIGxvb2t1cGtleSwgZmllbGR2YWx1ZSwgcHJlYztcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZvcm1hdC5yZXBsYWNlKHRoaXMuZnJlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGxvb2t1cDtcbiAgICAgICAgICAgICAgICB0b2tlbiA9IGFyZ3VtZW50c1sxXTtcbiAgICAgICAgICAgICAgICBsb29rdXBrZXkgPSBhcmd1bWVudHNbM107XG4gICAgICAgICAgICAgICAgbWF0Y2ggPSBzZWxmLnByZWNyZS5leGVjKHRva2VuKTtcbiAgICAgICAgICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJlYyA9IG1hdGNoWzJdO1xuICAgICAgICAgICAgICAgICAgICB0b2tlbiA9IG1hdGNoWzFdO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHByZWMgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZmllbGR2YWx1ZSA9IGZpZWxkc1t0b2tlbl07XG4gICAgICAgICAgICAgICAgaWYgKGZpZWxkdmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChsb29rdXBrZXkgJiYgbG9va3VwcyAmJiBsb29rdXBzW2xvb2t1cGtleV0pIHtcbiAgICAgICAgICAgICAgICAgICAgbG9va3VwID0gbG9va3Vwc1tsb29rdXBrZXldO1xuICAgICAgICAgICAgICAgICAgICBpZiAobG9va3VwLmdldCkgeyAvLyBSYW5nZU1hcFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxvb2t1cHNbbG9va3Vwa2V5XS5nZXQoZmllbGR2YWx1ZSkgfHwgZmllbGR2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBsb29rdXBzW2xvb2t1cGtleV1bZmllbGR2YWx1ZV0gfHwgZmllbGR2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaXNOdW1iZXIoZmllbGR2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuZ2V0KCdudW1iZXJGb3JtYXR0ZXInKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmllbGR2YWx1ZSA9IG9wdGlvbnMuZ2V0KCdudW1iZXJGb3JtYXR0ZXInKShmaWVsZHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkdmFsdWUgPSBmb3JtYXROdW1iZXIoZmllbGR2YWx1ZSwgcHJlYyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmdldCgnbnVtYmVyRGlnaXRHcm91cENvdW50JyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5nZXQoJ251bWJlckRpZ2l0R3JvdXBTZXAnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmdldCgnbnVtYmVyRGVjaW1hbE1hcmsnKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZpZWxkdmFsdWU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gY29udmllbmNlIG1ldGhvZCB0byBhdm9pZCBuZWVkaW5nIHRoZSBuZXcgb3BlcmF0b3JcbiAgICAkLnNwZm9ybWF0ID0gZnVuY3Rpb24oZm9ybWF0LCBmY2xhc3MpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTUEZvcm1hdChmb3JtYXQsIGZjbGFzcyk7XG4gICAgfTtcblxuICAgIGNsaXB2YWwgPSBmdW5jdGlvbiAodmFsLCBtaW4sIG1heCkge1xuICAgICAgICBpZiAodmFsIDwgbWluKSB7XG4gICAgICAgICAgICByZXR1cm4gbWluO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YWwgPiBtYXgpIHtcbiAgICAgICAgICAgIHJldHVybiBtYXg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbDtcbiAgICB9O1xuXG4gICAgcXVhcnRpbGUgPSBmdW5jdGlvbiAodmFsdWVzLCBxKSB7XG4gICAgICAgIHZhciB2bDtcbiAgICAgICAgaWYgKHEgPT09IDIpIHtcbiAgICAgICAgICAgIHZsID0gTWF0aC5mbG9vcih2YWx1ZXMubGVuZ3RoIC8gMik7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWVzLmxlbmd0aCAlIDIgPyB2YWx1ZXNbdmxdIDogKHZhbHVlc1t2bC0xXSArIHZhbHVlc1t2bF0pIC8gMjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZXMubGVuZ3RoICUgMiApIHsgLy8gb2RkXG4gICAgICAgICAgICAgICAgdmwgPSAodmFsdWVzLmxlbmd0aCAqIHEgKyBxKSAvIDQ7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZsICUgMSA/ICh2YWx1ZXNbTWF0aC5mbG9vcih2bCldICsgdmFsdWVzW01hdGguZmxvb3IodmwpIC0gMV0pIC8gMiA6IHZhbHVlc1t2bC0xXTtcbiAgICAgICAgICAgIH0gZWxzZSB7IC8vZXZlblxuICAgICAgICAgICAgICAgIHZsID0gKHZhbHVlcy5sZW5ndGggKiBxICsgMikgLyA0O1xuICAgICAgICAgICAgICAgIHJldHVybiB2bCAlIDEgPyAodmFsdWVzW01hdGguZmxvb3IodmwpXSArIHZhbHVlc1tNYXRoLmZsb29yKHZsKSAtIDFdKSAvIDIgOiAgdmFsdWVzW3ZsLTFdO1xuXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgbm9ybWFsaXplVmFsdWUgPSBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgIHZhciBuZjtcbiAgICAgICAgc3dpdGNoICh2YWwpIHtcbiAgICAgICAgICAgIGNhc2UgJ3VuZGVmaW5lZCc6XG4gICAgICAgICAgICAgICAgdmFsID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbnVsbCc6XG4gICAgICAgICAgICAgICAgdmFsID0gbnVsbDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3RydWUnOlxuICAgICAgICAgICAgICAgIHZhbCA9IHRydWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdmYWxzZSc6XG4gICAgICAgICAgICAgICAgdmFsID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIG5mID0gcGFyc2VGbG9hdCh2YWwpO1xuICAgICAgICAgICAgICAgIGlmICh2YWwgPT0gbmYpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsID0gbmY7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWw7XG4gICAgfTtcblxuICAgIG5vcm1hbGl6ZVZhbHVlcyA9IGZ1bmN0aW9uICh2YWxzKSB7XG4gICAgICAgIHZhciBpLCByZXN1bHQgPSBbXTtcbiAgICAgICAgZm9yIChpID0gdmFscy5sZW5ndGg7IGktLTspIHtcbiAgICAgICAgICAgIHJlc3VsdFtpXSA9IG5vcm1hbGl6ZVZhbHVlKHZhbHNbaV0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgIHJlbW92ZSA9IGZ1bmN0aW9uICh2YWxzLCBmaWx0ZXIpIHtcbiAgICAgICAgdmFyIGksIHZsLCByZXN1bHQgPSBbXTtcbiAgICAgICAgZm9yIChpID0gMCwgdmwgPSB2YWxzLmxlbmd0aDsgaSA8IHZsOyBpKyspIHtcbiAgICAgICAgICAgIGlmICh2YWxzW2ldICE9PSBmaWx0ZXIpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh2YWxzW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICBpc051bWJlciA9IGZ1bmN0aW9uIChudW0pIHtcbiAgICAgICAgcmV0dXJuICFpc05hTihwYXJzZUZsb2F0KG51bSkpICYmIGlzRmluaXRlKG51bSk7XG4gICAgfTtcblxuICAgIGZvcm1hdE51bWJlciA9IGZ1bmN0aW9uIChudW0sIHByZWMsIGdyb3Vwc2l6ZSwgZ3JvdXBzZXAsIGRlY3NlcCkge1xuICAgICAgICB2YXIgcCwgaTtcbiAgICAgICAgbnVtID0gKHByZWMgPT09IGZhbHNlID8gcGFyc2VGbG9hdChudW0pLnRvU3RyaW5nKCkgOiBudW0udG9GaXhlZChwcmVjKSkuc3BsaXQoJycpO1xuICAgICAgICBwID0gKHAgPSAkLmluQXJyYXkoJy4nLCBudW0pKSA8IDAgPyBudW0ubGVuZ3RoIDogcDtcbiAgICAgICAgaWYgKHAgPCBudW0ubGVuZ3RoKSB7XG4gICAgICAgICAgICBudW1bcF0gPSBkZWNzZXA7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChpID0gcCAtIGdyb3Vwc2l6ZTsgaSA+IDA7IGkgLT0gZ3JvdXBzaXplKSB7XG4gICAgICAgICAgICBudW0uc3BsaWNlKGksIDAsIGdyb3Vwc2VwKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVtLmpvaW4oJycpO1xuICAgIH07XG5cbiAgICAvLyBkZXRlcm1pbmUgaWYgYWxsIHZhbHVlcyBvZiBhbiBhcnJheSBtYXRjaCBhIHZhbHVlXG4gICAgLy8gcmV0dXJucyB0cnVlIGlmIHRoZSBhcnJheSBpcyBlbXB0eVxuICAgIGFsbCA9IGZ1bmN0aW9uICh2YWwsIGFyciwgaWdub3JlTnVsbCkge1xuICAgICAgICB2YXIgaTtcbiAgICAgICAgZm9yIChpID0gYXJyLmxlbmd0aDsgaS0tOyApIHtcbiAgICAgICAgICAgIGlmIChpZ25vcmVOdWxsICYmIGFycltpXSA9PT0gbnVsbCkgY29udGludWU7XG4gICAgICAgICAgICBpZiAoYXJyW2ldICE9PSB2YWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcblxuICAgIC8vIHN1bXMgdGhlIG51bWVyaWMgdmFsdWVzIGluIGFuIGFycmF5LCBpZ25vcmluZyBvdGhlciB2YWx1ZXNcbiAgICBzdW0gPSBmdW5jdGlvbiAodmFscykge1xuICAgICAgICB2YXIgdG90YWwgPSAwLCBpO1xuICAgICAgICBmb3IgKGkgPSB2YWxzLmxlbmd0aDsgaS0tOykge1xuICAgICAgICAgICAgdG90YWwgKz0gdHlwZW9mIHZhbHNbaV0gPT09ICdudW1iZXInID8gdmFsc1tpXSA6IDA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRvdGFsO1xuICAgIH07XG5cbiAgICBlbnN1cmVBcnJheSA9IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgcmV0dXJuICQuaXNBcnJheSh2YWwpID8gdmFsIDogW3ZhbF07XG4gICAgfTtcblxuICAgIC8vIGh0dHA6Ly9wYXVsaXJpc2guY29tLzIwMDgvYm9va21hcmtsZXQtaW5qZWN0LW5ldy1jc3MtcnVsZXMvXG4gICAgYWRkQ1NTID0gZnVuY3Rpb24oY3NzKSB7XG4gICAgICAgIHZhciB0YWc7XG4gICAgICAgIC8vaWYgKCdcXHYnID09ICd2JykgLyogaWUgb25seSAqLyB7XG4gICAgICAgIGlmIChkb2N1bWVudC5jcmVhdGVTdHlsZVNoZWV0KSB7XG4gICAgICAgICAgICBkb2N1bWVudC5jcmVhdGVTdHlsZVNoZWV0KCkuY3NzVGV4dCA9IGNzcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRhZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgICAgICAgICB0YWcudHlwZSA9ICd0ZXh0L2Nzcyc7XG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdLmFwcGVuZENoaWxkKHRhZyk7XG4gICAgICAgICAgICB0YWdbKHR5cGVvZiBkb2N1bWVudC5ib2R5LnN0eWxlLldlYmtpdEFwcGVhcmFuY2UgPT0gJ3N0cmluZycpIC8qIHdlYmtpdCBvbmx5ICovID8gJ2lubmVyVGV4dCcgOiAnaW5uZXJIVE1MJ10gPSBjc3M7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gUHJvdmlkZSBhIGNyb3NzLWJyb3dzZXIgaW50ZXJmYWNlIHRvIGEgZmV3IHNpbXBsZSBkcmF3aW5nIHByaW1pdGl2ZXNcbiAgICAkLmZuLnNpbXBsZWRyYXcgPSBmdW5jdGlvbiAod2lkdGgsIGhlaWdodCwgdXNlRXhpc3RpbmcsIGludGVyYWN0KSB7XG4gICAgICAgIHZhciB0YXJnZXQsIG1oYW5kbGVyO1xuICAgICAgICBpZiAodXNlRXhpc3RpbmcgJiYgKHRhcmdldCA9IHRoaXMuZGF0YSgnX2pxc192Y2FudmFzJykpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCQuZm4uc3BhcmtsaW5lLmNhbnZhcyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIC8vIFdlJ3ZlIGFscmVhZHkgZGV0ZXJtaW5lZCB0aGF0IG5laXRoZXIgQ2FudmFzIG5vciBWTUwgYXJlIGF2YWlsYWJsZVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoJC5mbi5zcGFya2xpbmUuY2FudmFzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIE5vIGZ1bmN0aW9uIGRlZmluZWQgeWV0IC0tIG5lZWQgdG8gc2VlIGlmIHdlIHN1cHBvcnQgQ2FudmFzIG9yIFZNTFxuICAgICAgICAgICAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgICAgICAgICBpZiAoISEoZWwuZ2V0Q29udGV4dCAmJiBlbC5nZXRDb250ZXh0KCcyZCcpKSkge1xuICAgICAgICAgICAgICAgIC8vIENhbnZhcyBpcyBhdmFpbGFibGVcbiAgICAgICAgICAgICAgICAkLmZuLnNwYXJrbGluZS5jYW52YXMgPSBmdW5jdGlvbih3aWR0aCwgaGVpZ2h0LCB0YXJnZXQsIGludGVyYWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgVkNhbnZhc19jYW52YXMod2lkdGgsIGhlaWdodCwgdGFyZ2V0LCBpbnRlcmFjdCk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZG9jdW1lbnQubmFtZXNwYWNlcyAmJiAhZG9jdW1lbnQubmFtZXNwYWNlcy52KSB7XG4gICAgICAgICAgICAgICAgLy8gVk1MIGlzIGF2YWlsYWJsZVxuICAgICAgICAgICAgICAgIGRvY3VtZW50Lm5hbWVzcGFjZXMuYWRkKCd2JywgJ3VybjpzY2hlbWFzLW1pY3Jvc29mdC1jb206dm1sJywgJyNkZWZhdWx0I1ZNTCcpO1xuICAgICAgICAgICAgICAgICQuZm4uc3BhcmtsaW5lLmNhbnZhcyA9IGZ1bmN0aW9uKHdpZHRoLCBoZWlnaHQsIHRhcmdldCwgaW50ZXJhY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBWQ2FudmFzX3ZtbCh3aWR0aCwgaGVpZ2h0LCB0YXJnZXQpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIE5laXRoZXIgQ2FudmFzIG5vciBWTUwgYXJlIGF2YWlsYWJsZVxuICAgICAgICAgICAgICAgICQuZm4uc3BhcmtsaW5lLmNhbnZhcyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh3aWR0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB3aWR0aCA9ICQodGhpcykuaW5uZXJXaWR0aCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChoZWlnaHQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaGVpZ2h0ID0gJCh0aGlzKS5pbm5lckhlaWdodCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGFyZ2V0ID0gJC5mbi5zcGFya2xpbmUuY2FudmFzKHdpZHRoLCBoZWlnaHQsIHRoaXMsIGludGVyYWN0KTtcblxuICAgICAgICBtaGFuZGxlciA9ICQodGhpcykuZGF0YSgnX2pxc19taGFuZGxlcicpO1xuICAgICAgICBpZiAobWhhbmRsZXIpIHtcbiAgICAgICAgICAgIG1oYW5kbGVyLnJlZ2lzdGVyQ2FudmFzKHRhcmdldCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9O1xuXG4gICAgJC5mbi5jbGVhcmRyYXcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0YXJnZXQgPSB0aGlzLmRhdGEoJ19qcXNfdmNhbnZhcycpO1xuICAgICAgICBpZiAodGFyZ2V0KSB7XG4gICAgICAgICAgICB0YXJnZXQucmVzZXQoKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAkLlJhbmdlTWFwQ2xhc3MgPSBSYW5nZU1hcCA9IGNyZWF0ZUNsYXNzKHtcbiAgICAgICAgaW5pdDogZnVuY3Rpb24gKG1hcCkge1xuICAgICAgICAgICAgdmFyIGtleSwgcmFuZ2UsIHJhbmdlbGlzdCA9IFtdO1xuICAgICAgICAgICAgZm9yIChrZXkgaW4gbWFwKSB7XG4gICAgICAgICAgICAgICAgaWYgKG1hcC5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnICYmIGtleS5pbmRleE9mKCc6JykgPiAtMSkge1xuICAgICAgICAgICAgICAgICAgICByYW5nZSA9IGtleS5zcGxpdCgnOicpO1xuICAgICAgICAgICAgICAgICAgICByYW5nZVswXSA9IHJhbmdlWzBdLmxlbmd0aCA9PT0gMCA/IC1JbmZpbml0eSA6IHBhcnNlRmxvYXQocmFuZ2VbMF0pO1xuICAgICAgICAgICAgICAgICAgICByYW5nZVsxXSA9IHJhbmdlWzFdLmxlbmd0aCA9PT0gMCA/IEluZmluaXR5IDogcGFyc2VGbG9hdChyYW5nZVsxXSk7XG4gICAgICAgICAgICAgICAgICAgIHJhbmdlWzJdID0gbWFwW2tleV07XG4gICAgICAgICAgICAgICAgICAgIHJhbmdlbGlzdC5wdXNoKHJhbmdlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLm1hcCA9IG1hcDtcbiAgICAgICAgICAgIHRoaXMucmFuZ2VsaXN0ID0gcmFuZ2VsaXN0IHx8IGZhbHNlO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgcmFuZ2VsaXN0ID0gdGhpcy5yYW5nZWxpc3QsXG4gICAgICAgICAgICAgICAgaSwgcmFuZ2UsIHJlc3VsdDtcbiAgICAgICAgICAgIGlmICgocmVzdWx0ID0gdGhpcy5tYXBbdmFsdWVdKSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyYW5nZWxpc3QpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSByYW5nZWxpc3QubGVuZ3RoOyBpLS07KSB7XG4gICAgICAgICAgICAgICAgICAgIHJhbmdlID0gcmFuZ2VsaXN0W2ldO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmFuZ2VbMF0gPD0gdmFsdWUgJiYgcmFuZ2VbMV0gPj0gdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByYW5nZVsyXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIENvbnZlbmllbmNlIGZ1bmN0aW9uXG4gICAgJC5yYW5nZV9tYXAgPSBmdW5jdGlvbihtYXApIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSYW5nZU1hcChtYXApO1xuICAgIH07XG5cbiAgICBNb3VzZUhhbmRsZXIgPSBjcmVhdGVDbGFzcyh7XG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uIChlbCwgb3B0aW9ucykge1xuICAgICAgICAgICAgdmFyICRlbCA9ICQoZWwpO1xuICAgICAgICAgICAgdGhpcy4kZWwgPSAkZWw7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50UGFnZVggPSAwO1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50UGFnZVkgPSAwO1xuICAgICAgICAgICAgdGhpcy5lbCA9IGVsO1xuICAgICAgICAgICAgdGhpcy5zcGxpc3QgPSBbXTtcbiAgICAgICAgICAgIHRoaXMudG9vbHRpcCA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLm92ZXIgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuZGlzcGxheVRvb2x0aXBzID0gIW9wdGlvbnMuZ2V0KCdkaXNhYmxlVG9vbHRpcHMnKTtcbiAgICAgICAgICAgIHRoaXMuaGlnaGxpZ2h0RW5hYmxlZCA9ICFvcHRpb25zLmdldCgnZGlzYWJsZUhpZ2hsaWdodCcpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlZ2lzdGVyU3BhcmtsaW5lOiBmdW5jdGlvbiAoc3ApIHtcbiAgICAgICAgICAgIHRoaXMuc3BsaXN0LnB1c2goc3ApO1xuICAgICAgICAgICAgaWYgKHRoaXMub3Zlcikge1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlRGlzcGxheSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIHJlZ2lzdGVyQ2FudmFzOiBmdW5jdGlvbiAoY2FudmFzKSB7XG4gICAgICAgICAgICB2YXIgJGNhbnZhcyA9ICQoY2FudmFzLmNhbnZhcyk7XG4gICAgICAgICAgICB0aGlzLmNhbnZhcyA9IGNhbnZhcztcbiAgICAgICAgICAgIHRoaXMuJGNhbnZhcyA9ICRjYW52YXM7XG4gICAgICAgICAgICAkY2FudmFzLm1vdXNlZW50ZXIoJC5wcm94eSh0aGlzLm1vdXNlZW50ZXIsIHRoaXMpKTtcbiAgICAgICAgICAgICRjYW52YXMubW91c2VsZWF2ZSgkLnByb3h5KHRoaXMubW91c2VsZWF2ZSwgdGhpcykpO1xuICAgICAgICAgICAgJGNhbnZhcy5jbGljaygkLnByb3h5KHRoaXMubW91c2VjbGljaywgdGhpcykpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlc2V0OiBmdW5jdGlvbiAocmVtb3ZlVG9vbHRpcCkge1xuICAgICAgICAgICAgdGhpcy5zcGxpc3QgPSBbXTtcbiAgICAgICAgICAgIGlmICh0aGlzLnRvb2x0aXAgJiYgcmVtb3ZlVG9vbHRpcCkge1xuICAgICAgICAgICAgICAgIHRoaXMudG9vbHRpcC5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnRvb2x0aXAgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgbW91c2VjbGljazogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIHZhciBjbGlja0V2ZW50ID0gJC5FdmVudCgnc3BhcmtsaW5lQ2xpY2snKTtcbiAgICAgICAgICAgIGNsaWNrRXZlbnQub3JpZ2luYWxFdmVudCA9IGU7XG4gICAgICAgICAgICBjbGlja0V2ZW50LnNwYXJrbGluZXMgPSB0aGlzLnNwbGlzdDtcbiAgICAgICAgICAgIHRoaXMuJGVsLnRyaWdnZXIoY2xpY2tFdmVudCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgbW91c2VlbnRlcjogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICQoZG9jdW1lbnQuYm9keSkudW5iaW5kKCdtb3VzZW1vdmUuanFzJyk7XG4gICAgICAgICAgICAkKGRvY3VtZW50LmJvZHkpLmJpbmQoJ21vdXNlbW92ZS5qcXMnLCAkLnByb3h5KHRoaXMubW91c2Vtb3ZlLCB0aGlzKSk7XG4gICAgICAgICAgICB0aGlzLm92ZXIgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50UGFnZVggPSBlLnBhZ2VYO1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50UGFnZVkgPSBlLnBhZ2VZO1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50RWwgPSBlLnRhcmdldDtcbiAgICAgICAgICAgIGlmICghdGhpcy50b29sdGlwICYmIHRoaXMuZGlzcGxheVRvb2x0aXBzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50b29sdGlwID0gbmV3IFRvb2x0aXAodGhpcy5vcHRpb25zKTtcbiAgICAgICAgICAgICAgICB0aGlzLnRvb2x0aXAudXBkYXRlUG9zaXRpb24oZS5wYWdlWCwgZS5wYWdlWSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZURpc3BsYXkoKTtcbiAgICAgICAgfSxcblxuICAgICAgICBtb3VzZWxlYXZlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAkKGRvY3VtZW50LmJvZHkpLnVuYmluZCgnbW91c2Vtb3ZlLmpxcycpO1xuICAgICAgICAgICAgdmFyIHNwbGlzdCA9IHRoaXMuc3BsaXN0LFxuICAgICAgICAgICAgICAgICBzcGNvdW50ID0gc3BsaXN0Lmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgbmVlZHNSZWZyZXNoID0gZmFsc2UsXG4gICAgICAgICAgICAgICAgIHNwLCBpO1xuICAgICAgICAgICAgdGhpcy5vdmVyID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRFbCA9IG51bGw7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnRvb2x0aXApIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRvb2x0aXAucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy50b29sdGlwID0gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHNwY291bnQ7IGkrKykge1xuICAgICAgICAgICAgICAgIHNwID0gc3BsaXN0W2ldO1xuICAgICAgICAgICAgICAgIGlmIChzcC5jbGVhclJlZ2lvbkhpZ2hsaWdodCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIG5lZWRzUmVmcmVzaCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAobmVlZHNSZWZyZXNoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jYW52YXMucmVuZGVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgbW91c2Vtb3ZlOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50UGFnZVggPSBlLnBhZ2VYO1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50UGFnZVkgPSBlLnBhZ2VZO1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50RWwgPSBlLnRhcmdldDtcbiAgICAgICAgICAgIGlmICh0aGlzLnRvb2x0aXApIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRvb2x0aXAudXBkYXRlUG9zaXRpb24oZS5wYWdlWCwgZS5wYWdlWSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZURpc3BsYXkoKTtcbiAgICAgICAgfSxcblxuICAgICAgICB1cGRhdGVEaXNwbGF5OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgc3BsaXN0ID0gdGhpcy5zcGxpc3QsXG4gICAgICAgICAgICAgICAgIHNwY291bnQgPSBzcGxpc3QubGVuZ3RoLFxuICAgICAgICAgICAgICAgICBuZWVkc1JlZnJlc2ggPSBmYWxzZSxcbiAgICAgICAgICAgICAgICAgb2Zmc2V0ID0gdGhpcy4kY2FudmFzLm9mZnNldCgpLFxuICAgICAgICAgICAgICAgICBsb2NhbFggPSB0aGlzLmN1cnJlbnRQYWdlWCAtIG9mZnNldC5sZWZ0LFxuICAgICAgICAgICAgICAgICBsb2NhbFkgPSB0aGlzLmN1cnJlbnRQYWdlWSAtIG9mZnNldC50b3AsXG4gICAgICAgICAgICAgICAgIHRvb2x0aXBodG1sLCBzcCwgaSwgcmVzdWx0LCBjaGFuZ2VFdmVudDtcbiAgICAgICAgICAgIGlmICghdGhpcy5vdmVyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHNwY291bnQ7IGkrKykge1xuICAgICAgICAgICAgICAgIHNwID0gc3BsaXN0W2ldO1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHNwLnNldFJlZ2lvbkhpZ2hsaWdodCh0aGlzLmN1cnJlbnRFbCwgbG9jYWxYLCBsb2NhbFkpO1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgbmVlZHNSZWZyZXNoID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobmVlZHNSZWZyZXNoKSB7XG4gICAgICAgICAgICAgICAgY2hhbmdlRXZlbnQgPSAkLkV2ZW50KCdzcGFya2xpbmVSZWdpb25DaGFuZ2UnKTtcbiAgICAgICAgICAgICAgICBjaGFuZ2VFdmVudC5zcGFya2xpbmVzID0gdGhpcy5zcGxpc3Q7XG4gICAgICAgICAgICAgICAgdGhpcy4kZWwudHJpZ2dlcihjaGFuZ2VFdmVudCk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudG9vbHRpcCkge1xuICAgICAgICAgICAgICAgICAgICB0b29sdGlwaHRtbCA9ICcnO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgc3Bjb3VudDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzcCA9IHNwbGlzdFtpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvb2x0aXBodG1sICs9IHNwLmdldEN1cnJlbnRSZWdpb25Ub29sdGlwKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy50b29sdGlwLnNldENvbnRlbnQodG9vbHRpcGh0bWwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZGlzYWJsZUhpZ2hsaWdodCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbnZhcy5yZW5kZXIoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocmVzdWx0ID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tb3VzZWxlYXZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcblxuXG4gICAgVG9vbHRpcCA9IGNyZWF0ZUNsYXNzKHtcbiAgICAgICAgc2l6ZVN0eWxlOiAncG9zaXRpb246IHN0YXRpYyAhaW1wb3J0YW50OycgK1xuICAgICAgICAgICAgJ2Rpc3BsYXk6IGJsb2NrICFpbXBvcnRhbnQ7JyArXG4gICAgICAgICAgICAndmlzaWJpbGl0eTogaGlkZGVuICFpbXBvcnRhbnQ7JyArXG4gICAgICAgICAgICAnZmxvYXQ6IGxlZnQgIWltcG9ydGFudDsnLFxuXG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgICAgICB2YXIgdG9vbHRpcENsYXNzbmFtZSA9IG9wdGlvbnMuZ2V0KCd0b29sdGlwQ2xhc3NuYW1lJywgJ2pxc3Rvb2x0aXAnKSxcbiAgICAgICAgICAgICAgICBzaXpldGlwU3R5bGUgPSB0aGlzLnNpemVTdHlsZSxcbiAgICAgICAgICAgICAgICBvZmZzZXQ7XG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lciA9IG9wdGlvbnMuZ2V0KCd0b29sdGlwQ29udGFpbmVyJykgfHwgZG9jdW1lbnQuYm9keTtcbiAgICAgICAgICAgIHRoaXMudG9vbHRpcE9mZnNldFggPSBvcHRpb25zLmdldCgndG9vbHRpcE9mZnNldFgnLCAxMCk7XG4gICAgICAgICAgICB0aGlzLnRvb2x0aXBPZmZzZXRZID0gb3B0aW9ucy5nZXQoJ3Rvb2x0aXBPZmZzZXRZJywgMTIpO1xuICAgICAgICAgICAgLy8gcmVtb3ZlIGFueSBwcmV2aW91cyBsaW5nZXJpbmcgdG9vbHRpcFxuICAgICAgICAgICAgJCgnI2pxc3NpemV0aXAnKS5yZW1vdmUoKTtcbiAgICAgICAgICAgICQoJyNqcXN0b29sdGlwJykucmVtb3ZlKCk7XG4gICAgICAgICAgICB0aGlzLnNpemV0aXAgPSAkKCc8ZGl2Lz4nLCB7XG4gICAgICAgICAgICAgICAgaWQ6ICdqcXNzaXpldGlwJyxcbiAgICAgICAgICAgICAgICBzdHlsZTogc2l6ZXRpcFN0eWxlLFxuICAgICAgICAgICAgICAgICdjbGFzcyc6IHRvb2x0aXBDbGFzc25hbWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy50b29sdGlwID0gJCgnPGRpdi8+Jywge1xuICAgICAgICAgICAgICAgIGlkOiAnanFzdG9vbHRpcCcsXG4gICAgICAgICAgICAgICAgJ2NsYXNzJzogdG9vbHRpcENsYXNzbmFtZVxuICAgICAgICAgICAgfSkuYXBwZW5kVG8odGhpcy5jb250YWluZXIpO1xuICAgICAgICAgICAgLy8gYWNjb3VudCBmb3IgdGhlIGNvbnRhaW5lcidzIGxvY2F0aW9uXG4gICAgICAgICAgICBvZmZzZXQgPSB0aGlzLnRvb2x0aXAub2Zmc2V0KCk7XG4gICAgICAgICAgICB0aGlzLm9mZnNldExlZnQgPSBvZmZzZXQubGVmdDtcbiAgICAgICAgICAgIHRoaXMub2Zmc2V0VG9wID0gb2Zmc2V0LnRvcDtcbiAgICAgICAgICAgIHRoaXMuaGlkZGVuID0gdHJ1ZTtcbiAgICAgICAgICAgICQod2luZG93KS51bmJpbmQoJ3Jlc2l6ZS5qcXMgc2Nyb2xsLmpxcycpO1xuICAgICAgICAgICAgJCh3aW5kb3cpLmJpbmQoJ3Jlc2l6ZS5qcXMgc2Nyb2xsLmpxcycsICQucHJveHkodGhpcy51cGRhdGVXaW5kb3dEaW1zLCB0aGlzKSk7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVdpbmRvd0RpbXMoKTtcbiAgICAgICAgfSxcblxuICAgICAgICB1cGRhdGVXaW5kb3dEaW1zOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLnNjcm9sbFRvcCA9ICQod2luZG93KS5zY3JvbGxUb3AoKTtcbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsTGVmdCA9ICQod2luZG93KS5zY3JvbGxMZWZ0KCk7XG4gICAgICAgICAgICB0aGlzLnNjcm9sbFJpZ2h0ID0gdGhpcy5zY3JvbGxMZWZ0ICsgJCh3aW5kb3cpLndpZHRoKCk7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVBvc2l0aW9uKCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0U2l6ZTogZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAgICAgICAgICAgIHRoaXMuc2l6ZXRpcC5odG1sKGNvbnRlbnQpLmFwcGVuZFRvKHRoaXMuY29udGFpbmVyKTtcbiAgICAgICAgICAgIHRoaXMud2lkdGggPSB0aGlzLnNpemV0aXAud2lkdGgoKSArIDE7XG4gICAgICAgICAgICB0aGlzLmhlaWdodCA9IHRoaXMuc2l6ZXRpcC5oZWlnaHQoKTtcbiAgICAgICAgICAgIHRoaXMuc2l6ZXRpcC5yZW1vdmUoKTtcbiAgICAgICAgfSxcblxuICAgICAgICBzZXRDb250ZW50OiBmdW5jdGlvbiAoY29udGVudCkge1xuICAgICAgICAgICAgaWYgKCFjb250ZW50KSB7XG4gICAgICAgICAgICAgICAgdGhpcy50b29sdGlwLmNzcygndmlzaWJpbGl0eScsICdoaWRkZW4nKTtcbiAgICAgICAgICAgICAgICB0aGlzLmhpZGRlbiA9IHRydWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5nZXRTaXplKGNvbnRlbnQpO1xuICAgICAgICAgICAgdGhpcy50b29sdGlwLmh0bWwoY29udGVudClcbiAgICAgICAgICAgICAgICAuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgJ3dpZHRoJzogdGhpcy53aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgJ2hlaWdodCc6IHRoaXMuaGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAndmlzaWJpbGl0eSc6ICd2aXNpYmxlJ1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKHRoaXMuaGlkZGVuKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5oaWRkZW4gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVBvc2l0aW9uKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgdXBkYXRlUG9zaXRpb246IGZ1bmN0aW9uICh4LCB5KSB7XG4gICAgICAgICAgICBpZiAoeCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubW91c2V4ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB4ID0gdGhpcy5tb3VzZXggLSB0aGlzLm9mZnNldExlZnQ7XG4gICAgICAgICAgICAgICAgeSA9IHRoaXMubW91c2V5IC0gdGhpcy5vZmZzZXRUb3A7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tb3VzZXggPSB4ID0geCAtIHRoaXMub2Zmc2V0TGVmdDtcbiAgICAgICAgICAgICAgICB0aGlzLm1vdXNleSA9IHkgPSB5IC0gdGhpcy5vZmZzZXRUb3A7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXRoaXMuaGVpZ2h0IHx8ICF0aGlzLndpZHRoIHx8IHRoaXMuaGlkZGVuKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB5IC09IHRoaXMuaGVpZ2h0ICsgdGhpcy50b29sdGlwT2Zmc2V0WTtcbiAgICAgICAgICAgIHggKz0gdGhpcy50b29sdGlwT2Zmc2V0WDtcblxuICAgICAgICAgICAgaWYgKHkgPCB0aGlzLnNjcm9sbFRvcCkge1xuICAgICAgICAgICAgICAgIHkgPSB0aGlzLnNjcm9sbFRvcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh4IDwgdGhpcy5zY3JvbGxMZWZ0KSB7XG4gICAgICAgICAgICAgICAgeCA9IHRoaXMuc2Nyb2xsTGVmdDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoeCArIHRoaXMud2lkdGggPiB0aGlzLnNjcm9sbFJpZ2h0KSB7XG4gICAgICAgICAgICAgICAgeCA9IHRoaXMuc2Nyb2xsUmlnaHQgLSB0aGlzLndpZHRoO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnRvb2x0aXAuY3NzKHtcbiAgICAgICAgICAgICAgICAnbGVmdCc6IHgsXG4gICAgICAgICAgICAgICAgJ3RvcCc6IHlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy50b29sdGlwLnJlbW92ZSgpO1xuICAgICAgICAgICAgdGhpcy5zaXpldGlwLnJlbW92ZSgpO1xuICAgICAgICAgICAgdGhpcy5zaXpldGlwID0gdGhpcy50b29sdGlwID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgJCh3aW5kb3cpLnVuYmluZCgncmVzaXplLmpxcyBzY3JvbGwuanFzJyk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGluaXRTdHlsZXMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgYWRkQ1NTKGRlZmF1bHRTdHlsZXMpO1xuICAgIH07XG5cbiAgICAkKGluaXRTdHlsZXMpO1xuXG4gICAgcGVuZGluZyA9IFtdO1xuICAgICQuZm4uc3BhcmtsaW5lID0gZnVuY3Rpb24gKHVzZXJWYWx1ZXMsIHVzZXJPcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSBuZXcgJC5mbi5zcGFya2xpbmUub3B0aW9ucyh0aGlzLCB1c2VyT3B0aW9ucyksXG4gICAgICAgICAgICAgICAgICR0aGlzID0gJCh0aGlzKSxcbiAgICAgICAgICAgICAgICAgcmVuZGVyLCBpO1xuICAgICAgICAgICAgcmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciB2YWx1ZXMsIHdpZHRoLCBoZWlnaHQsIHRtcCwgbWhhbmRsZXIsIHNwLCB2YWxzO1xuICAgICAgICAgICAgICAgIGlmICh1c2VyVmFsdWVzID09PSAnaHRtbCcgfHwgdXNlclZhbHVlcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHMgPSB0aGlzLmdldEF0dHJpYnV0ZShvcHRpb25zLmdldCgndGFnVmFsdWVzQXR0cmlidXRlJykpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodmFscyA9PT0gdW5kZWZpbmVkIHx8IHZhbHMgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHMgPSAkdGhpcy5odG1sKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzID0gdmFscy5yZXBsYWNlKC8oXlxccyo8IS0tKXwoLS0+XFxzKiQpfFxccysvZywgJycpLnNwbGl0KCcsJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzID0gdXNlclZhbHVlcztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB3aWR0aCA9IG9wdGlvbnMuZ2V0KCd3aWR0aCcpID09PSAnYXV0bycgPyB2YWx1ZXMubGVuZ3RoICogb3B0aW9ucy5nZXQoJ2RlZmF1bHRQaXhlbHNQZXJWYWx1ZScpIDogb3B0aW9ucy5nZXQoJ3dpZHRoJyk7XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuZ2V0KCdoZWlnaHQnKSA9PT0gJ2F1dG8nKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghb3B0aW9ucy5nZXQoJ2NvbXBvc2l0ZScpIHx8ICEkLmRhdGEodGhpcywgJ19qcXNfdmNhbnZhcycpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBtdXN0IGJlIGEgYmV0dGVyIHdheSB0byBnZXQgdGhlIGxpbmUgaGVpZ2h0XG4gICAgICAgICAgICAgICAgICAgICAgICB0bXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0bXAuaW5uZXJIVE1MID0gJ2EnO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHRoaXMuaHRtbCh0bXApO1xuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gJCh0bXApLmlubmVySGVpZ2h0KCkgfHwgJCh0bXApLmhlaWdodCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJCh0bXApLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdG1wID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCA9IG9wdGlvbnMuZ2V0KCdoZWlnaHQnKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoIW9wdGlvbnMuZ2V0KCdkaXNhYmxlSW50ZXJhY3Rpb24nKSkge1xuICAgICAgICAgICAgICAgICAgICBtaGFuZGxlciA9ICQuZGF0YSh0aGlzLCAnX2pxc19taGFuZGxlcicpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIW1oYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtaGFuZGxlciA9IG5ldyBNb3VzZUhhbmRsZXIodGhpcywgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkLmRhdGEodGhpcywgJ19qcXNfbWhhbmRsZXInLCBtaGFuZGxlcik7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIW9wdGlvbnMuZ2V0KCdjb21wb3NpdGUnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWhhbmRsZXIucmVzZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG1oYW5kbGVyID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuZ2V0KCdjb21wb3NpdGUnKSAmJiAhJC5kYXRhKHRoaXMsICdfanFzX3ZjYW52YXMnKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoISQuZGF0YSh0aGlzLCAnX2pxc19lcnJub3RpZnknKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoJ0F0dGVtcHRlZCB0byBhdHRhY2ggYSBjb21wb3NpdGUgc3BhcmtsaW5lIHRvIGFuIGVsZW1lbnQgd2l0aCBubyBleGlzdGluZyBzcGFya2xpbmUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICQuZGF0YSh0aGlzLCAnX2pxc19lcnJub3RpZnknLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc3AgPSBuZXcgJC5mbi5zcGFya2xpbmVbb3B0aW9ucy5nZXQoJ3R5cGUnKV0odGhpcywgdmFsdWVzLCBvcHRpb25zLCB3aWR0aCwgaGVpZ2h0KTtcblxuICAgICAgICAgICAgICAgIHNwLnJlbmRlcigpO1xuXG4gICAgICAgICAgICAgICAgaWYgKG1oYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIG1oYW5kbGVyLnJlZ2lzdGVyU3BhcmtsaW5lKHNwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKCgkKHRoaXMpLmh0bWwoKSAmJiAhb3B0aW9ucy5nZXQoJ2Rpc2FibGVIaWRkZW5DaGVjaycpICYmICQodGhpcykuaXMoJzpoaWRkZW4nKSkgfHwgISQodGhpcykucGFyZW50cygnYm9keScpLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGlmICghb3B0aW9ucy5nZXQoJ2NvbXBvc2l0ZScpICYmICQuZGF0YSh0aGlzLCAnX2pxc19wZW5kaW5nJykpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gcmVtb3ZlIGFueSBleGlzdGluZyByZWZlcmVuY2VzIHRvIHRoZSBlbGVtZW50XG4gICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IHBlbmRpbmcubGVuZ3RoOyBpOyBpLS0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZW5kaW5nW2kgLSAxXVswXSA9PSB0aGlzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVuZGluZy5zcGxpY2UoaSAtIDEsIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHBlbmRpbmcucHVzaChbdGhpcywgcmVuZGVyXSk7XG4gICAgICAgICAgICAgICAgJC5kYXRhKHRoaXMsICdfanFzX3BlbmRpbmcnLCB0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVuZGVyLmNhbGwodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICAkLmZuLnNwYXJrbGluZS5kZWZhdWx0cyA9IGdldERlZmF1bHRzKCk7XG5cblxuICAgICQuc3BhcmtsaW5lX2Rpc3BsYXlfdmlzaWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGVsLCBpLCBwbDtcbiAgICAgICAgdmFyIGRvbmUgPSBbXTtcbiAgICAgICAgZm9yIChpID0gMCwgcGwgPSBwZW5kaW5nLmxlbmd0aDsgaSA8IHBsOyBpKyspIHtcbiAgICAgICAgICAgIGVsID0gcGVuZGluZ1tpXVswXTtcbiAgICAgICAgICAgIGlmICgkKGVsKS5pcygnOnZpc2libGUnKSAmJiAhJChlbCkucGFyZW50cygpLmlzKCc6aGlkZGVuJykpIHtcbiAgICAgICAgICAgICAgICBwZW5kaW5nW2ldWzFdLmNhbGwoZWwpO1xuICAgICAgICAgICAgICAgICQuZGF0YShwZW5kaW5nW2ldWzBdLCAnX2pxc19wZW5kaW5nJywgZmFsc2UpO1xuICAgICAgICAgICAgICAgIGRvbmUucHVzaChpKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoISQoZWwpLmNsb3Nlc3QoJ2h0bWwnKS5sZW5ndGggJiYgISQuZGF0YShlbCwgJ19qcXNfcGVuZGluZycpKSB7XG4gICAgICAgICAgICAgICAgLy8gZWxlbWVudCBoYXMgYmVlbiBpbnNlcnRlZCBhbmQgcmVtb3ZlZCBmcm9tIHRoZSBET01cbiAgICAgICAgICAgICAgICAvLyBJZiBpdCB3YXMgbm90IHlldCBpbnNlcnRlZCBpbnRvIHRoZSBkb20gdGhlbiB0aGUgLmRhdGEgcmVxdWVzdFxuICAgICAgICAgICAgICAgIC8vIHdpbGwgcmV0dXJuIHRydWUuXG4gICAgICAgICAgICAgICAgLy8gcmVtb3ZpbmcgZnJvbSB0aGUgZG9tIGNhdXNlcyB0aGUgZGF0YSB0byBiZSByZW1vdmVkLlxuICAgICAgICAgICAgICAgICQuZGF0YShwZW5kaW5nW2ldWzBdLCAnX2pxc19wZW5kaW5nJywgZmFsc2UpO1xuICAgICAgICAgICAgICAgIGRvbmUucHVzaChpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKGkgPSBkb25lLmxlbmd0aDsgaTsgaS0tKSB7XG4gICAgICAgICAgICBwZW5kaW5nLnNwbGljZShkb25lW2kgLSAxXSwgMSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG5cbiAgICAvKipcbiAgICAgKiBVc2VyIG9wdGlvbiBoYW5kbGVyXG4gICAgICovXG4gICAgJC5mbi5zcGFya2xpbmUub3B0aW9ucyA9IGNyZWF0ZUNsYXNzKHtcbiAgICAgICAgaW5pdDogZnVuY3Rpb24gKHRhZywgdXNlck9wdGlvbnMpIHtcbiAgICAgICAgICAgIHZhciBleHRlbmRlZE9wdGlvbnMsIGRlZmF1bHRzLCBiYXNlLCB0YWdPcHRpb25UeXBlO1xuICAgICAgICAgICAgdGhpcy51c2VyT3B0aW9ucyA9IHVzZXJPcHRpb25zID0gdXNlck9wdGlvbnMgfHwge307XG4gICAgICAgICAgICB0aGlzLnRhZyA9IHRhZztcbiAgICAgICAgICAgIHRoaXMudGFnVmFsQ2FjaGUgPSB7fTtcbiAgICAgICAgICAgIGRlZmF1bHRzID0gJC5mbi5zcGFya2xpbmUuZGVmYXVsdHM7XG4gICAgICAgICAgICBiYXNlID0gZGVmYXVsdHMuY29tbW9uO1xuICAgICAgICAgICAgdGhpcy50YWdPcHRpb25zUHJlZml4ID0gdXNlck9wdGlvbnMuZW5hYmxlVGFnT3B0aW9ucyAmJiAodXNlck9wdGlvbnMudGFnT3B0aW9uc1ByZWZpeCB8fCBiYXNlLnRhZ09wdGlvbnNQcmVmaXgpO1xuXG4gICAgICAgICAgICB0YWdPcHRpb25UeXBlID0gdGhpcy5nZXRUYWdTZXR0aW5nKCd0eXBlJyk7XG4gICAgICAgICAgICBpZiAodGFnT3B0aW9uVHlwZSA9PT0gVU5TRVRfT1BUSU9OKSB7XG4gICAgICAgICAgICAgICAgZXh0ZW5kZWRPcHRpb25zID0gZGVmYXVsdHNbdXNlck9wdGlvbnMudHlwZSB8fCBiYXNlLnR5cGVdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBleHRlbmRlZE9wdGlvbnMgPSBkZWZhdWx0c1t0YWdPcHRpb25UeXBlXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMubWVyZ2VkT3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBiYXNlLCBleHRlbmRlZE9wdGlvbnMsIHVzZXJPcHRpb25zKTtcbiAgICAgICAgfSxcblxuXG4gICAgICAgIGdldFRhZ1NldHRpbmc6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIHZhciBwcmVmaXggPSB0aGlzLnRhZ09wdGlvbnNQcmVmaXgsXG4gICAgICAgICAgICAgICAgdmFsLCBpLCBwYWlycywga2V5dmFsO1xuICAgICAgICAgICAgaWYgKHByZWZpeCA9PT0gZmFsc2UgfHwgcHJlZml4ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gVU5TRVRfT1BUSU9OO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMudGFnVmFsQ2FjaGUuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgICAgIHZhbCA9IHRoaXMudGFnVmFsQ2FjaGUua2V5O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YWwgPSB0aGlzLnRhZy5nZXRBdHRyaWJ1dGUocHJlZml4ICsga2V5KTtcbiAgICAgICAgICAgICAgICBpZiAodmFsID09PSB1bmRlZmluZWQgfHwgdmFsID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbCA9IFVOU0VUX09QVElPTjtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHZhbC5zdWJzdHIoMCwgMSkgPT09ICdbJykge1xuICAgICAgICAgICAgICAgICAgICB2YWwgPSB2YWwuc3Vic3RyKDEsIHZhbC5sZW5ndGggLSAyKS5zcGxpdCgnLCcpO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSB2YWwubGVuZ3RoOyBpLS07KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxbaV0gPSBub3JtYWxpemVWYWx1ZSh2YWxbaV0ucmVwbGFjZSgvKF5cXHMqKXwoXFxzKiQpL2csICcnKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHZhbC5zdWJzdHIoMCwgMSkgPT09ICd7Jykge1xuICAgICAgICAgICAgICAgICAgICBwYWlycyA9IHZhbC5zdWJzdHIoMSwgdmFsLmxlbmd0aCAtIDIpLnNwbGl0KCcsJyk7XG4gICAgICAgICAgICAgICAgICAgIHZhbCA9IHt9O1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSBwYWlycy5sZW5ndGg7IGktLTspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleXZhbCA9IHBhaXJzW2ldLnNwbGl0KCc6JywgMik7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxba2V5dmFsWzBdLnJlcGxhY2UoLyheXFxzKil8KFxccyokKS9nLCAnJyldID0gbm9ybWFsaXplVmFsdWUoa2V5dmFsWzFdLnJlcGxhY2UoLyheXFxzKil8KFxccyokKS9nLCAnJykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsID0gbm9ybWFsaXplVmFsdWUodmFsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy50YWdWYWxDYWNoZS5rZXkgPSB2YWw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdmFsO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldDogZnVuY3Rpb24gKGtleSwgZGVmYXVsdHZhbCkge1xuICAgICAgICAgICAgdmFyIHRhZ09wdGlvbiA9IHRoaXMuZ2V0VGFnU2V0dGluZyhrZXkpLFxuICAgICAgICAgICAgICAgIHJlc3VsdDtcbiAgICAgICAgICAgIGlmICh0YWdPcHRpb24gIT09IFVOU0VUX09QVElPTikge1xuICAgICAgICAgICAgICAgIHJldHVybiB0YWdPcHRpb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gKHJlc3VsdCA9IHRoaXMubWVyZ2VkT3B0aW9uc1trZXldKSA9PT0gdW5kZWZpbmVkID8gZGVmYXVsdHZhbCA6IHJlc3VsdDtcbiAgICAgICAgfVxuICAgIH0pO1xuXG5cbiAgICAkLmZuLnNwYXJrbGluZS5fYmFzZSA9IGNyZWF0ZUNsYXNzKHtcbiAgICAgICAgZGlzYWJsZWQ6IGZhbHNlLFxuXG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uIChlbCwgdmFsdWVzLCBvcHRpb25zLCB3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgICAgICB0aGlzLmVsID0gZWw7XG4gICAgICAgICAgICB0aGlzLiRlbCA9ICQoZWwpO1xuICAgICAgICAgICAgdGhpcy52YWx1ZXMgPSB2YWx1ZXM7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICAgICAgdGhpcy53aWR0aCA9IHdpZHRoO1xuICAgICAgICAgICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRSZWdpb24gPSB1bmRlZmluZWQ7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNldHVwIHRoZSBjYW52YXNcbiAgICAgICAgICovXG4gICAgICAgIGluaXRUYXJnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBpbnRlcmFjdGl2ZSA9ICF0aGlzLm9wdGlvbnMuZ2V0KCdkaXNhYmxlSW50ZXJhY3Rpb24nKTtcbiAgICAgICAgICAgIGlmICghKHRoaXMudGFyZ2V0ID0gdGhpcy4kZWwuc2ltcGxlZHJhdyh0aGlzLndpZHRoLCB0aGlzLmhlaWdodCwgdGhpcy5vcHRpb25zLmdldCgnY29tcG9zaXRlJyksIGludGVyYWN0aXZlKSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jYW52YXNXaWR0aCA9IHRoaXMudGFyZ2V0LnBpeGVsV2lkdGg7XG4gICAgICAgICAgICAgICAgdGhpcy5jYW52YXNIZWlnaHQgPSB0aGlzLnRhcmdldC5waXhlbEhlaWdodDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQWN0dWFsbHkgcmVuZGVyIHRoZSBjaGFydCB0byB0aGUgY2FudmFzXG4gICAgICAgICAqL1xuICAgICAgICByZW5kZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmRpc2FibGVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbC5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJuIGEgcmVnaW9uIGlkIGZvciBhIGdpdmVuIHgveSBjby1vcmRpbmF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0UmVnaW9uOiBmdW5jdGlvbiAoeCwgeSkge1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBIaWdobGlnaHQgYW4gaXRlbSBiYXNlZCBvbiB0aGUgbW91c2VkLW92ZXIgeCx5IGNvLW9yZGluYXRlXG4gICAgICAgICAqL1xuICAgICAgICBzZXRSZWdpb25IaWdobGlnaHQ6IGZ1bmN0aW9uIChlbCwgeCwgeSkge1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRSZWdpb24gPSB0aGlzLmN1cnJlbnRSZWdpb24sXG4gICAgICAgICAgICAgICAgaGlnaGxpZ2h0RW5hYmxlZCA9ICF0aGlzLm9wdGlvbnMuZ2V0KCdkaXNhYmxlSGlnaGxpZ2h0JyksXG4gICAgICAgICAgICAgICAgbmV3UmVnaW9uO1xuICAgICAgICAgICAgaWYgKHggPiB0aGlzLmNhbnZhc1dpZHRoIHx8IHkgPiB0aGlzLmNhbnZhc0hlaWdodCB8fCB4IDwgMCB8fCB5IDwgMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbmV3UmVnaW9uID0gdGhpcy5nZXRSZWdpb24oZWwsIHgsIHkpO1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRSZWdpb24gIT09IG5ld1JlZ2lvbikge1xuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50UmVnaW9uICE9PSB1bmRlZmluZWQgJiYgaGlnaGxpZ2h0RW5hYmxlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUhpZ2hsaWdodCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRSZWdpb24gPSBuZXdSZWdpb247XG4gICAgICAgICAgICAgICAgaWYgKG5ld1JlZ2lvbiAhPT0gdW5kZWZpbmVkICYmIGhpZ2hsaWdodEVuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJIaWdobGlnaHQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlc2V0IGFueSBjdXJyZW50bHkgaGlnaGxpZ2h0ZWQgaXRlbVxuICAgICAgICAgKi9cbiAgICAgICAgY2xlYXJSZWdpb25IaWdobGlnaHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRSZWdpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlSGlnaGxpZ2h0KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50UmVnaW9uID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlbmRlckhpZ2hsaWdodDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5jaGFuZ2VIaWdobGlnaHQodHJ1ZSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVtb3ZlSGlnaGxpZ2h0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLmNoYW5nZUhpZ2hsaWdodChmYWxzZSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgY2hhbmdlSGlnaGxpZ2h0OiBmdW5jdGlvbiAoaGlnaGxpZ2h0KSAge30sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZldGNoIHRoZSBIVE1MIHRvIGRpc3BsYXkgYXMgYSB0b29sdGlwXG4gICAgICAgICAqL1xuICAgICAgICBnZXRDdXJyZW50UmVnaW9uVG9vbHRpcDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgaGVhZGVyID0gJycsXG4gICAgICAgICAgICAgICAgZW50cmllcyA9IFtdLFxuICAgICAgICAgICAgICAgIGZpZWxkcywgZm9ybWF0cywgZm9ybWF0bGVuLCBmY2xhc3MsIHRleHQsIGksXG4gICAgICAgICAgICAgICAgc2hvd0ZpZWxkcywgc2hvd0ZpZWxkc0tleSwgbmV3RmllbGRzLCBmdixcbiAgICAgICAgICAgICAgICBmb3JtYXR0ZXIsIGZvcm1hdCwgZmllbGRsZW4sIGo7XG4gICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50UmVnaW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaWVsZHMgPSB0aGlzLmdldEN1cnJlbnRSZWdpb25GaWVsZHMoKTtcbiAgICAgICAgICAgIGZvcm1hdHRlciA9IG9wdGlvbnMuZ2V0KCd0b29sdGlwRm9ybWF0dGVyJyk7XG4gICAgICAgICAgICBpZiAoZm9ybWF0dGVyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZvcm1hdHRlcih0aGlzLCBvcHRpb25zLCBmaWVsZHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuZ2V0KCd0b29sdGlwQ2hhcnRUaXRsZScpKSB7XG4gICAgICAgICAgICAgICAgaGVhZGVyICs9ICc8ZGl2IGNsYXNzPVwianFzIGpxc3RpdGxlXCI+JyArIG9wdGlvbnMuZ2V0KCd0b29sdGlwQ2hhcnRUaXRsZScpICsgJzwvZGl2Plxcbic7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3JtYXRzID0gdGhpcy5vcHRpb25zLmdldCgndG9vbHRpcEZvcm1hdCcpO1xuICAgICAgICAgICAgaWYgKCFmb3JtYXRzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCEkLmlzQXJyYXkoZm9ybWF0cykpIHtcbiAgICAgICAgICAgICAgICBmb3JtYXRzID0gW2Zvcm1hdHNdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCEkLmlzQXJyYXkoZmllbGRzKSkge1xuICAgICAgICAgICAgICAgIGZpZWxkcyA9IFtmaWVsZHNdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2hvd0ZpZWxkcyA9IHRoaXMub3B0aW9ucy5nZXQoJ3Rvb2x0aXBGb3JtYXRGaWVsZGxpc3QnKTtcbiAgICAgICAgICAgIHNob3dGaWVsZHNLZXkgPSB0aGlzLm9wdGlvbnMuZ2V0KCd0b29sdGlwRm9ybWF0RmllbGRsaXN0S2V5Jyk7XG4gICAgICAgICAgICBpZiAoc2hvd0ZpZWxkcyAmJiBzaG93RmllbGRzS2V5KSB7XG4gICAgICAgICAgICAgICAgLy8gdXNlci1zZWxlY3RlZCBvcmRlcmluZyBvZiBmaWVsZHNcbiAgICAgICAgICAgICAgICBuZXdGaWVsZHMgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSBmaWVsZHMubGVuZ3RoOyBpLS07KSB7XG4gICAgICAgICAgICAgICAgICAgIGZ2ID0gZmllbGRzW2ldW3Nob3dGaWVsZHNLZXldO1xuICAgICAgICAgICAgICAgICAgICBpZiAoKGogPSAkLmluQXJyYXkoZnYsIHNob3dGaWVsZHMpKSAhPSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3RmllbGRzW2pdID0gZmllbGRzW2ldO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZpZWxkcyA9IG5ld0ZpZWxkcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvcm1hdGxlbiA9IGZvcm1hdHMubGVuZ3RoO1xuICAgICAgICAgICAgZmllbGRsZW4gPSBmaWVsZHMubGVuZ3RoO1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGZvcm1hdGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgZm9ybWF0ID0gZm9ybWF0c1tpXTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGZvcm1hdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0ID0gbmV3IFNQRm9ybWF0KGZvcm1hdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZjbGFzcyA9IGZvcm1hdC5mY2xhc3MgfHwgJ2pxc2ZpZWxkJztcbiAgICAgICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgZmllbGRsZW47IGorKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWZpZWxkc1tqXS5pc051bGwgfHwgIW9wdGlvbnMuZ2V0KCd0b29sdGlwU2tpcE51bGwnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJC5leHRlbmQoZmllbGRzW2pdLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJlZml4OiBvcHRpb25zLmdldCgndG9vbHRpcFByZWZpeCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1ZmZpeDogb3B0aW9ucy5nZXQoJ3Rvb2x0aXBTdWZmaXgnKVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0ID0gZm9ybWF0LnJlbmRlcihmaWVsZHNbal0sIG9wdGlvbnMuZ2V0KCd0b29sdGlwVmFsdWVMb29rdXBzJyksIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZW50cmllcy5wdXNoKCc8ZGl2IGNsYXNzPVwiJyArIGZjbGFzcyArICdcIj4nICsgdGV4dCArICc8L2Rpdj4nKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlbnRyaWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBoZWFkZXIgKyBlbnRyaWVzLmpvaW4oJ1xcbicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldEN1cnJlbnRSZWdpb25GaWVsZHM6IGZ1bmN0aW9uICgpIHt9LFxuXG4gICAgICAgIGNhbGNIaWdobGlnaHRDb2xvcjogZnVuY3Rpb24gKGNvbG9yLCBvcHRpb25zKSB7XG4gICAgICAgICAgICB2YXIgaGlnaGxpZ2h0Q29sb3IgPSBvcHRpb25zLmdldCgnaGlnaGxpZ2h0Q29sb3InKSxcbiAgICAgICAgICAgICAgICBsaWdodGVuID0gb3B0aW9ucy5nZXQoJ2hpZ2hsaWdodExpZ2h0ZW4nKSxcbiAgICAgICAgICAgICAgICBwYXJzZSwgbXVsdCwgcmdibmV3LCBpO1xuICAgICAgICAgICAgaWYgKGhpZ2hsaWdodENvbG9yKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhpZ2hsaWdodENvbG9yO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGxpZ2h0ZW4pIHtcbiAgICAgICAgICAgICAgICAvLyBleHRyYWN0IFJHQiB2YWx1ZXNcbiAgICAgICAgICAgICAgICBwYXJzZSA9IC9eIyhbMC05YS1mXSkoWzAtOWEtZl0pKFswLTlhLWZdKSQvaS5leGVjKGNvbG9yKSB8fCAvXiMoWzAtOWEtZl17Mn0pKFswLTlhLWZdezJ9KShbMC05YS1mXXsyfSkkL2kuZXhlYyhjb2xvcik7XG4gICAgICAgICAgICAgICAgaWYgKHBhcnNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJnYm5ldyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBtdWx0ID0gY29sb3IubGVuZ3RoID09PSA0ID8gMTYgOiAxO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMzsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZ2JuZXdbaV0gPSBjbGlwdmFsKE1hdGgucm91bmQocGFyc2VJbnQocGFyc2VbaSArIDFdLCAxNikgKiBtdWx0ICogbGlnaHRlbiksIDAsIDI1NSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdyZ2IoJyArIHJnYm5ldy5qb2luKCcsJykgKyAnKSc7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY29sb3I7XG4gICAgICAgIH1cblxuICAgIH0pO1xuXG4gICAgYmFySGlnaGxpZ2h0TWl4aW4gPSB7XG4gICAgICAgIGNoYW5nZUhpZ2hsaWdodDogZnVuY3Rpb24gKGhpZ2hsaWdodCkge1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRSZWdpb24gPSB0aGlzLmN1cnJlbnRSZWdpb24sXG4gICAgICAgICAgICAgICAgdGFyZ2V0ID0gdGhpcy50YXJnZXQsXG4gICAgICAgICAgICAgICAgc2hhcGVpZHMgPSB0aGlzLnJlZ2lvblNoYXBlc1tjdXJyZW50UmVnaW9uXSxcbiAgICAgICAgICAgICAgICBuZXdTaGFwZXM7XG4gICAgICAgICAgICAvLyB3aWxsIGJlIG51bGwgaWYgdGhlIHJlZ2lvbiB2YWx1ZSB3YXMgbnVsbFxuICAgICAgICAgICAgaWYgKHNoYXBlaWRzKSB7XG4gICAgICAgICAgICAgICAgbmV3U2hhcGVzID0gdGhpcy5yZW5kZXJSZWdpb24oY3VycmVudFJlZ2lvbiwgaGlnaGxpZ2h0KTtcbiAgICAgICAgICAgICAgICBpZiAoJC5pc0FycmF5KG5ld1NoYXBlcykgfHwgJC5pc0FycmF5KHNoYXBlaWRzKSkge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXQucmVwbGFjZVdpdGhTaGFwZXMoc2hhcGVpZHMsIG5ld1NoYXBlcyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVnaW9uU2hhcGVzW2N1cnJlbnRSZWdpb25dID0gJC5tYXAobmV3U2hhcGVzLCBmdW5jdGlvbiAobmV3U2hhcGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXdTaGFwZS5pZDtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LnJlcGxhY2VXaXRoU2hhcGUoc2hhcGVpZHMsIG5ld1NoYXBlcyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVnaW9uU2hhcGVzW2N1cnJlbnRSZWdpb25dID0gbmV3U2hhcGVzLmlkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICByZW5kZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZXMgPSB0aGlzLnZhbHVlcyxcbiAgICAgICAgICAgICAgICB0YXJnZXQgPSB0aGlzLnRhcmdldCxcbiAgICAgICAgICAgICAgICByZWdpb25TaGFwZXMgPSB0aGlzLnJlZ2lvblNoYXBlcyxcbiAgICAgICAgICAgICAgICBzaGFwZXMsIGlkcywgaSwgajtcblxuICAgICAgICAgICAgaWYgKCF0aGlzLmNscy5fc3VwZXIucmVuZGVyLmNhbGwodGhpcykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGkgPSB2YWx1ZXMubGVuZ3RoOyBpLS07KSB7XG4gICAgICAgICAgICAgICAgc2hhcGVzID0gdGhpcy5yZW5kZXJSZWdpb24oaSk7XG4gICAgICAgICAgICAgICAgaWYgKHNoYXBlcykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoJC5pc0FycmF5KHNoYXBlcykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChqID0gc2hhcGVzLmxlbmd0aDsgai0tOykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNoYXBlc1tqXS5hcHBlbmQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZHMucHVzaChzaGFwZXNbal0uaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmVnaW9uU2hhcGVzW2ldID0gaWRzO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2hhcGVzLmFwcGVuZCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVnaW9uU2hhcGVzW2ldID0gc2hhcGVzLmlkOyAvLyBzdG9yZSBqdXN0IHRoZSBzaGFwZWlkXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBudWxsIHZhbHVlXG4gICAgICAgICAgICAgICAgICAgIHJlZ2lvblNoYXBlc1tpXSA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGFyZ2V0LnJlbmRlcigpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIExpbmUgY2hhcnRzXG4gICAgICovXG4gICAgJC5mbi5zcGFya2xpbmUubGluZSA9IGxpbmUgPSBjcmVhdGVDbGFzcygkLmZuLnNwYXJrbGluZS5fYmFzZSwge1xuICAgICAgICB0eXBlOiAnbGluZScsXG5cbiAgICAgICAgaW5pdDogZnVuY3Rpb24gKGVsLCB2YWx1ZXMsIG9wdGlvbnMsIHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgICAgIGxpbmUuX3N1cGVyLmluaXQuY2FsbCh0aGlzLCBlbCwgdmFsdWVzLCBvcHRpb25zLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgICAgIHRoaXMudmVydGljZXMgPSBbXTtcbiAgICAgICAgICAgIHRoaXMucmVnaW9uTWFwID0gW107XG4gICAgICAgICAgICB0aGlzLnh2YWx1ZXMgPSBbXTtcbiAgICAgICAgICAgIHRoaXMueXZhbHVlcyA9IFtdO1xuICAgICAgICAgICAgdGhpcy55bWlubWF4ID0gW107XG4gICAgICAgICAgICB0aGlzLmhpZ2h0bGlnaHRTcG90SWQgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5sYXN0U2hhcGVJZCA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLmluaXRUYXJnZXQoKTtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXRSZWdpb246IGZ1bmN0aW9uIChlbCwgeCwgeSkge1xuICAgICAgICAgICAgdmFyIGksXG4gICAgICAgICAgICAgICAgcmVnaW9uTWFwID0gdGhpcy5yZWdpb25NYXA7IC8vIG1hcHMgcmVnaW9ucyB0byB2YWx1ZSBwb3NpdGlvbnNcbiAgICAgICAgICAgIGZvciAoaSA9IHJlZ2lvbk1hcC5sZW5ndGg7IGktLTspIHtcbiAgICAgICAgICAgICAgICBpZiAocmVnaW9uTWFwW2ldICE9PSBudWxsICYmIHggPj0gcmVnaW9uTWFwW2ldWzBdICYmIHggPD0gcmVnaW9uTWFwW2ldWzFdKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZWdpb25NYXBbaV1bMl07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXRDdXJyZW50UmVnaW9uRmllbGRzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgY3VycmVudFJlZ2lvbiA9IHRoaXMuY3VycmVudFJlZ2lvbjtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgaXNOdWxsOiB0aGlzLnl2YWx1ZXNbY3VycmVudFJlZ2lvbl0gPT09IG51bGwsXG4gICAgICAgICAgICAgICAgeDogdGhpcy54dmFsdWVzW2N1cnJlbnRSZWdpb25dLFxuICAgICAgICAgICAgICAgIHk6IHRoaXMueXZhbHVlc1tjdXJyZW50UmVnaW9uXSxcbiAgICAgICAgICAgICAgICBjb2xvcjogdGhpcy5vcHRpb25zLmdldCgnbGluZUNvbG9yJyksXG4gICAgICAgICAgICAgICAgZmlsbENvbG9yOiB0aGlzLm9wdGlvbnMuZ2V0KCdmaWxsQ29sb3InKSxcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IGN1cnJlbnRSZWdpb25cbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVuZGVySGlnaGxpZ2h0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgY3VycmVudFJlZ2lvbiA9IHRoaXMuY3VycmVudFJlZ2lvbixcbiAgICAgICAgICAgICAgICB0YXJnZXQgPSB0aGlzLnRhcmdldCxcbiAgICAgICAgICAgICAgICB2ZXJ0ZXggPSB0aGlzLnZlcnRpY2VzW2N1cnJlbnRSZWdpb25dLFxuICAgICAgICAgICAgICAgIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgc3BvdFJhZGl1cyA9IG9wdGlvbnMuZ2V0KCdzcG90UmFkaXVzJyksXG4gICAgICAgICAgICAgICAgaGlnaGxpZ2h0U3BvdENvbG9yID0gb3B0aW9ucy5nZXQoJ2hpZ2hsaWdodFNwb3RDb2xvcicpLFxuICAgICAgICAgICAgICAgIGhpZ2hsaWdodExpbmVDb2xvciA9IG9wdGlvbnMuZ2V0KCdoaWdobGlnaHRMaW5lQ29sb3InKSxcbiAgICAgICAgICAgICAgICBoaWdobGlnaHRTcG90LCBoaWdobGlnaHRMaW5lO1xuXG4gICAgICAgICAgICBpZiAoIXZlcnRleCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzcG90UmFkaXVzICYmIGhpZ2hsaWdodFNwb3RDb2xvcikge1xuICAgICAgICAgICAgICAgIGhpZ2hsaWdodFNwb3QgPSB0YXJnZXQuZHJhd0NpcmNsZSh2ZXJ0ZXhbMF0sIHZlcnRleFsxXSxcbiAgICAgICAgICAgICAgICAgICAgc3BvdFJhZGl1cywgdW5kZWZpbmVkLCBoaWdobGlnaHRTcG90Q29sb3IpO1xuICAgICAgICAgICAgICAgIHRoaXMuaGlnaGxpZ2h0U3BvdElkID0gaGlnaGxpZ2h0U3BvdC5pZDtcbiAgICAgICAgICAgICAgICB0YXJnZXQuaW5zZXJ0QWZ0ZXJTaGFwZSh0aGlzLmxhc3RTaGFwZUlkLCBoaWdobGlnaHRTcG90KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChoaWdobGlnaHRMaW5lQ29sb3IpIHtcbiAgICAgICAgICAgICAgICBoaWdobGlnaHRMaW5lID0gdGFyZ2V0LmRyYXdMaW5lKHZlcnRleFswXSwgdGhpcy5jYW52YXNUb3AsIHZlcnRleFswXSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYW52YXNUb3AgKyB0aGlzLmNhbnZhc0hlaWdodCwgaGlnaGxpZ2h0TGluZUNvbG9yKTtcbiAgICAgICAgICAgICAgICB0aGlzLmhpZ2hsaWdodExpbmVJZCA9IGhpZ2hsaWdodExpbmUuaWQ7XG4gICAgICAgICAgICAgICAgdGFyZ2V0Lmluc2VydEFmdGVyU2hhcGUodGhpcy5sYXN0U2hhcGVJZCwgaGlnaGxpZ2h0TGluZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVtb3ZlSGlnaGxpZ2h0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgdGFyZ2V0ID0gdGhpcy50YXJnZXQ7XG4gICAgICAgICAgICBpZiAodGhpcy5oaWdobGlnaHRTcG90SWQpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXQucmVtb3ZlU2hhcGVJZCh0aGlzLmhpZ2hsaWdodFNwb3RJZCk7XG4gICAgICAgICAgICAgICAgdGhpcy5oaWdobGlnaHRTcG90SWQgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuaGlnaGxpZ2h0TGluZUlkKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0LnJlbW92ZVNoYXBlSWQodGhpcy5oaWdobGlnaHRMaW5lSWQpO1xuICAgICAgICAgICAgICAgIHRoaXMuaGlnaGxpZ2h0TGluZUlkID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBzY2FuVmFsdWVzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgdmFsdWVzID0gdGhpcy52YWx1ZXMsXG4gICAgICAgICAgICAgICAgdmFsY291bnQgPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgICAgICAgICAgIHh2YWx1ZXMgPSB0aGlzLnh2YWx1ZXMsXG4gICAgICAgICAgICAgICAgeXZhbHVlcyA9IHRoaXMueXZhbHVlcyxcbiAgICAgICAgICAgICAgICB5bWlubWF4ID0gdGhpcy55bWlubWF4LFxuICAgICAgICAgICAgICAgIGksIHZhbCwgaXNTdHIsIGlzQXJyYXksIHNwO1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHZhbGNvdW50OyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YWwgPSB2YWx1ZXNbaV07XG4gICAgICAgICAgICAgICAgaXNTdHIgPSB0eXBlb2YodmFsdWVzW2ldKSA9PT0gJ3N0cmluZyc7XG4gICAgICAgICAgICAgICAgaXNBcnJheSA9IHR5cGVvZih2YWx1ZXNbaV0pID09PSAnb2JqZWN0JyAmJiB2YWx1ZXNbaV0gaW5zdGFuY2VvZiBBcnJheTtcbiAgICAgICAgICAgICAgICBzcCA9IGlzU3RyICYmIHZhbHVlc1tpXS5zcGxpdCgnOicpO1xuICAgICAgICAgICAgICAgIGlmIChpc1N0ciAmJiBzcC5sZW5ndGggPT09IDIpIHsgLy8geDp5XG4gICAgICAgICAgICAgICAgICAgIHh2YWx1ZXMucHVzaChOdW1iZXIoc3BbMF0pKTtcbiAgICAgICAgICAgICAgICAgICAgeXZhbHVlcy5wdXNoKE51bWJlcihzcFsxXSkpO1xuICAgICAgICAgICAgICAgICAgICB5bWlubWF4LnB1c2goTnVtYmVyKHNwWzFdKSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpc0FycmF5KSB7XG4gICAgICAgICAgICAgICAgICAgIHh2YWx1ZXMucHVzaCh2YWxbMF0pO1xuICAgICAgICAgICAgICAgICAgICB5dmFsdWVzLnB1c2godmFsWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgeW1pbm1heC5wdXNoKHZhbFsxXSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgeHZhbHVlcy5wdXNoKGkpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWVzW2ldID09PSBudWxsIHx8IHZhbHVlc1tpXSA9PT0gJ251bGwnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB5dmFsdWVzLnB1c2gobnVsbCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB5dmFsdWVzLnB1c2goTnVtYmVyKHZhbCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgeW1pbm1heC5wdXNoKE51bWJlcih2YWwpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZ2V0KCd4dmFsdWVzJykpIHtcbiAgICAgICAgICAgICAgICB4dmFsdWVzID0gdGhpcy5vcHRpb25zLmdldCgneHZhbHVlcycpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLm1heHkgPSB0aGlzLm1heHlvcmcgPSBNYXRoLm1heC5hcHBseShNYXRoLCB5bWlubWF4KTtcbiAgICAgICAgICAgIHRoaXMubWlueSA9IHRoaXMubWlueW9yZyA9IE1hdGgubWluLmFwcGx5KE1hdGgsIHltaW5tYXgpO1xuXG4gICAgICAgICAgICB0aGlzLm1heHggPSBNYXRoLm1heC5hcHBseShNYXRoLCB4dmFsdWVzKTtcbiAgICAgICAgICAgIHRoaXMubWlueCA9IE1hdGgubWluLmFwcGx5KE1hdGgsIHh2YWx1ZXMpO1xuXG4gICAgICAgICAgICB0aGlzLnh2YWx1ZXMgPSB4dmFsdWVzO1xuICAgICAgICAgICAgdGhpcy55dmFsdWVzID0geXZhbHVlcztcbiAgICAgICAgICAgIHRoaXMueW1pbm1heCA9IHltaW5tYXg7XG5cbiAgICAgICAgfSxcblxuICAgICAgICBwcm9jZXNzUmFuZ2VPcHRpb25zOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgICAgICAgICBub3JtYWxSYW5nZU1pbiA9IG9wdGlvbnMuZ2V0KCdub3JtYWxSYW5nZU1pbicpLFxuICAgICAgICAgICAgICAgIG5vcm1hbFJhbmdlTWF4ID0gb3B0aW9ucy5nZXQoJ25vcm1hbFJhbmdlTWF4Jyk7XG5cbiAgICAgICAgICAgIGlmIChub3JtYWxSYW5nZU1pbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5vcm1hbFJhbmdlTWluIDwgdGhpcy5taW55KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWlueSA9IG5vcm1hbFJhbmdlTWluO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobm9ybWFsUmFuZ2VNYXggPiB0aGlzLm1heHkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXh5ID0gbm9ybWFsUmFuZ2VNYXg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuZ2V0KCdjaGFydFJhbmdlTWluJykgIT09IHVuZGVmaW5lZCAmJiAob3B0aW9ucy5nZXQoJ2NoYXJ0UmFuZ2VDbGlwJykgfHwgb3B0aW9ucy5nZXQoJ2NoYXJ0UmFuZ2VNaW4nKSA8IHRoaXMubWlueSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1pbnkgPSBvcHRpb25zLmdldCgnY2hhcnRSYW5nZU1pbicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuZ2V0KCdjaGFydFJhbmdlTWF4JykgIT09IHVuZGVmaW5lZCAmJiAob3B0aW9ucy5nZXQoJ2NoYXJ0UmFuZ2VDbGlwJykgfHwgb3B0aW9ucy5nZXQoJ2NoYXJ0UmFuZ2VNYXgnKSA+IHRoaXMubWF4eSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1heHkgPSBvcHRpb25zLmdldCgnY2hhcnRSYW5nZU1heCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuZ2V0KCdjaGFydFJhbmdlTWluWCcpICE9PSB1bmRlZmluZWQgJiYgKG9wdGlvbnMuZ2V0KCdjaGFydFJhbmdlQ2xpcFgnKSB8fCBvcHRpb25zLmdldCgnY2hhcnRSYW5nZU1pblgnKSA8IHRoaXMubWlueCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1pbnggPSBvcHRpb25zLmdldCgnY2hhcnRSYW5nZU1pblgnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvcHRpb25zLmdldCgnY2hhcnRSYW5nZU1heFgnKSAhPT0gdW5kZWZpbmVkICYmIChvcHRpb25zLmdldCgnY2hhcnRSYW5nZUNsaXBYJykgfHwgb3B0aW9ucy5nZXQoJ2NoYXJ0UmFuZ2VNYXhYJykgPiB0aGlzLm1heHgpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tYXh4ID0gb3B0aW9ucy5nZXQoJ2NoYXJ0UmFuZ2VNYXhYJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICBkcmF3Tm9ybWFsUmFuZ2U6IGZ1bmN0aW9uIChjYW52YXNMZWZ0LCBjYW52YXNUb3AsIGNhbnZhc0hlaWdodCwgY2FudmFzV2lkdGgsIHJhbmdleSkge1xuICAgICAgICAgICAgdmFyIG5vcm1hbFJhbmdlTWluID0gdGhpcy5vcHRpb25zLmdldCgnbm9ybWFsUmFuZ2VNaW4nKSxcbiAgICAgICAgICAgICAgICBub3JtYWxSYW5nZU1heCA9IHRoaXMub3B0aW9ucy5nZXQoJ25vcm1hbFJhbmdlTWF4JyksXG4gICAgICAgICAgICAgICAgeXRvcCA9IGNhbnZhc1RvcCArIE1hdGgucm91bmQoY2FudmFzSGVpZ2h0IC0gKGNhbnZhc0hlaWdodCAqICgobm9ybWFsUmFuZ2VNYXggLSB0aGlzLm1pbnkpIC8gcmFuZ2V5KSkpLFxuICAgICAgICAgICAgICAgIGhlaWdodCA9IE1hdGgucm91bmQoKGNhbnZhc0hlaWdodCAqIChub3JtYWxSYW5nZU1heCAtIG5vcm1hbFJhbmdlTWluKSkgLyByYW5nZXkpO1xuICAgICAgICAgICAgdGhpcy50YXJnZXQuZHJhd1JlY3QoY2FudmFzTGVmdCwgeXRvcCwgY2FudmFzV2lkdGgsIGhlaWdodCwgdW5kZWZpbmVkLCB0aGlzLm9wdGlvbnMuZ2V0KCdub3JtYWxSYW5nZUNvbG9yJykpLmFwcGVuZCgpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlbmRlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgdGFyZ2V0ID0gdGhpcy50YXJnZXQsXG4gICAgICAgICAgICAgICAgY2FudmFzV2lkdGggPSB0aGlzLmNhbnZhc1dpZHRoLFxuICAgICAgICAgICAgICAgIGNhbnZhc0hlaWdodCA9IHRoaXMuY2FudmFzSGVpZ2h0LFxuICAgICAgICAgICAgICAgIHZlcnRpY2VzID0gdGhpcy52ZXJ0aWNlcyxcbiAgICAgICAgICAgICAgICBzcG90UmFkaXVzID0gb3B0aW9ucy5nZXQoJ3Nwb3RSYWRpdXMnKSxcbiAgICAgICAgICAgICAgICByZWdpb25NYXAgPSB0aGlzLnJlZ2lvbk1hcCxcbiAgICAgICAgICAgICAgICByYW5nZXgsIHJhbmdleSwgeXZhbGxhc3QsXG4gICAgICAgICAgICAgICAgY2FudmFzVG9wLCBjYW52YXNMZWZ0LFxuICAgICAgICAgICAgICAgIHZlcnRleCwgcGF0aCwgcGF0aHMsIHgsIHksIHhuZXh0LCB4cG9zLCB4cG9zbmV4dCxcbiAgICAgICAgICAgICAgICBsYXN0LCBuZXh0LCB5dmFsY291bnQsIGxpbmVTaGFwZXMsIGZpbGxTaGFwZXMsIHBsZW4sXG4gICAgICAgICAgICAgICAgdmFsdWVTcG90cywgaGxTcG90c0VuYWJsZWQsIGNvbG9yLCB4dmFsdWVzLCB5dmFsdWVzLCBpO1xuXG4gICAgICAgICAgICBpZiAoIWxpbmUuX3N1cGVyLnJlbmRlci5jYWxsKHRoaXMpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnNjYW5WYWx1ZXMoKTtcbiAgICAgICAgICAgIHRoaXMucHJvY2Vzc1JhbmdlT3B0aW9ucygpO1xuXG4gICAgICAgICAgICB4dmFsdWVzID0gdGhpcy54dmFsdWVzO1xuICAgICAgICAgICAgeXZhbHVlcyA9IHRoaXMueXZhbHVlcztcblxuICAgICAgICAgICAgaWYgKCF0aGlzLnltaW5tYXgubGVuZ3RoIHx8IHRoaXMueXZhbHVlcy5sZW5ndGggPCAyKSB7XG4gICAgICAgICAgICAgICAgLy8gZW1wdHkgb3IgYWxsIG51bGwgdmFsdWVzc1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY2FudmFzVG9wID0gY2FudmFzTGVmdCA9IDA7XG5cbiAgICAgICAgICAgIHJhbmdleCA9IHRoaXMubWF4eCAtIHRoaXMubWlueCA9PT0gMCA/IDEgOiB0aGlzLm1heHggLSB0aGlzLm1pbng7XG4gICAgICAgICAgICByYW5nZXkgPSB0aGlzLm1heHkgLSB0aGlzLm1pbnkgPT09IDAgPyAxIDogdGhpcy5tYXh5IC0gdGhpcy5taW55O1xuICAgICAgICAgICAgeXZhbGxhc3QgPSB0aGlzLnl2YWx1ZXMubGVuZ3RoIC0gMTtcblxuICAgICAgICAgICAgaWYgKHNwb3RSYWRpdXMgJiYgKGNhbnZhc1dpZHRoIDwgKHNwb3RSYWRpdXMgKiA0KSB8fCBjYW52YXNIZWlnaHQgPCAoc3BvdFJhZGl1cyAqIDQpKSkge1xuICAgICAgICAgICAgICAgIHNwb3RSYWRpdXMgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNwb3RSYWRpdXMpIHtcbiAgICAgICAgICAgICAgICAvLyBhZGp1c3QgdGhlIGNhbnZhcyBzaXplIGFzIHJlcXVpcmVkIHNvIHRoYXQgc3BvdHMgd2lsbCBmaXRcbiAgICAgICAgICAgICAgICBobFNwb3RzRW5hYmxlZCA9IG9wdGlvbnMuZ2V0KCdoaWdobGlnaHRTcG90Q29sb3InKSAmJiAgIW9wdGlvbnMuZ2V0KCdkaXNhYmxlSW50ZXJhY3Rpb24nKTtcbiAgICAgICAgICAgICAgICBpZiAoaGxTcG90c0VuYWJsZWQgfHwgb3B0aW9ucy5nZXQoJ21pblNwb3RDb2xvcicpIHx8IChvcHRpb25zLmdldCgnc3BvdENvbG9yJykgJiYgeXZhbHVlc1t5dmFsbGFzdF0gPT09IHRoaXMubWlueSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FudmFzSGVpZ2h0IC09IE1hdGguY2VpbChzcG90UmFkaXVzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGhsU3BvdHNFbmFibGVkIHx8IG9wdGlvbnMuZ2V0KCdtYXhTcG90Q29sb3InKSB8fCAob3B0aW9ucy5nZXQoJ3Nwb3RDb2xvcicpICYmIHl2YWx1ZXNbeXZhbGxhc3RdID09PSB0aGlzLm1heHkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbnZhc0hlaWdodCAtPSBNYXRoLmNlaWwoc3BvdFJhZGl1cyk7XG4gICAgICAgICAgICAgICAgICAgIGNhbnZhc1RvcCArPSBNYXRoLmNlaWwoc3BvdFJhZGl1cyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChobFNwb3RzRW5hYmxlZCB8fFxuICAgICAgICAgICAgICAgICAgICAgKChvcHRpb25zLmdldCgnbWluU3BvdENvbG9yJykgfHwgb3B0aW9ucy5nZXQoJ21heFNwb3RDb2xvcicpKSAmJiAoeXZhbHVlc1swXSA9PT0gdGhpcy5taW55IHx8IHl2YWx1ZXNbMF0gPT09IHRoaXMubWF4eSkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbnZhc0xlZnQgKz0gTWF0aC5jZWlsKHNwb3RSYWRpdXMpO1xuICAgICAgICAgICAgICAgICAgICBjYW52YXNXaWR0aCAtPSBNYXRoLmNlaWwoc3BvdFJhZGl1cyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChobFNwb3RzRW5hYmxlZCB8fCBvcHRpb25zLmdldCgnc3BvdENvbG9yJykgfHxcbiAgICAgICAgICAgICAgICAgICAgKG9wdGlvbnMuZ2V0KCdtaW5TcG90Q29sb3InKSB8fCBvcHRpb25zLmdldCgnbWF4U3BvdENvbG9yJykgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICh5dmFsdWVzW3l2YWxsYXN0XSA9PT0gdGhpcy5taW55IHx8IHl2YWx1ZXNbeXZhbGxhc3RdID09PSB0aGlzLm1heHkpKSkge1xuICAgICAgICAgICAgICAgICAgICBjYW52YXNXaWR0aCAtPSBNYXRoLmNlaWwoc3BvdFJhZGl1cyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgIGNhbnZhc0hlaWdodC0tO1xuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5nZXQoJ25vcm1hbFJhbmdlTWluJykgIT09IHVuZGVmaW5lZCAmJiAhb3B0aW9ucy5nZXQoJ2RyYXdOb3JtYWxPblRvcCcpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kcmF3Tm9ybWFsUmFuZ2UoY2FudmFzTGVmdCwgY2FudmFzVG9wLCBjYW52YXNIZWlnaHQsIGNhbnZhc1dpZHRoLCByYW5nZXkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBwYXRoID0gW107XG4gICAgICAgICAgICBwYXRocyA9IFtwYXRoXTtcbiAgICAgICAgICAgIGxhc3QgPSBuZXh0ID0gbnVsbDtcbiAgICAgICAgICAgIHl2YWxjb3VudCA9IHl2YWx1ZXMubGVuZ3RoO1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHl2YWxjb3VudDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgeCA9IHh2YWx1ZXNbaV07XG4gICAgICAgICAgICAgICAgeG5leHQgPSB4dmFsdWVzW2kgKyAxXTtcbiAgICAgICAgICAgICAgICB5ID0geXZhbHVlc1tpXTtcbiAgICAgICAgICAgICAgICB4cG9zID0gY2FudmFzTGVmdCArIE1hdGgucm91bmQoKHggLSB0aGlzLm1pbngpICogKGNhbnZhc1dpZHRoIC8gcmFuZ2V4KSk7XG4gICAgICAgICAgICAgICAgeHBvc25leHQgPSBpIDwgeXZhbGNvdW50IC0gMSA/IGNhbnZhc0xlZnQgKyBNYXRoLnJvdW5kKCh4bmV4dCAtIHRoaXMubWlueCkgKiAoY2FudmFzV2lkdGggLyByYW5nZXgpKSA6IGNhbnZhc1dpZHRoO1xuICAgICAgICAgICAgICAgIG5leHQgPSB4cG9zICsgKCh4cG9zbmV4dCAtIHhwb3MpIC8gMik7XG4gICAgICAgICAgICAgICAgcmVnaW9uTWFwW2ldID0gW2xhc3QgfHwgMCwgbmV4dCwgaV07XG4gICAgICAgICAgICAgICAgbGFzdCA9IG5leHQ7XG4gICAgICAgICAgICAgICAgaWYgKHkgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh5dmFsdWVzW2kgLSAxXSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdGggPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXRocy5wdXNoKHBhdGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdmVydGljZXMucHVzaChudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh5IDwgdGhpcy5taW55KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB5ID0gdGhpcy5taW55O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh5ID4gdGhpcy5tYXh5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB5ID0gdGhpcy5tYXh5O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICghcGF0aC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHByZXZpb3VzIHZhbHVlIHdhcyBudWxsXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXRoLnB1c2goW3hwb3MsIGNhbnZhc1RvcCArIGNhbnZhc0hlaWdodF0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZlcnRleCA9IFt4cG9zLCBjYW52YXNUb3AgKyBNYXRoLnJvdW5kKGNhbnZhc0hlaWdodCAtIChjYW52YXNIZWlnaHQgKiAoKHkgLSB0aGlzLm1pbnkpIC8gcmFuZ2V5KSkpXTtcbiAgICAgICAgICAgICAgICAgICAgcGF0aC5wdXNoKHZlcnRleCk7XG4gICAgICAgICAgICAgICAgICAgIHZlcnRpY2VzLnB1c2godmVydGV4KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxpbmVTaGFwZXMgPSBbXTtcbiAgICAgICAgICAgIGZpbGxTaGFwZXMgPSBbXTtcbiAgICAgICAgICAgIHBsZW4gPSBwYXRocy5sZW5ndGg7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgcGF0aCA9IHBhdGhzW2ldO1xuICAgICAgICAgICAgICAgIGlmIChwYXRoLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5nZXQoJ2ZpbGxDb2xvcicpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXRoLnB1c2goW3BhdGhbcGF0aC5sZW5ndGggLSAxXVswXSwgKGNhbnZhc1RvcCArIGNhbnZhc0hlaWdodCldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGxTaGFwZXMucHVzaChwYXRoLnNsaWNlKDApKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGgucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhlcmUncyBvbmx5IGEgc2luZ2xlIHBvaW50IGluIHRoaXMgcGF0aCwgdGhlbiB3ZSB3YW50IHRvIGRpc3BsYXkgaXRcbiAgICAgICAgICAgICAgICAgICAgLy8gYXMgYSB2ZXJ0aWNhbCBsaW5lIHdoaWNoIG1lYW5zIHdlIGtlZXAgcGF0aFswXSAgYXMgaXNcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhdGgubGVuZ3RoID4gMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZWxzZSB3ZSB3YW50IHRoZSBmaXJzdCB2YWx1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aFswXSA9IFtwYXRoWzBdWzBdLCBwYXRoWzFdWzFdXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBsaW5lU2hhcGVzLnB1c2gocGF0aCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBkcmF3IHRoZSBmaWxsIGZpcnN0LCB0aGVuIG9wdGlvbmFsbHkgdGhlIG5vcm1hbCByYW5nZSwgdGhlbiB0aGUgbGluZSBvbiB0b3Agb2YgdGhhdFxuICAgICAgICAgICAgcGxlbiA9IGZpbGxTaGFwZXMubGVuZ3RoO1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgIHRhcmdldC5kcmF3U2hhcGUoZmlsbFNoYXBlc1tpXSxcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5nZXQoJ2ZpbGxDb2xvcicpLCBvcHRpb25zLmdldCgnZmlsbENvbG9yJykpLmFwcGVuZCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5nZXQoJ25vcm1hbFJhbmdlTWluJykgIT09IHVuZGVmaW5lZCAmJiBvcHRpb25zLmdldCgnZHJhd05vcm1hbE9uVG9wJykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRyYXdOb3JtYWxSYW5nZShjYW52YXNMZWZ0LCBjYW52YXNUb3AsIGNhbnZhc0hlaWdodCwgY2FudmFzV2lkdGgsIHJhbmdleSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHBsZW4gPSBsaW5lU2hhcGVzLmxlbmd0aDtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBwbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICB0YXJnZXQuZHJhd1NoYXBlKGxpbmVTaGFwZXNbaV0sIG9wdGlvbnMuZ2V0KCdsaW5lQ29sb3InKSwgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmdldCgnbGluZVdpZHRoJykpLmFwcGVuZCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoc3BvdFJhZGl1cyAmJiBvcHRpb25zLmdldCgndmFsdWVTcG90cycpKSB7XG4gICAgICAgICAgICAgICAgdmFsdWVTcG90cyA9IG9wdGlvbnMuZ2V0KCd2YWx1ZVNwb3RzJyk7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlU3BvdHMuZ2V0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVTcG90cyA9IG5ldyBSYW5nZU1hcCh2YWx1ZVNwb3RzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHl2YWxjb3VudDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yID0gdmFsdWVTcG90cy5nZXQoeXZhbHVlc1tpXSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb2xvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LmRyYXdDaXJjbGUoY2FudmFzTGVmdCArIE1hdGgucm91bmQoKHh2YWx1ZXNbaV0gLSB0aGlzLm1pbngpICogKGNhbnZhc1dpZHRoIC8gcmFuZ2V4KSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FudmFzVG9wICsgTWF0aC5yb3VuZChjYW52YXNIZWlnaHQgLSAoY2FudmFzSGVpZ2h0ICogKCh5dmFsdWVzW2ldIC0gdGhpcy5taW55KSAvIHJhbmdleSkpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcG90UmFkaXVzLCB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3IpLmFwcGVuZCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc3BvdFJhZGl1cyAmJiBvcHRpb25zLmdldCgnc3BvdENvbG9yJykgJiYgeXZhbHVlc1t5dmFsbGFzdF0gIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXQuZHJhd0NpcmNsZShjYW52YXNMZWZ0ICsgTWF0aC5yb3VuZCgoeHZhbHVlc1t4dmFsdWVzLmxlbmd0aCAtIDFdIC0gdGhpcy5taW54KSAqIChjYW52YXNXaWR0aCAvIHJhbmdleCkpLFxuICAgICAgICAgICAgICAgICAgICBjYW52YXNUb3AgKyBNYXRoLnJvdW5kKGNhbnZhc0hlaWdodCAtIChjYW52YXNIZWlnaHQgKiAoKHl2YWx1ZXNbeXZhbGxhc3RdIC0gdGhpcy5taW55KSAvIHJhbmdleSkpKSxcbiAgICAgICAgICAgICAgICAgICAgc3BvdFJhZGl1cywgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmdldCgnc3BvdENvbG9yJykpLmFwcGVuZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMubWF4eSAhPT0gdGhpcy5taW55b3JnKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNwb3RSYWRpdXMgJiYgb3B0aW9ucy5nZXQoJ21pblNwb3RDb2xvcicpKSB7XG4gICAgICAgICAgICAgICAgICAgIHggPSB4dmFsdWVzWyQuaW5BcnJheSh0aGlzLm1pbnlvcmcsIHl2YWx1ZXMpXTtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LmRyYXdDaXJjbGUoY2FudmFzTGVmdCArIE1hdGgucm91bmQoKHggLSB0aGlzLm1pbngpICogKGNhbnZhc1dpZHRoIC8gcmFuZ2V4KSksXG4gICAgICAgICAgICAgICAgICAgICAgICBjYW52YXNUb3AgKyBNYXRoLnJvdW5kKGNhbnZhc0hlaWdodCAtIChjYW52YXNIZWlnaHQgKiAoKHRoaXMubWlueW9yZyAtIHRoaXMubWlueSkgLyByYW5nZXkpKSksXG4gICAgICAgICAgICAgICAgICAgICAgICBzcG90UmFkaXVzLCB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmdldCgnbWluU3BvdENvbG9yJykpLmFwcGVuZCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoc3BvdFJhZGl1cyAmJiBvcHRpb25zLmdldCgnbWF4U3BvdENvbG9yJykpIHtcbiAgICAgICAgICAgICAgICAgICAgeCA9IHh2YWx1ZXNbJC5pbkFycmF5KHRoaXMubWF4eW9yZywgeXZhbHVlcyldO1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXQuZHJhd0NpcmNsZShjYW52YXNMZWZ0ICsgTWF0aC5yb3VuZCgoeCAtIHRoaXMubWlueCkgKiAoY2FudmFzV2lkdGggLyByYW5nZXgpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbnZhc1RvcCArIE1hdGgucm91bmQoY2FudmFzSGVpZ2h0IC0gKGNhbnZhc0hlaWdodCAqICgodGhpcy5tYXh5b3JnIC0gdGhpcy5taW55KSAvIHJhbmdleSkpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNwb3RSYWRpdXMsIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuZ2V0KCdtYXhTcG90Q29sb3InKSkuYXBwZW5kKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmxhc3RTaGFwZUlkID0gdGFyZ2V0LmdldExhc3RTaGFwZUlkKCk7XG4gICAgICAgICAgICB0aGlzLmNhbnZhc1RvcCA9IGNhbnZhc1RvcDtcbiAgICAgICAgICAgIHRhcmdldC5yZW5kZXIoKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQmFyIGNoYXJ0c1xuICAgICAqL1xuICAgICQuZm4uc3BhcmtsaW5lLmJhciA9IGJhciA9IGNyZWF0ZUNsYXNzKCQuZm4uc3BhcmtsaW5lLl9iYXNlLCBiYXJIaWdobGlnaHRNaXhpbiwge1xuICAgICAgICB0eXBlOiAnYmFyJyxcblxuICAgICAgICBpbml0OiBmdW5jdGlvbiAoZWwsIHZhbHVlcywgb3B0aW9ucywgd2lkdGgsIGhlaWdodCkge1xuICAgICAgICAgICAgdmFyIGJhcldpZHRoID0gcGFyc2VJbnQob3B0aW9ucy5nZXQoJ2JhcldpZHRoJyksIDEwKSxcbiAgICAgICAgICAgICAgICBiYXJTcGFjaW5nID0gcGFyc2VJbnQob3B0aW9ucy5nZXQoJ2JhclNwYWNpbmcnKSwgMTApLFxuICAgICAgICAgICAgICAgIGNoYXJ0UmFuZ2VNaW4gPSBvcHRpb25zLmdldCgnY2hhcnRSYW5nZU1pbicpLFxuICAgICAgICAgICAgICAgIGNoYXJ0UmFuZ2VNYXggPSBvcHRpb25zLmdldCgnY2hhcnRSYW5nZU1heCcpLFxuICAgICAgICAgICAgICAgIGNoYXJ0UmFuZ2VDbGlwID0gb3B0aW9ucy5nZXQoJ2NoYXJ0UmFuZ2VDbGlwJyksXG4gICAgICAgICAgICAgICAgc3RhY2tNaW4gPSBJbmZpbml0eSxcbiAgICAgICAgICAgICAgICBzdGFja01heCA9IC1JbmZpbml0eSxcbiAgICAgICAgICAgICAgICBpc1N0YWNrU3RyaW5nLCBncm91cE1pbiwgZ3JvdXBNYXgsIHN0YWNrUmFuZ2VzLFxuICAgICAgICAgICAgICAgIG51bVZhbHVlcywgaSwgdmxlbiwgcmFuZ2UsIHplcm9BeGlzLCB4YXhpc09mZnNldCwgbWluLCBtYXgsIGNsaXBNaW4sIGNsaXBNYXgsXG4gICAgICAgICAgICAgICAgc3RhY2tlZCwgdmxpc3QsIGosIHNsZW4sIHN2YWxzLCB2YWwsIHlvZmZzZXQsIHlNYXhDYWxjLCBjYW52YXNIZWlnaHRFZjtcbiAgICAgICAgICAgIGJhci5fc3VwZXIuaW5pdC5jYWxsKHRoaXMsIGVsLCB2YWx1ZXMsIG9wdGlvbnMsIHdpZHRoLCBoZWlnaHQpO1xuXG4gICAgICAgICAgICAvLyBzY2FuIHZhbHVlcyB0byBkZXRlcm1pbmUgd2hldGhlciB0byBzdGFjayBiYXJzXG4gICAgICAgICAgICBmb3IgKGkgPSAwLCB2bGVuID0gdmFsdWVzLmxlbmd0aDsgaSA8IHZsZW47IGkrKykge1xuICAgICAgICAgICAgICAgIHZhbCA9IHZhbHVlc1tpXTtcbiAgICAgICAgICAgICAgICBpc1N0YWNrU3RyaW5nID0gdHlwZW9mKHZhbCkgPT09ICdzdHJpbmcnICYmIHZhbC5pbmRleE9mKCc6JykgPiAtMTtcbiAgICAgICAgICAgICAgICBpZiAoaXNTdGFja1N0cmluZyB8fCAkLmlzQXJyYXkodmFsKSkge1xuICAgICAgICAgICAgICAgICAgICBzdGFja2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzU3RhY2tTdHJpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbCA9IHZhbHVlc1tpXSA9IG5vcm1hbGl6ZVZhbHVlcyh2YWwuc3BsaXQoJzonKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFsID0gcmVtb3ZlKHZhbCwgbnVsbCk7IC8vIG1pbi9tYXggd2lsbCB0cmVhdCBudWxsIGFzIHplcm9cbiAgICAgICAgICAgICAgICAgICAgZ3JvdXBNaW4gPSBNYXRoLm1pbi5hcHBseShNYXRoLCB2YWwpO1xuICAgICAgICAgICAgICAgICAgICBncm91cE1heCA9IE1hdGgubWF4LmFwcGx5KE1hdGgsIHZhbCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChncm91cE1pbiA8IHN0YWNrTWluKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFja01pbiA9IGdyb3VwTWluO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChncm91cE1heCA+IHN0YWNrTWF4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFja01heCA9IGdyb3VwTWF4O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnN0YWNrZWQgPSBzdGFja2VkO1xuICAgICAgICAgICAgdGhpcy5yZWdpb25TaGFwZXMgPSB7fTtcbiAgICAgICAgICAgIHRoaXMuYmFyV2lkdGggPSBiYXJXaWR0aDtcbiAgICAgICAgICAgIHRoaXMuYmFyU3BhY2luZyA9IGJhclNwYWNpbmc7XG4gICAgICAgICAgICB0aGlzLnRvdGFsQmFyV2lkdGggPSBiYXJXaWR0aCArIGJhclNwYWNpbmc7XG4gICAgICAgICAgICB0aGlzLndpZHRoID0gd2lkdGggPSAodmFsdWVzLmxlbmd0aCAqIGJhcldpZHRoKSArICgodmFsdWVzLmxlbmd0aCAtIDEpICogYmFyU3BhY2luZyk7XG5cbiAgICAgICAgICAgIHRoaXMuaW5pdFRhcmdldCgpO1xuXG4gICAgICAgICAgICBpZiAoY2hhcnRSYW5nZUNsaXApIHtcbiAgICAgICAgICAgICAgICBjbGlwTWluID0gY2hhcnRSYW5nZU1pbiA9PT0gdW5kZWZpbmVkID8gLUluZmluaXR5IDogY2hhcnRSYW5nZU1pbjtcbiAgICAgICAgICAgICAgICBjbGlwTWF4ID0gY2hhcnRSYW5nZU1heCA9PT0gdW5kZWZpbmVkID8gSW5maW5pdHkgOiBjaGFydFJhbmdlTWF4O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBudW1WYWx1ZXMgPSBbXTtcbiAgICAgICAgICAgIHN0YWNrUmFuZ2VzID0gc3RhY2tlZCA/IFtdIDogbnVtVmFsdWVzO1xuICAgICAgICAgICAgdmFyIHN0YWNrVG90YWxzID0gW107XG4gICAgICAgICAgICB2YXIgc3RhY2tSYW5nZXNOZWcgPSBbXTtcbiAgICAgICAgICAgIGZvciAoaSA9IDAsIHZsZW4gPSB2YWx1ZXMubGVuZ3RoOyBpIDwgdmxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKHN0YWNrZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmxpc3QgPSB2YWx1ZXNbaV07XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlc1tpXSA9IHN2YWxzID0gW107XG4gICAgICAgICAgICAgICAgICAgIHN0YWNrVG90YWxzW2ldID0gMDtcbiAgICAgICAgICAgICAgICAgICAgc3RhY2tSYW5nZXNbaV0gPSBzdGFja1Jhbmdlc05lZ1tpXSA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoaiA9IDAsIHNsZW4gPSB2bGlzdC5sZW5ndGg7IGogPCBzbGVuOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbCA9IHN2YWxzW2pdID0gY2hhcnRSYW5nZUNsaXAgPyBjbGlwdmFsKHZsaXN0W2pdLCBjbGlwTWluLCBjbGlwTWF4KSA6IHZsaXN0W2pdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWwgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWNrVG90YWxzW2ldICs9IHZhbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YWNrTWluIDwgMCAmJiBzdGFja01heCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbCA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWNrUmFuZ2VzTmVnW2ldICs9IE1hdGguYWJzKHZhbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFja1Jhbmdlc1tpXSArPSB2YWw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFja1Jhbmdlc1tpXSArPSBNYXRoLmFicyh2YWwgLSAodmFsIDwgMCA/IHN0YWNrTWF4IDogc3RhY2tNaW4pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVtVmFsdWVzLnB1c2godmFsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbCA9IGNoYXJ0UmFuZ2VDbGlwID8gY2xpcHZhbCh2YWx1ZXNbaV0sIGNsaXBNaW4sIGNsaXBNYXgpIDogdmFsdWVzW2ldO1xuICAgICAgICAgICAgICAgICAgICB2YWwgPSB2YWx1ZXNbaV0gPSBub3JtYWxpemVWYWx1ZSh2YWwpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodmFsICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBudW1WYWx1ZXMucHVzaCh2YWwpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5tYXggPSBtYXggPSBNYXRoLm1heC5hcHBseShNYXRoLCBudW1WYWx1ZXMpO1xuICAgICAgICAgICAgdGhpcy5taW4gPSBtaW4gPSBNYXRoLm1pbi5hcHBseShNYXRoLCBudW1WYWx1ZXMpO1xuICAgICAgICAgICAgdGhpcy5zdGFja01heCA9IHN0YWNrTWF4ID0gc3RhY2tlZCA/IE1hdGgubWF4LmFwcGx5KE1hdGgsIHN0YWNrVG90YWxzKSA6IG1heDtcbiAgICAgICAgICAgIHRoaXMuc3RhY2tNaW4gPSBzdGFja01pbiA9IHN0YWNrZWQgPyBNYXRoLm1pbi5hcHBseShNYXRoLCBudW1WYWx1ZXMpIDogbWluO1xuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5nZXQoJ2NoYXJ0UmFuZ2VNaW4nKSAhPT0gdW5kZWZpbmVkICYmIChvcHRpb25zLmdldCgnY2hhcnRSYW5nZUNsaXAnKSB8fCBvcHRpb25zLmdldCgnY2hhcnRSYW5nZU1pbicpIDwgbWluKSkge1xuICAgICAgICAgICAgICAgIG1pbiA9IG9wdGlvbnMuZ2V0KCdjaGFydFJhbmdlTWluJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5nZXQoJ2NoYXJ0UmFuZ2VNYXgnKSAhPT0gdW5kZWZpbmVkICYmIChvcHRpb25zLmdldCgnY2hhcnRSYW5nZUNsaXAnKSB8fCBvcHRpb25zLmdldCgnY2hhcnRSYW5nZU1heCcpID4gbWF4KSkge1xuICAgICAgICAgICAgICAgIG1heCA9IG9wdGlvbnMuZ2V0KCdjaGFydFJhbmdlTWF4Jyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuemVyb0F4aXMgPSB6ZXJvQXhpcyA9IG9wdGlvbnMuZ2V0KCd6ZXJvQXhpcycsIHRydWUpO1xuICAgICAgICAgICAgaWYgKG1pbiA8PSAwICYmIG1heCA+PSAwICYmIHplcm9BeGlzKSB7XG4gICAgICAgICAgICAgICAgeGF4aXNPZmZzZXQgPSAwO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh6ZXJvQXhpcyA9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHhheGlzT2Zmc2V0ID0gbWluO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtaW4gPiAwKSB7XG4gICAgICAgICAgICAgICAgeGF4aXNPZmZzZXQgPSBtaW47XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHhheGlzT2Zmc2V0ID0gbWF4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy54YXhpc09mZnNldCA9IHhheGlzT2Zmc2V0O1xuXG4gICAgICAgICAgICByYW5nZSA9IHN0YWNrZWQgPyAoTWF0aC5tYXguYXBwbHkoTWF0aCwgc3RhY2tSYW5nZXMpICsgTWF0aC5tYXguYXBwbHkoTWF0aCwgc3RhY2tSYW5nZXNOZWcpKSA6IG1heCAtIG1pbjtcblxuICAgICAgICAgICAgLy8gYXMgd2UgcGxvdCB6ZXJvL21pbiB2YWx1ZXMgYSBzaW5nbGUgcGl4ZWwgbGluZSwgd2UgYWRkIGEgcGl4ZWwgdG8gYWxsIG90aGVyXG4gICAgICAgICAgICAvLyB2YWx1ZXMgLSBSZWR1Y2UgdGhlIGVmZmVjdGl2ZSBjYW52YXMgc2l6ZSB0byBzdWl0XG4gICAgICAgICAgICB0aGlzLmNhbnZhc0hlaWdodEVmID0gKHplcm9BeGlzICYmIG1pbiA8IDApID8gdGhpcy5jYW52YXNIZWlnaHQgLSAyIDogdGhpcy5jYW52YXNIZWlnaHQgLSAxO1xuXG4gICAgICAgICAgICBpZiAobWluIDwgeGF4aXNPZmZzZXQpIHtcbiAgICAgICAgICAgICAgICB5TWF4Q2FsYyA9IChzdGFja2VkICYmIG1heCA+PSAwKSA/IHN0YWNrTWF4IDogbWF4O1xuICAgICAgICAgICAgICAgIHlvZmZzZXQgPSAoeU1heENhbGMgLSB4YXhpc09mZnNldCkgLyByYW5nZSAqIHRoaXMuY2FudmFzSGVpZ2h0O1xuICAgICAgICAgICAgICAgIGlmICh5b2Zmc2V0ICE9PSBNYXRoLmNlaWwoeW9mZnNldCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYW52YXNIZWlnaHRFZiAtPSAyO1xuICAgICAgICAgICAgICAgICAgICB5b2Zmc2V0ID0gTWF0aC5jZWlsKHlvZmZzZXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgeW9mZnNldCA9IHRoaXMuY2FudmFzSGVpZ2h0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy55b2Zmc2V0ID0geW9mZnNldDtcblxuICAgICAgICAgICAgaWYgKCQuaXNBcnJheShvcHRpb25zLmdldCgnY29sb3JNYXAnKSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbG9yTWFwQnlJbmRleCA9IG9wdGlvbnMuZ2V0KCdjb2xvck1hcCcpO1xuICAgICAgICAgICAgICAgIHRoaXMuY29sb3JNYXBCeVZhbHVlID0gbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb2xvck1hcEJ5SW5kZXggPSBudWxsO1xuICAgICAgICAgICAgICAgIHRoaXMuY29sb3JNYXBCeVZhbHVlID0gb3B0aW9ucy5nZXQoJ2NvbG9yTWFwJyk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY29sb3JNYXBCeVZhbHVlICYmIHRoaXMuY29sb3JNYXBCeVZhbHVlLmdldCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29sb3JNYXBCeVZhbHVlID0gbmV3IFJhbmdlTWFwKHRoaXMuY29sb3JNYXBCeVZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMucmFuZ2UgPSByYW5nZTtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXRSZWdpb246IGZ1bmN0aW9uIChlbCwgeCwgeSkge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IE1hdGguZmxvb3IoeCAvIHRoaXMudG90YWxCYXJXaWR0aCk7XG4gICAgICAgICAgICByZXR1cm4gKHJlc3VsdCA8IDAgfHwgcmVzdWx0ID49IHRoaXMudmFsdWVzLmxlbmd0aCkgPyB1bmRlZmluZWQgOiByZXN1bHQ7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0Q3VycmVudFJlZ2lvbkZpZWxkczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRSZWdpb24gPSB0aGlzLmN1cnJlbnRSZWdpb24sXG4gICAgICAgICAgICAgICAgdmFsdWVzID0gZW5zdXJlQXJyYXkodGhpcy52YWx1ZXNbY3VycmVudFJlZ2lvbl0pLFxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IFtdLFxuICAgICAgICAgICAgICAgIHZhbHVlLCBpO1xuICAgICAgICAgICAgZm9yIChpID0gdmFsdWVzLmxlbmd0aDsgaS0tOykge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWVzW2ldO1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgaXNOdWxsOiB2YWx1ZSA9PT0gbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgICAgICAgICAgICBjb2xvcjogdGhpcy5jYWxjQ29sb3IoaSwgdmFsdWUsIGN1cnJlbnRSZWdpb24pLFxuICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IGN1cnJlbnRSZWdpb25cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0sXG5cbiAgICAgICAgY2FsY0NvbG9yOiBmdW5jdGlvbiAoc3RhY2tudW0sIHZhbHVlLCB2YWx1ZW51bSkge1xuICAgICAgICAgICAgdmFyIGNvbG9yTWFwQnlJbmRleCA9IHRoaXMuY29sb3JNYXBCeUluZGV4LFxuICAgICAgICAgICAgICAgIGNvbG9yTWFwQnlWYWx1ZSA9IHRoaXMuY29sb3JNYXBCeVZhbHVlLFxuICAgICAgICAgICAgICAgIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgY29sb3IsIG5ld0NvbG9yO1xuICAgICAgICAgICAgaWYgKHRoaXMuc3RhY2tlZCkge1xuICAgICAgICAgICAgICAgIGNvbG9yID0gb3B0aW9ucy5nZXQoJ3N0YWNrZWRCYXJDb2xvcicpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb2xvciA9ICh2YWx1ZSA8IDApID8gb3B0aW9ucy5nZXQoJ25lZ0JhckNvbG9yJykgOiBvcHRpb25zLmdldCgnYmFyQ29sb3InKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gMCAmJiBvcHRpb25zLmdldCgnemVyb0NvbG9yJykgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGNvbG9yID0gb3B0aW9ucy5nZXQoJ3plcm9Db2xvcicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNvbG9yTWFwQnlWYWx1ZSAmJiAobmV3Q29sb3IgPSBjb2xvck1hcEJ5VmFsdWUuZ2V0KHZhbHVlKSkpIHtcbiAgICAgICAgICAgICAgICBjb2xvciA9IG5ld0NvbG9yO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjb2xvck1hcEJ5SW5kZXggJiYgY29sb3JNYXBCeUluZGV4Lmxlbmd0aCA+IHZhbHVlbnVtKSB7XG4gICAgICAgICAgICAgICAgY29sb3IgPSBjb2xvck1hcEJ5SW5kZXhbdmFsdWVudW1dO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICQuaXNBcnJheShjb2xvcikgPyBjb2xvcltzdGFja251bSAlIGNvbG9yLmxlbmd0aF0gOiBjb2xvcjtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogUmVuZGVyIGJhcihzKSBmb3IgYSByZWdpb25cbiAgICAgICAgICovXG4gICAgICAgIHJlbmRlclJlZ2lvbjogZnVuY3Rpb24gKHZhbHVlbnVtLCBoaWdobGlnaHQpIHtcbiAgICAgICAgICAgIHZhciB2YWxzID0gdGhpcy52YWx1ZXNbdmFsdWVudW1dLFxuICAgICAgICAgICAgICAgIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgeGF4aXNPZmZzZXQgPSB0aGlzLnhheGlzT2Zmc2V0LFxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IFtdLFxuICAgICAgICAgICAgICAgIHJhbmdlID0gdGhpcy5yYW5nZSxcbiAgICAgICAgICAgICAgICBzdGFja2VkID0gdGhpcy5zdGFja2VkLFxuICAgICAgICAgICAgICAgIHRhcmdldCA9IHRoaXMudGFyZ2V0LFxuICAgICAgICAgICAgICAgIHggPSB2YWx1ZW51bSAqIHRoaXMudG90YWxCYXJXaWR0aCxcbiAgICAgICAgICAgICAgICBjYW52YXNIZWlnaHRFZiA9IHRoaXMuY2FudmFzSGVpZ2h0RWYsXG4gICAgICAgICAgICAgICAgeW9mZnNldCA9IHRoaXMueW9mZnNldCxcbiAgICAgICAgICAgICAgICB5LCBoZWlnaHQsIGNvbG9yLCBpc051bGwsIHlvZmZzZXROZWcsIGksIHZhbGNvdW50LCB2YWwsIG1pblBsb3R0ZWQsIGFsbE1pbjtcblxuICAgICAgICAgICAgdmFscyA9ICQuaXNBcnJheSh2YWxzKSA/IHZhbHMgOiBbdmFsc107XG4gICAgICAgICAgICB2YWxjb3VudCA9IHZhbHMubGVuZ3RoO1xuICAgICAgICAgICAgdmFsID0gdmFsc1swXTtcbiAgICAgICAgICAgIGlzTnVsbCA9IGFsbChudWxsLCB2YWxzKTtcbiAgICAgICAgICAgIGFsbE1pbiA9IGFsbCh4YXhpc09mZnNldCwgdmFscywgdHJ1ZSk7XG5cbiAgICAgICAgICAgIGlmIChpc051bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5nZXQoJ251bGxDb2xvcicpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yID0gaGlnaGxpZ2h0ID8gb3B0aW9ucy5nZXQoJ251bGxDb2xvcicpIDogdGhpcy5jYWxjSGlnaGxpZ2h0Q29sb3Iob3B0aW9ucy5nZXQoJ251bGxDb2xvcicpLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgeSA9ICh5b2Zmc2V0ID4gMCkgPyB5b2Zmc2V0IC0gMSA6IHlvZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXQuZHJhd1JlY3QoeCwgeSwgdGhpcy5iYXJXaWR0aCAtIDEsIDAsIGNvbG9yLCBjb2xvcik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB5b2Zmc2V0TmVnID0geW9mZnNldDtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCB2YWxjb3VudDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFsID0gdmFsc1tpXTtcblxuICAgICAgICAgICAgICAgIGlmIChzdGFja2VkICYmIHZhbCA9PT0geGF4aXNPZmZzZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFhbGxNaW4gfHwgbWluUGxvdHRlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWluUGxvdHRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHJhbmdlID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBNYXRoLmZsb29yKGNhbnZhc0hlaWdodEVmICogKChNYXRoLmFicyh2YWwgLSB4YXhpc09mZnNldCkgLyByYW5nZSkpKSArIDE7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHZhbCA8IHhheGlzT2Zmc2V0IHx8ICh2YWwgPT09IHhheGlzT2Zmc2V0ICYmIHlvZmZzZXQgPT09IDApKSB7XG4gICAgICAgICAgICAgICAgICAgIHkgPSB5b2Zmc2V0TmVnO1xuICAgICAgICAgICAgICAgICAgICB5b2Zmc2V0TmVnICs9IGhlaWdodDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB5ID0geW9mZnNldCAtIGhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgeW9mZnNldCAtPSBoZWlnaHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbG9yID0gdGhpcy5jYWxjQ29sb3IoaSwgdmFsLCB2YWx1ZW51bSk7XG4gICAgICAgICAgICAgICAgaWYgKGhpZ2hsaWdodCkge1xuICAgICAgICAgICAgICAgICAgICBjb2xvciA9IHRoaXMuY2FsY0hpZ2hsaWdodENvbG9yKGNvbG9yLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2godGFyZ2V0LmRyYXdSZWN0KHgsIHksIHRoaXMuYmFyV2lkdGggLSAxLCBoZWlnaHQgLSAxLCBjb2xvciwgY29sb3IpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyZXN1bHQubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdFswXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRyaXN0YXRlIGNoYXJ0c1xuICAgICAqL1xuICAgICQuZm4uc3BhcmtsaW5lLnRyaXN0YXRlID0gdHJpc3RhdGUgPSBjcmVhdGVDbGFzcygkLmZuLnNwYXJrbGluZS5fYmFzZSwgYmFySGlnaGxpZ2h0TWl4aW4sIHtcbiAgICAgICAgdHlwZTogJ3RyaXN0YXRlJyxcblxuICAgICAgICBpbml0OiBmdW5jdGlvbiAoZWwsIHZhbHVlcywgb3B0aW9ucywgd2lkdGgsIGhlaWdodCkge1xuICAgICAgICAgICAgdmFyIGJhcldpZHRoID0gcGFyc2VJbnQob3B0aW9ucy5nZXQoJ2JhcldpZHRoJyksIDEwKSxcbiAgICAgICAgICAgICAgICBiYXJTcGFjaW5nID0gcGFyc2VJbnQob3B0aW9ucy5nZXQoJ2JhclNwYWNpbmcnKSwgMTApO1xuICAgICAgICAgICAgdHJpc3RhdGUuX3N1cGVyLmluaXQuY2FsbCh0aGlzLCBlbCwgdmFsdWVzLCBvcHRpb25zLCB3aWR0aCwgaGVpZ2h0KTtcblxuICAgICAgICAgICAgdGhpcy5yZWdpb25TaGFwZXMgPSB7fTtcbiAgICAgICAgICAgIHRoaXMuYmFyV2lkdGggPSBiYXJXaWR0aDtcbiAgICAgICAgICAgIHRoaXMuYmFyU3BhY2luZyA9IGJhclNwYWNpbmc7XG4gICAgICAgICAgICB0aGlzLnRvdGFsQmFyV2lkdGggPSBiYXJXaWR0aCArIGJhclNwYWNpbmc7XG4gICAgICAgICAgICB0aGlzLnZhbHVlcyA9ICQubWFwKHZhbHVlcywgTnVtYmVyKTtcbiAgICAgICAgICAgIHRoaXMud2lkdGggPSB3aWR0aCA9ICh2YWx1ZXMubGVuZ3RoICogYmFyV2lkdGgpICsgKCh2YWx1ZXMubGVuZ3RoIC0gMSkgKiBiYXJTcGFjaW5nKTtcblxuICAgICAgICAgICAgaWYgKCQuaXNBcnJheShvcHRpb25zLmdldCgnY29sb3JNYXAnKSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbG9yTWFwQnlJbmRleCA9IG9wdGlvbnMuZ2V0KCdjb2xvck1hcCcpO1xuICAgICAgICAgICAgICAgIHRoaXMuY29sb3JNYXBCeVZhbHVlID0gbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb2xvck1hcEJ5SW5kZXggPSBudWxsO1xuICAgICAgICAgICAgICAgIHRoaXMuY29sb3JNYXBCeVZhbHVlID0gb3B0aW9ucy5nZXQoJ2NvbG9yTWFwJyk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY29sb3JNYXBCeVZhbHVlICYmIHRoaXMuY29sb3JNYXBCeVZhbHVlLmdldCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29sb3JNYXBCeVZhbHVlID0gbmV3IFJhbmdlTWFwKHRoaXMuY29sb3JNYXBCeVZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmluaXRUYXJnZXQoKTtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXRSZWdpb246IGZ1bmN0aW9uIChlbCwgeCwgeSkge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoeCAvIHRoaXMudG90YWxCYXJXaWR0aCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0Q3VycmVudFJlZ2lvbkZpZWxkczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRSZWdpb24gPSB0aGlzLmN1cnJlbnRSZWdpb247XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGlzTnVsbDogdGhpcy52YWx1ZXNbY3VycmVudFJlZ2lvbl0gPT09IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy52YWx1ZXNbY3VycmVudFJlZ2lvbl0sXG4gICAgICAgICAgICAgICAgY29sb3I6IHRoaXMuY2FsY0NvbG9yKHRoaXMudmFsdWVzW2N1cnJlbnRSZWdpb25dLCBjdXJyZW50UmVnaW9uKSxcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IGN1cnJlbnRSZWdpb25cbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG5cbiAgICAgICAgY2FsY0NvbG9yOiBmdW5jdGlvbiAodmFsdWUsIHZhbHVlbnVtKSB7XG4gICAgICAgICAgICB2YXIgdmFsdWVzID0gdGhpcy52YWx1ZXMsXG4gICAgICAgICAgICAgICAgb3B0aW9ucyA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgICAgICAgICBjb2xvck1hcEJ5SW5kZXggPSB0aGlzLmNvbG9yTWFwQnlJbmRleCxcbiAgICAgICAgICAgICAgICBjb2xvck1hcEJ5VmFsdWUgPSB0aGlzLmNvbG9yTWFwQnlWYWx1ZSxcbiAgICAgICAgICAgICAgICBjb2xvciwgbmV3Q29sb3I7XG5cbiAgICAgICAgICAgIGlmIChjb2xvck1hcEJ5VmFsdWUgJiYgKG5ld0NvbG9yID0gY29sb3JNYXBCeVZhbHVlLmdldCh2YWx1ZSkpKSB7XG4gICAgICAgICAgICAgICAgY29sb3IgPSBuZXdDb2xvcjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY29sb3JNYXBCeUluZGV4ICYmIGNvbG9yTWFwQnlJbmRleC5sZW5ndGggPiB2YWx1ZW51bSkge1xuICAgICAgICAgICAgICAgIGNvbG9yID0gY29sb3JNYXBCeUluZGV4W3ZhbHVlbnVtXTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodmFsdWVzW3ZhbHVlbnVtXSA8IDApIHtcbiAgICAgICAgICAgICAgICBjb2xvciA9IG9wdGlvbnMuZ2V0KCduZWdCYXJDb2xvcicpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZXNbdmFsdWVudW1dID4gMCkge1xuICAgICAgICAgICAgICAgIGNvbG9yID0gb3B0aW9ucy5nZXQoJ3Bvc0JhckNvbG9yJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbG9yID0gb3B0aW9ucy5nZXQoJ3plcm9CYXJDb2xvcicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNvbG9yO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlbmRlclJlZ2lvbjogZnVuY3Rpb24gKHZhbHVlbnVtLCBoaWdobGlnaHQpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZXMgPSB0aGlzLnZhbHVlcyxcbiAgICAgICAgICAgICAgICBvcHRpb25zID0gdGhpcy5vcHRpb25zLFxuICAgICAgICAgICAgICAgIHRhcmdldCA9IHRoaXMudGFyZ2V0LFxuICAgICAgICAgICAgICAgIGNhbnZhc0hlaWdodCwgaGVpZ2h0LCBoYWxmSGVpZ2h0LFxuICAgICAgICAgICAgICAgIHgsIHksIGNvbG9yO1xuXG4gICAgICAgICAgICBjYW52YXNIZWlnaHQgPSB0YXJnZXQucGl4ZWxIZWlnaHQ7XG4gICAgICAgICAgICBoYWxmSGVpZ2h0ID0gTWF0aC5yb3VuZChjYW52YXNIZWlnaHQgLyAyKTtcblxuICAgICAgICAgICAgeCA9IHZhbHVlbnVtICogdGhpcy50b3RhbEJhcldpZHRoO1xuICAgICAgICAgICAgaWYgKHZhbHVlc1t2YWx1ZW51bV0gPCAwKSB7XG4gICAgICAgICAgICAgICAgeSA9IGhhbGZIZWlnaHQ7XG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGFsZkhlaWdodCAtIDE7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlc1t2YWx1ZW51bV0gPiAwKSB7XG4gICAgICAgICAgICAgICAgeSA9IDA7XG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGFsZkhlaWdodCAtIDE7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHkgPSBoYWxmSGVpZ2h0IC0gMTtcbiAgICAgICAgICAgICAgICBoZWlnaHQgPSAyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29sb3IgPSB0aGlzLmNhbGNDb2xvcih2YWx1ZXNbdmFsdWVudW1dLCB2YWx1ZW51bSk7XG4gICAgICAgICAgICBpZiAoY29sb3IgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaGlnaGxpZ2h0KSB7XG4gICAgICAgICAgICAgICAgY29sb3IgPSB0aGlzLmNhbGNIaWdobGlnaHRDb2xvcihjb2xvciwgb3B0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0LmRyYXdSZWN0KHgsIHksIHRoaXMuYmFyV2lkdGggLSAxLCBoZWlnaHQgLSAxLCBjb2xvciwgY29sb3IpO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBEaXNjcmV0ZSBjaGFydHNcbiAgICAgKi9cbiAgICAkLmZuLnNwYXJrbGluZS5kaXNjcmV0ZSA9IGRpc2NyZXRlID0gY3JlYXRlQ2xhc3MoJC5mbi5zcGFya2xpbmUuX2Jhc2UsIGJhckhpZ2hsaWdodE1peGluLCB7XG4gICAgICAgIHR5cGU6ICdkaXNjcmV0ZScsXG5cbiAgICAgICAgaW5pdDogZnVuY3Rpb24gKGVsLCB2YWx1ZXMsIG9wdGlvbnMsIHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgICAgIGRpc2NyZXRlLl9zdXBlci5pbml0LmNhbGwodGhpcywgZWwsIHZhbHVlcywgb3B0aW9ucywgd2lkdGgsIGhlaWdodCk7XG5cbiAgICAgICAgICAgIHRoaXMucmVnaW9uU2hhcGVzID0ge307XG4gICAgICAgICAgICB0aGlzLnZhbHVlcyA9IHZhbHVlcyA9ICQubWFwKHZhbHVlcywgTnVtYmVyKTtcbiAgICAgICAgICAgIHRoaXMubWluID0gTWF0aC5taW4uYXBwbHkoTWF0aCwgdmFsdWVzKTtcbiAgICAgICAgICAgIHRoaXMubWF4ID0gTWF0aC5tYXguYXBwbHkoTWF0aCwgdmFsdWVzKTtcbiAgICAgICAgICAgIHRoaXMucmFuZ2UgPSB0aGlzLm1heCAtIHRoaXMubWluO1xuICAgICAgICAgICAgdGhpcy53aWR0aCA9IHdpZHRoID0gb3B0aW9ucy5nZXQoJ3dpZHRoJykgPT09ICdhdXRvJyA/IHZhbHVlcy5sZW5ndGggKiAyIDogdGhpcy53aWR0aDtcbiAgICAgICAgICAgIHRoaXMuaW50ZXJ2YWwgPSBNYXRoLmZsb29yKHdpZHRoIC8gdmFsdWVzLmxlbmd0aCk7XG4gICAgICAgICAgICB0aGlzLml0ZW1XaWR0aCA9IHdpZHRoIC8gdmFsdWVzLmxlbmd0aDtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmdldCgnY2hhcnRSYW5nZU1pbicpICE9PSB1bmRlZmluZWQgJiYgKG9wdGlvbnMuZ2V0KCdjaGFydFJhbmdlQ2xpcCcpIHx8IG9wdGlvbnMuZ2V0KCdjaGFydFJhbmdlTWluJykgPCB0aGlzLm1pbikpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1pbiA9IG9wdGlvbnMuZ2V0KCdjaGFydFJhbmdlTWluJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5nZXQoJ2NoYXJ0UmFuZ2VNYXgnKSAhPT0gdW5kZWZpbmVkICYmIChvcHRpb25zLmdldCgnY2hhcnRSYW5nZUNsaXAnKSB8fCBvcHRpb25zLmdldCgnY2hhcnRSYW5nZU1heCcpID4gdGhpcy5tYXgpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tYXggPSBvcHRpb25zLmdldCgnY2hhcnRSYW5nZU1heCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5pbml0VGFyZ2V0KCk7XG4gICAgICAgICAgICBpZiAodGhpcy50YXJnZXQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxpbmVIZWlnaHQgPSBvcHRpb25zLmdldCgnbGluZUhlaWdodCcpID09PSAnYXV0bycgPyBNYXRoLnJvdW5kKHRoaXMuY2FudmFzSGVpZ2h0ICogMC4zKSA6IG9wdGlvbnMuZ2V0KCdsaW5lSGVpZ2h0Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0UmVnaW9uOiBmdW5jdGlvbiAoZWwsIHgsIHkpIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKHggLyB0aGlzLml0ZW1XaWR0aCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0Q3VycmVudFJlZ2lvbkZpZWxkczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRSZWdpb24gPSB0aGlzLmN1cnJlbnRSZWdpb247XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGlzTnVsbDogdGhpcy52YWx1ZXNbY3VycmVudFJlZ2lvbl0gPT09IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy52YWx1ZXNbY3VycmVudFJlZ2lvbl0sXG4gICAgICAgICAgICAgICAgb2Zmc2V0OiBjdXJyZW50UmVnaW9uXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlbmRlclJlZ2lvbjogZnVuY3Rpb24gKHZhbHVlbnVtLCBoaWdobGlnaHQpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZXMgPSB0aGlzLnZhbHVlcyxcbiAgICAgICAgICAgICAgICBvcHRpb25zID0gdGhpcy5vcHRpb25zLFxuICAgICAgICAgICAgICAgIG1pbiA9IHRoaXMubWluLFxuICAgICAgICAgICAgICAgIG1heCA9IHRoaXMubWF4LFxuICAgICAgICAgICAgICAgIHJhbmdlID0gdGhpcy5yYW5nZSxcbiAgICAgICAgICAgICAgICBpbnRlcnZhbCA9IHRoaXMuaW50ZXJ2YWwsXG4gICAgICAgICAgICAgICAgdGFyZ2V0ID0gdGhpcy50YXJnZXQsXG4gICAgICAgICAgICAgICAgY2FudmFzSGVpZ2h0ID0gdGhpcy5jYW52YXNIZWlnaHQsXG4gICAgICAgICAgICAgICAgbGluZUhlaWdodCA9IHRoaXMubGluZUhlaWdodCxcbiAgICAgICAgICAgICAgICBwaGVpZ2h0ID0gY2FudmFzSGVpZ2h0IC0gbGluZUhlaWdodCxcbiAgICAgICAgICAgICAgICB5dG9wLCB2YWwsIGNvbG9yLCB4O1xuXG4gICAgICAgICAgICB2YWwgPSBjbGlwdmFsKHZhbHVlc1t2YWx1ZW51bV0sIG1pbiwgbWF4KTtcbiAgICAgICAgICAgIHggPSB2YWx1ZW51bSAqIGludGVydmFsO1xuICAgICAgICAgICAgeXRvcCA9IE1hdGgucm91bmQocGhlaWdodCAtIHBoZWlnaHQgKiAoKHZhbCAtIG1pbikgLyByYW5nZSkpO1xuICAgICAgICAgICAgY29sb3IgPSAob3B0aW9ucy5nZXQoJ3RocmVzaG9sZENvbG9yJykgJiYgdmFsIDwgb3B0aW9ucy5nZXQoJ3RocmVzaG9sZFZhbHVlJykpID8gb3B0aW9ucy5nZXQoJ3RocmVzaG9sZENvbG9yJykgOiBvcHRpb25zLmdldCgnbGluZUNvbG9yJyk7XG4gICAgICAgICAgICBpZiAoaGlnaGxpZ2h0KSB7XG4gICAgICAgICAgICAgICAgY29sb3IgPSB0aGlzLmNhbGNIaWdobGlnaHRDb2xvcihjb2xvciwgb3B0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0LmRyYXdMaW5lKHgsIHl0b3AsIHgsIHl0b3AgKyBsaW5lSGVpZ2h0LCBjb2xvcik7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIEJ1bGxldCBjaGFydHNcbiAgICAgKi9cbiAgICAkLmZuLnNwYXJrbGluZS5idWxsZXQgPSBidWxsZXQgPSBjcmVhdGVDbGFzcygkLmZuLnNwYXJrbGluZS5fYmFzZSwge1xuICAgICAgICB0eXBlOiAnYnVsbGV0JyxcblxuICAgICAgICBpbml0OiBmdW5jdGlvbiAoZWwsIHZhbHVlcywgb3B0aW9ucywgd2lkdGgsIGhlaWdodCkge1xuICAgICAgICAgICAgdmFyIG1pbiwgbWF4LCB2YWxzO1xuICAgICAgICAgICAgYnVsbGV0Ll9zdXBlci5pbml0LmNhbGwodGhpcywgZWwsIHZhbHVlcywgb3B0aW9ucywgd2lkdGgsIGhlaWdodCk7XG5cbiAgICAgICAgICAgIC8vIHZhbHVlczogdGFyZ2V0LCBwZXJmb3JtYW5jZSwgcmFuZ2UxLCByYW5nZTIsIHJhbmdlM1xuICAgICAgICAgICAgdGhpcy52YWx1ZXMgPSB2YWx1ZXMgPSBub3JtYWxpemVWYWx1ZXModmFsdWVzKTtcbiAgICAgICAgICAgIC8vIHRhcmdldCBvciBwZXJmb3JtYW5jZSBjb3VsZCBiZSBudWxsXG4gICAgICAgICAgICB2YWxzID0gdmFsdWVzLnNsaWNlKCk7XG4gICAgICAgICAgICB2YWxzWzBdID0gdmFsc1swXSA9PT0gbnVsbCA/IHZhbHNbMl0gOiB2YWxzWzBdO1xuICAgICAgICAgICAgdmFsc1sxXSA9IHZhbHVlc1sxXSA9PT0gbnVsbCA/IHZhbHNbMl0gOiB2YWxzWzFdO1xuICAgICAgICAgICAgbWluID0gTWF0aC5taW4uYXBwbHkoTWF0aCwgdmFsdWVzKTtcbiAgICAgICAgICAgIG1heCA9IE1hdGgubWF4LmFwcGx5KE1hdGgsIHZhbHVlcyk7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5nZXQoJ2Jhc2UnKSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgbWluID0gbWluIDwgMCA/IG1pbiA6IDA7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG1pbiA9IG9wdGlvbnMuZ2V0KCdiYXNlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLm1pbiA9IG1pbjtcbiAgICAgICAgICAgIHRoaXMubWF4ID0gbWF4O1xuICAgICAgICAgICAgdGhpcy5yYW5nZSA9IG1heCAtIG1pbjtcbiAgICAgICAgICAgIHRoaXMuc2hhcGVzID0ge307XG4gICAgICAgICAgICB0aGlzLnZhbHVlU2hhcGVzID0ge307XG4gICAgICAgICAgICB0aGlzLnJlZ2lvbmRhdGEgPSB7fTtcbiAgICAgICAgICAgIHRoaXMud2lkdGggPSB3aWR0aCA9IG9wdGlvbnMuZ2V0KCd3aWR0aCcpID09PSAnYXV0bycgPyAnNC4wZW0nIDogd2lkdGg7XG4gICAgICAgICAgICB0aGlzLnRhcmdldCA9IHRoaXMuJGVsLnNpbXBsZWRyYXcod2lkdGgsIGhlaWdodCwgb3B0aW9ucy5nZXQoJ2NvbXBvc2l0ZScpKTtcbiAgICAgICAgICAgIGlmICghdmFsdWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZGlzYWJsZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5pbml0VGFyZ2V0KCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0UmVnaW9uOiBmdW5jdGlvbiAoZWwsIHgsIHkpIHtcbiAgICAgICAgICAgIHZhciBzaGFwZWlkID0gdGhpcy50YXJnZXQuZ2V0U2hhcGVBdChlbCwgeCwgeSk7XG4gICAgICAgICAgICByZXR1cm4gKHNoYXBlaWQgIT09IHVuZGVmaW5lZCAmJiB0aGlzLnNoYXBlc1tzaGFwZWlkXSAhPT0gdW5kZWZpbmVkKSA/IHRoaXMuc2hhcGVzW3NoYXBlaWRdIDogdW5kZWZpbmVkO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldEN1cnJlbnRSZWdpb25GaWVsZHM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBjdXJyZW50UmVnaW9uID0gdGhpcy5jdXJyZW50UmVnaW9uO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBmaWVsZGtleTogY3VycmVudFJlZ2lvbi5zdWJzdHIoMCwgMSksXG4gICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMudmFsdWVzW2N1cnJlbnRSZWdpb24uc3Vic3RyKDEpXSxcbiAgICAgICAgICAgICAgICByZWdpb246IGN1cnJlbnRSZWdpb25cbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG5cbiAgICAgICAgY2hhbmdlSGlnaGxpZ2h0OiBmdW5jdGlvbiAoaGlnaGxpZ2h0KSB7XG4gICAgICAgICAgICB2YXIgY3VycmVudFJlZ2lvbiA9IHRoaXMuY3VycmVudFJlZ2lvbixcbiAgICAgICAgICAgICAgICBzaGFwZWlkID0gdGhpcy52YWx1ZVNoYXBlc1tjdXJyZW50UmVnaW9uXSxcbiAgICAgICAgICAgICAgICBzaGFwZTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnNoYXBlc1tzaGFwZWlkXTtcbiAgICAgICAgICAgIHN3aXRjaCAoY3VycmVudFJlZ2lvbi5zdWJzdHIoMCwgMSkpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdyJzpcbiAgICAgICAgICAgICAgICAgICAgc2hhcGUgPSB0aGlzLnJlbmRlclJhbmdlKGN1cnJlbnRSZWdpb24uc3Vic3RyKDEpLCBoaWdobGlnaHQpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdwJzpcbiAgICAgICAgICAgICAgICAgICAgc2hhcGUgPSB0aGlzLnJlbmRlclBlcmZvcm1hbmNlKGhpZ2hsaWdodCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3QnOlxuICAgICAgICAgICAgICAgICAgICBzaGFwZSA9IHRoaXMucmVuZGVyVGFyZ2V0KGhpZ2hsaWdodCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy52YWx1ZVNoYXBlc1tjdXJyZW50UmVnaW9uXSA9IHNoYXBlLmlkO1xuICAgICAgICAgICAgdGhpcy5zaGFwZXNbc2hhcGUuaWRdID0gY3VycmVudFJlZ2lvbjtcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0LnJlcGxhY2VXaXRoU2hhcGUoc2hhcGVpZCwgc2hhcGUpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlbmRlclJhbmdlOiBmdW5jdGlvbiAocm4sIGhpZ2hsaWdodCkge1xuICAgICAgICAgICAgdmFyIHJhbmdldmFsID0gdGhpcy52YWx1ZXNbcm5dLFxuICAgICAgICAgICAgICAgIHJhbmdld2lkdGggPSBNYXRoLnJvdW5kKHRoaXMuY2FudmFzV2lkdGggKiAoKHJhbmdldmFsIC0gdGhpcy5taW4pIC8gdGhpcy5yYW5nZSkpLFxuICAgICAgICAgICAgICAgIGNvbG9yID0gdGhpcy5vcHRpb25zLmdldCgncmFuZ2VDb2xvcnMnKVtybiAtIDJdO1xuICAgICAgICAgICAgaWYgKGhpZ2hsaWdodCkge1xuICAgICAgICAgICAgICAgIGNvbG9yID0gdGhpcy5jYWxjSGlnaGxpZ2h0Q29sb3IoY29sb3IsIHRoaXMub3B0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy50YXJnZXQuZHJhd1JlY3QoMCwgMCwgcmFuZ2V3aWR0aCAtIDEsIHRoaXMuY2FudmFzSGVpZ2h0IC0gMSwgY29sb3IsIGNvbG9yKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZW5kZXJQZXJmb3JtYW5jZTogZnVuY3Rpb24gKGhpZ2hsaWdodCkge1xuICAgICAgICAgICAgdmFyIHBlcmZ2YWwgPSB0aGlzLnZhbHVlc1sxXSxcbiAgICAgICAgICAgICAgICBwZXJmd2lkdGggPSBNYXRoLnJvdW5kKHRoaXMuY2FudmFzV2lkdGggKiAoKHBlcmZ2YWwgLSB0aGlzLm1pbikgLyB0aGlzLnJhbmdlKSksXG4gICAgICAgICAgICAgICAgY29sb3IgPSB0aGlzLm9wdGlvbnMuZ2V0KCdwZXJmb3JtYW5jZUNvbG9yJyk7XG4gICAgICAgICAgICBpZiAoaGlnaGxpZ2h0KSB7XG4gICAgICAgICAgICAgICAgY29sb3IgPSB0aGlzLmNhbGNIaWdobGlnaHRDb2xvcihjb2xvciwgdGhpcy5vcHRpb25zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRhcmdldC5kcmF3UmVjdCgwLCBNYXRoLnJvdW5kKHRoaXMuY2FudmFzSGVpZ2h0ICogMC4zKSwgcGVyZndpZHRoIC0gMSxcbiAgICAgICAgICAgICAgICBNYXRoLnJvdW5kKHRoaXMuY2FudmFzSGVpZ2h0ICogMC40KSAtIDEsIGNvbG9yLCBjb2xvcik7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVuZGVyVGFyZ2V0OiBmdW5jdGlvbiAoaGlnaGxpZ2h0KSB7XG4gICAgICAgICAgICB2YXIgdGFyZ2V0dmFsID0gdGhpcy52YWx1ZXNbMF0sXG4gICAgICAgICAgICAgICAgeCA9IE1hdGgucm91bmQodGhpcy5jYW52YXNXaWR0aCAqICgodGFyZ2V0dmFsIC0gdGhpcy5taW4pIC8gdGhpcy5yYW5nZSkgLSAodGhpcy5vcHRpb25zLmdldCgndGFyZ2V0V2lkdGgnKSAvIDIpKSxcbiAgICAgICAgICAgICAgICB0YXJnZXR0b3AgPSBNYXRoLnJvdW5kKHRoaXMuY2FudmFzSGVpZ2h0ICogMC4xMCksXG4gICAgICAgICAgICAgICAgdGFyZ2V0aGVpZ2h0ID0gdGhpcy5jYW52YXNIZWlnaHQgLSAodGFyZ2V0dG9wICogMiksXG4gICAgICAgICAgICAgICAgY29sb3IgPSB0aGlzLm9wdGlvbnMuZ2V0KCd0YXJnZXRDb2xvcicpO1xuICAgICAgICAgICAgaWYgKGhpZ2hsaWdodCkge1xuICAgICAgICAgICAgICAgIGNvbG9yID0gdGhpcy5jYWxjSGlnaGxpZ2h0Q29sb3IoY29sb3IsIHRoaXMub3B0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy50YXJnZXQuZHJhd1JlY3QoeCwgdGFyZ2V0dG9wLCB0aGlzLm9wdGlvbnMuZ2V0KCd0YXJnZXRXaWR0aCcpIC0gMSwgdGFyZ2V0aGVpZ2h0IC0gMSwgY29sb3IsIGNvbG9yKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZW5kZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB2bGVuID0gdGhpcy52YWx1ZXMubGVuZ3RoLFxuICAgICAgICAgICAgICAgIHRhcmdldCA9IHRoaXMudGFyZ2V0LFxuICAgICAgICAgICAgICAgIGksIHNoYXBlO1xuICAgICAgICAgICAgaWYgKCFidWxsZXQuX3N1cGVyLnJlbmRlci5jYWxsKHRoaXMpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChpID0gMjsgaSA8IHZsZW47IGkrKykge1xuICAgICAgICAgICAgICAgIHNoYXBlID0gdGhpcy5yZW5kZXJSYW5nZShpKS5hcHBlbmQoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNoYXBlc1tzaGFwZS5pZF0gPSAncicgKyBpO1xuICAgICAgICAgICAgICAgIHRoaXMudmFsdWVTaGFwZXNbJ3InICsgaV0gPSBzaGFwZS5pZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLnZhbHVlc1sxXSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHNoYXBlID0gdGhpcy5yZW5kZXJQZXJmb3JtYW5jZSgpLmFwcGVuZCgpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2hhcGVzW3NoYXBlLmlkXSA9ICdwMSc7XG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZVNoYXBlcy5wMSA9IHNoYXBlLmlkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMudmFsdWVzWzBdICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgc2hhcGUgPSB0aGlzLnJlbmRlclRhcmdldCgpLmFwcGVuZCgpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2hhcGVzW3NoYXBlLmlkXSA9ICd0MCc7XG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZVNoYXBlcy50MCA9IHNoYXBlLmlkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGFyZ2V0LnJlbmRlcigpO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBQaWUgY2hhcnRzXG4gICAgICovXG4gICAgJC5mbi5zcGFya2xpbmUucGllID0gcGllID0gY3JlYXRlQ2xhc3MoJC5mbi5zcGFya2xpbmUuX2Jhc2UsIHtcbiAgICAgICAgdHlwZTogJ3BpZScsXG5cbiAgICAgICAgaW5pdDogZnVuY3Rpb24gKGVsLCB2YWx1ZXMsIG9wdGlvbnMsIHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgICAgIHZhciB0b3RhbCA9IDAsIGk7XG5cbiAgICAgICAgICAgIHBpZS5fc3VwZXIuaW5pdC5jYWxsKHRoaXMsIGVsLCB2YWx1ZXMsIG9wdGlvbnMsIHdpZHRoLCBoZWlnaHQpO1xuXG4gICAgICAgICAgICB0aGlzLnNoYXBlcyA9IHt9OyAvLyBtYXAgc2hhcGUgaWRzIHRvIHZhbHVlIG9mZnNldHNcbiAgICAgICAgICAgIHRoaXMudmFsdWVTaGFwZXMgPSB7fTsgLy8gbWFwcyB2YWx1ZSBvZmZzZXRzIHRvIHNoYXBlIGlkc1xuICAgICAgICAgICAgdGhpcy52YWx1ZXMgPSB2YWx1ZXMgPSAkLm1hcCh2YWx1ZXMsIE51bWJlcik7XG5cbiAgICAgICAgICAgIGlmIChvcHRpb25zLmdldCgnd2lkdGgnKSA9PT0gJ2F1dG8nKSB7XG4gICAgICAgICAgICAgICAgdGhpcy53aWR0aCA9IHRoaXMuaGVpZ2h0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodmFsdWVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSB2YWx1ZXMubGVuZ3RoOyBpLS07KSB7XG4gICAgICAgICAgICAgICAgICAgIHRvdGFsICs9IHZhbHVlc1tpXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnRvdGFsID0gdG90YWw7XG4gICAgICAgICAgICB0aGlzLmluaXRUYXJnZXQoKTtcbiAgICAgICAgICAgIHRoaXMucmFkaXVzID0gTWF0aC5mbG9vcihNYXRoLm1pbih0aGlzLmNhbnZhc1dpZHRoLCB0aGlzLmNhbnZhc0hlaWdodCkgLyAyKTtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXRSZWdpb246IGZ1bmN0aW9uIChlbCwgeCwgeSkge1xuICAgICAgICAgICAgdmFyIHNoYXBlaWQgPSB0aGlzLnRhcmdldC5nZXRTaGFwZUF0KGVsLCB4LCB5KTtcbiAgICAgICAgICAgIHJldHVybiAoc2hhcGVpZCAhPT0gdW5kZWZpbmVkICYmIHRoaXMuc2hhcGVzW3NoYXBlaWRdICE9PSB1bmRlZmluZWQpID8gdGhpcy5zaGFwZXNbc2hhcGVpZF0gOiB1bmRlZmluZWQ7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0Q3VycmVudFJlZ2lvbkZpZWxkczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRSZWdpb24gPSB0aGlzLmN1cnJlbnRSZWdpb247XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGlzTnVsbDogdGhpcy52YWx1ZXNbY3VycmVudFJlZ2lvbl0gPT09IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy52YWx1ZXNbY3VycmVudFJlZ2lvbl0sXG4gICAgICAgICAgICAgICAgcGVyY2VudDogdGhpcy52YWx1ZXNbY3VycmVudFJlZ2lvbl0gLyB0aGlzLnRvdGFsICogMTAwLFxuICAgICAgICAgICAgICAgIGNvbG9yOiB0aGlzLm9wdGlvbnMuZ2V0KCdzbGljZUNvbG9ycycpW2N1cnJlbnRSZWdpb24gJSB0aGlzLm9wdGlvbnMuZ2V0KCdzbGljZUNvbG9ycycpLmxlbmd0aF0sXG4gICAgICAgICAgICAgICAgb2Zmc2V0OiBjdXJyZW50UmVnaW9uXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuXG4gICAgICAgIGNoYW5nZUhpZ2hsaWdodDogZnVuY3Rpb24gKGhpZ2hsaWdodCkge1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRSZWdpb24gPSB0aGlzLmN1cnJlbnRSZWdpb24sXG4gICAgICAgICAgICAgICAgIG5ld3NsaWNlID0gdGhpcy5yZW5kZXJTbGljZShjdXJyZW50UmVnaW9uLCBoaWdobGlnaHQpLFxuICAgICAgICAgICAgICAgICBzaGFwZWlkID0gdGhpcy52YWx1ZVNoYXBlc1tjdXJyZW50UmVnaW9uXTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnNoYXBlc1tzaGFwZWlkXTtcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0LnJlcGxhY2VXaXRoU2hhcGUoc2hhcGVpZCwgbmV3c2xpY2UpO1xuICAgICAgICAgICAgdGhpcy52YWx1ZVNoYXBlc1tjdXJyZW50UmVnaW9uXSA9IG5ld3NsaWNlLmlkO1xuICAgICAgICAgICAgdGhpcy5zaGFwZXNbbmV3c2xpY2UuaWRdID0gY3VycmVudFJlZ2lvbjtcbiAgICAgICAgfSxcblxuICAgICAgICByZW5kZXJTbGljZTogZnVuY3Rpb24gKHZhbHVlbnVtLCBoaWdobGlnaHQpIHtcbiAgICAgICAgICAgIHZhciB0YXJnZXQgPSB0aGlzLnRhcmdldCxcbiAgICAgICAgICAgICAgICBvcHRpb25zID0gdGhpcy5vcHRpb25zLFxuICAgICAgICAgICAgICAgIHJhZGl1cyA9IHRoaXMucmFkaXVzLFxuICAgICAgICAgICAgICAgIGJvcmRlcldpZHRoID0gb3B0aW9ucy5nZXQoJ2JvcmRlcldpZHRoJyksXG4gICAgICAgICAgICAgICAgb2Zmc2V0ID0gb3B0aW9ucy5nZXQoJ29mZnNldCcpLFxuICAgICAgICAgICAgICAgIGNpcmNsZSA9IDIgKiBNYXRoLlBJLFxuICAgICAgICAgICAgICAgIHZhbHVlcyA9IHRoaXMudmFsdWVzLFxuICAgICAgICAgICAgICAgIHRvdGFsID0gdGhpcy50b3RhbCxcbiAgICAgICAgICAgICAgICBuZXh0ID0gb2Zmc2V0ID8gKDIqTWF0aC5QSSkqKG9mZnNldC8zNjApIDogMCxcbiAgICAgICAgICAgICAgICBzdGFydCwgZW5kLCBpLCB2bGVuLCBjb2xvcjtcblxuICAgICAgICAgICAgdmxlbiA9IHZhbHVlcy5sZW5ndGg7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdmxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgc3RhcnQgPSBuZXh0O1xuICAgICAgICAgICAgICAgIGVuZCA9IG5leHQ7XG4gICAgICAgICAgICAgICAgaWYgKHRvdGFsID4gMCkgeyAgLy8gYXZvaWQgZGl2aWRlIGJ5IHplcm9cbiAgICAgICAgICAgICAgICAgICAgZW5kID0gbmV4dCArIChjaXJjbGUgKiAodmFsdWVzW2ldIC8gdG90YWwpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlbnVtID09PSBpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yID0gb3B0aW9ucy5nZXQoJ3NsaWNlQ29sb3JzJylbaSAlIG9wdGlvbnMuZ2V0KCdzbGljZUNvbG9ycycpLmxlbmd0aF07XG4gICAgICAgICAgICAgICAgICAgIGlmIChoaWdobGlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yID0gdGhpcy5jYWxjSGlnaGxpZ2h0Q29sb3IoY29sb3IsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldC5kcmF3UGllU2xpY2UocmFkaXVzLCByYWRpdXMsIHJhZGl1cyAtIGJvcmRlcldpZHRoLCBzdGFydCwgZW5kLCB1bmRlZmluZWQsIGNvbG9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbmV4dCA9IGVuZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICByZW5kZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB0YXJnZXQgPSB0aGlzLnRhcmdldCxcbiAgICAgICAgICAgICAgICB2YWx1ZXMgPSB0aGlzLnZhbHVlcyxcbiAgICAgICAgICAgICAgICBvcHRpb25zID0gdGhpcy5vcHRpb25zLFxuICAgICAgICAgICAgICAgIHJhZGl1cyA9IHRoaXMucmFkaXVzLFxuICAgICAgICAgICAgICAgIGJvcmRlcldpZHRoID0gb3B0aW9ucy5nZXQoJ2JvcmRlcldpZHRoJyksXG4gICAgICAgICAgICAgICAgc2hhcGUsIGk7XG5cbiAgICAgICAgICAgIGlmICghcGllLl9zdXBlci5yZW5kZXIuY2FsbCh0aGlzKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChib3JkZXJXaWR0aCkge1xuICAgICAgICAgICAgICAgIHRhcmdldC5kcmF3Q2lyY2xlKHJhZGl1cywgcmFkaXVzLCBNYXRoLmZsb29yKHJhZGl1cyAtIChib3JkZXJXaWR0aCAvIDIpKSxcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5nZXQoJ2JvcmRlckNvbG9yJyksIHVuZGVmaW5lZCwgYm9yZGVyV2lkdGgpLmFwcGVuZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChpID0gdmFsdWVzLmxlbmd0aDsgaS0tOykge1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZXNbaV0pIHsgLy8gZG9uJ3QgcmVuZGVyIHplcm8gdmFsdWVzXG4gICAgICAgICAgICAgICAgICAgIHNoYXBlID0gdGhpcy5yZW5kZXJTbGljZShpKS5hcHBlbmQoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52YWx1ZVNoYXBlc1tpXSA9IHNoYXBlLmlkOyAvLyBzdG9yZSBqdXN0IHRoZSBzaGFwZWlkXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2hhcGVzW3NoYXBlLmlkXSA9IGk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGFyZ2V0LnJlbmRlcigpO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBCb3ggcGxvdHNcbiAgICAgKi9cbiAgICAkLmZuLnNwYXJrbGluZS5ib3ggPSBib3ggPSBjcmVhdGVDbGFzcygkLmZuLnNwYXJrbGluZS5fYmFzZSwge1xuICAgICAgICB0eXBlOiAnYm94JyxcblxuICAgICAgICBpbml0OiBmdW5jdGlvbiAoZWwsIHZhbHVlcywgb3B0aW9ucywgd2lkdGgsIGhlaWdodCkge1xuICAgICAgICAgICAgYm94Ll9zdXBlci5pbml0LmNhbGwodGhpcywgZWwsIHZhbHVlcywgb3B0aW9ucywgd2lkdGgsIGhlaWdodCk7XG4gICAgICAgICAgICB0aGlzLnZhbHVlcyA9ICQubWFwKHZhbHVlcywgTnVtYmVyKTtcbiAgICAgICAgICAgIHRoaXMud2lkdGggPSBvcHRpb25zLmdldCgnd2lkdGgnKSA9PT0gJ2F1dG8nID8gJzQuMGVtJyA6IHdpZHRoO1xuICAgICAgICAgICAgdGhpcy5pbml0VGFyZ2V0KCk7XG4gICAgICAgICAgICBpZiAoIXRoaXMudmFsdWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZGlzYWJsZWQgPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTaW11bGF0ZSBhIHNpbmdsZSByZWdpb25cbiAgICAgICAgICovXG4gICAgICAgIGdldFJlZ2lvbjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0Q3VycmVudFJlZ2lvbkZpZWxkczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFtcbiAgICAgICAgICAgICAgICB7IGZpZWxkOiAnbHEnLCB2YWx1ZTogdGhpcy5xdWFydGlsZXNbMF0gfSxcbiAgICAgICAgICAgICAgICB7IGZpZWxkOiAnbWVkJywgdmFsdWU6IHRoaXMucXVhcnRpbGVzWzFdIH0sXG4gICAgICAgICAgICAgICAgeyBmaWVsZDogJ3VxJywgdmFsdWU6IHRoaXMucXVhcnRpbGVzWzJdIH1cbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBpZiAodGhpcy5sb3V0bGllciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goeyBmaWVsZDogJ2xvJywgdmFsdWU6IHRoaXMubG91dGxpZXJ9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLnJvdXRsaWVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh7IGZpZWxkOiAncm8nLCB2YWx1ZTogdGhpcy5yb3V0bGllcn0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMubHdoaXNrZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHsgZmllbGQ6ICdsdycsIHZhbHVlOiB0aGlzLmx3aGlza2VyfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5yd2hpc2tlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goeyBmaWVsZDogJ3J3JywgdmFsdWU6IHRoaXMucndoaXNrZXJ9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVuZGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgdGFyZ2V0ID0gdGhpcy50YXJnZXQsXG4gICAgICAgICAgICAgICAgdmFsdWVzID0gdGhpcy52YWx1ZXMsXG4gICAgICAgICAgICAgICAgdmxlbiA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICAgICAgICAgICAgb3B0aW9ucyA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgICAgICAgICBjYW52YXNXaWR0aCA9IHRoaXMuY2FudmFzV2lkdGgsXG4gICAgICAgICAgICAgICAgY2FudmFzSGVpZ2h0ID0gdGhpcy5jYW52YXNIZWlnaHQsXG4gICAgICAgICAgICAgICAgbWluVmFsdWUgPSBvcHRpb25zLmdldCgnY2hhcnRSYW5nZU1pbicpID09PSB1bmRlZmluZWQgPyBNYXRoLm1pbi5hcHBseShNYXRoLCB2YWx1ZXMpIDogb3B0aW9ucy5nZXQoJ2NoYXJ0UmFuZ2VNaW4nKSxcbiAgICAgICAgICAgICAgICBtYXhWYWx1ZSA9IG9wdGlvbnMuZ2V0KCdjaGFydFJhbmdlTWF4JykgPT09IHVuZGVmaW5lZCA/IE1hdGgubWF4LmFwcGx5KE1hdGgsIHZhbHVlcykgOiBvcHRpb25zLmdldCgnY2hhcnRSYW5nZU1heCcpLFxuICAgICAgICAgICAgICAgIGNhbnZhc0xlZnQgPSAwLFxuICAgICAgICAgICAgICAgIGx3aGlza2VyLCBsb3V0bGllciwgaXFyLCBxMSwgcTIsIHEzLCByd2hpc2tlciwgcm91dGxpZXIsIGksXG4gICAgICAgICAgICAgICAgc2l6ZSwgdW5pdFNpemU7XG5cbiAgICAgICAgICAgIGlmICghYm94Ll9zdXBlci5yZW5kZXIuY2FsbCh0aGlzKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuZ2V0KCdyYXcnKSkge1xuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmdldCgnc2hvd091dGxpZXJzJykgJiYgdmFsdWVzLmxlbmd0aCA+IDUpIHtcbiAgICAgICAgICAgICAgICAgICAgbG91dGxpZXIgPSB2YWx1ZXNbMF07XG4gICAgICAgICAgICAgICAgICAgIGx3aGlza2VyID0gdmFsdWVzWzFdO1xuICAgICAgICAgICAgICAgICAgICBxMSA9IHZhbHVlc1syXTtcbiAgICAgICAgICAgICAgICAgICAgcTIgPSB2YWx1ZXNbM107XG4gICAgICAgICAgICAgICAgICAgIHEzID0gdmFsdWVzWzRdO1xuICAgICAgICAgICAgICAgICAgICByd2hpc2tlciA9IHZhbHVlc1s1XTtcbiAgICAgICAgICAgICAgICAgICAgcm91dGxpZXIgPSB2YWx1ZXNbNl07XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbHdoaXNrZXIgPSB2YWx1ZXNbMF07XG4gICAgICAgICAgICAgICAgICAgIHExID0gdmFsdWVzWzFdO1xuICAgICAgICAgICAgICAgICAgICBxMiA9IHZhbHVlc1syXTtcbiAgICAgICAgICAgICAgICAgICAgcTMgPSB2YWx1ZXNbM107XG4gICAgICAgICAgICAgICAgICAgIHJ3aGlza2VyID0gdmFsdWVzWzRdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFsdWVzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGEgLSBiOyB9KTtcbiAgICAgICAgICAgICAgICBxMSA9IHF1YXJ0aWxlKHZhbHVlcywgMSk7XG4gICAgICAgICAgICAgICAgcTIgPSBxdWFydGlsZSh2YWx1ZXMsIDIpO1xuICAgICAgICAgICAgICAgIHEzID0gcXVhcnRpbGUodmFsdWVzLCAzKTtcbiAgICAgICAgICAgICAgICBpcXIgPSBxMyAtIHExO1xuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmdldCgnc2hvd091dGxpZXJzJykpIHtcbiAgICAgICAgICAgICAgICAgICAgbHdoaXNrZXIgPSByd2hpc2tlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHZsZW47IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGx3aGlza2VyID09PSB1bmRlZmluZWQgJiYgdmFsdWVzW2ldID4gcTEgLSAoaXFyICogb3B0aW9ucy5nZXQoJ291dGxpZXJJUVInKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsd2hpc2tlciA9IHZhbHVlc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZXNbaV0gPCBxMyArIChpcXIgKiBvcHRpb25zLmdldCgnb3V0bGllcklRUicpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ3aGlza2VyID0gdmFsdWVzW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGxvdXRsaWVyID0gdmFsdWVzWzBdO1xuICAgICAgICAgICAgICAgICAgICByb3V0bGllciA9IHZhbHVlc1t2bGVuIC0gMV07XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbHdoaXNrZXIgPSB2YWx1ZXNbMF07XG4gICAgICAgICAgICAgICAgICAgIHJ3aGlza2VyID0gdmFsdWVzW3ZsZW4gLSAxXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnF1YXJ0aWxlcyA9IFtxMSwgcTIsIHEzXTtcbiAgICAgICAgICAgIHRoaXMubHdoaXNrZXIgPSBsd2hpc2tlcjtcbiAgICAgICAgICAgIHRoaXMucndoaXNrZXIgPSByd2hpc2tlcjtcbiAgICAgICAgICAgIHRoaXMubG91dGxpZXIgPSBsb3V0bGllcjtcbiAgICAgICAgICAgIHRoaXMucm91dGxpZXIgPSByb3V0bGllcjtcblxuICAgICAgICAgICAgdW5pdFNpemUgPSBjYW52YXNXaWR0aCAvIChtYXhWYWx1ZSAtIG1pblZhbHVlICsgMSk7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5nZXQoJ3Nob3dPdXRsaWVycycpKSB7XG4gICAgICAgICAgICAgICAgY2FudmFzTGVmdCA9IE1hdGguY2VpbChvcHRpb25zLmdldCgnc3BvdFJhZGl1cycpKTtcbiAgICAgICAgICAgICAgICBjYW52YXNXaWR0aCAtPSAyICogTWF0aC5jZWlsKG9wdGlvbnMuZ2V0KCdzcG90UmFkaXVzJykpO1xuICAgICAgICAgICAgICAgIHVuaXRTaXplID0gY2FudmFzV2lkdGggLyAobWF4VmFsdWUgLSBtaW5WYWx1ZSArIDEpO1xuICAgICAgICAgICAgICAgIGlmIChsb3V0bGllciA8IGx3aGlza2VyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldC5kcmF3Q2lyY2xlKChsb3V0bGllciAtIG1pblZhbHVlKSAqIHVuaXRTaXplICsgY2FudmFzTGVmdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbnZhc0hlaWdodCAvIDIsXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmdldCgnc3BvdFJhZGl1cycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5nZXQoJ291dGxpZXJMaW5lQ29sb3InKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuZ2V0KCdvdXRsaWVyRmlsbENvbG9yJykpLmFwcGVuZCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocm91dGxpZXIgPiByd2hpc2tlcikge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXQuZHJhd0NpcmNsZSgocm91dGxpZXIgLSBtaW5WYWx1ZSkgKiB1bml0U2l6ZSArIGNhbnZhc0xlZnQsXG4gICAgICAgICAgICAgICAgICAgICAgICBjYW52YXNIZWlnaHQgLyAyLFxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5nZXQoJ3Nwb3RSYWRpdXMnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuZ2V0KCdvdXRsaWVyTGluZUNvbG9yJyksXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmdldCgnb3V0bGllckZpbGxDb2xvcicpKS5hcHBlbmQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGJveFxuICAgICAgICAgICAgdGFyZ2V0LmRyYXdSZWN0KFxuICAgICAgICAgICAgICAgIE1hdGgucm91bmQoKHExIC0gbWluVmFsdWUpICogdW5pdFNpemUgKyBjYW52YXNMZWZ0KSxcbiAgICAgICAgICAgICAgICBNYXRoLnJvdW5kKGNhbnZhc0hlaWdodCAqIDAuMSksXG4gICAgICAgICAgICAgICAgTWF0aC5yb3VuZCgocTMgLSBxMSkgKiB1bml0U2l6ZSksXG4gICAgICAgICAgICAgICAgTWF0aC5yb3VuZChjYW52YXNIZWlnaHQgKiAwLjgpLFxuICAgICAgICAgICAgICAgIG9wdGlvbnMuZ2V0KCdib3hMaW5lQ29sb3InKSxcbiAgICAgICAgICAgICAgICBvcHRpb25zLmdldCgnYm94RmlsbENvbG9yJykpLmFwcGVuZCgpO1xuICAgICAgICAgICAgLy8gbGVmdCB3aGlza2VyXG4gICAgICAgICAgICB0YXJnZXQuZHJhd0xpbmUoXG4gICAgICAgICAgICAgICAgTWF0aC5yb3VuZCgobHdoaXNrZXIgLSBtaW5WYWx1ZSkgKiB1bml0U2l6ZSArIGNhbnZhc0xlZnQpLFxuICAgICAgICAgICAgICAgIE1hdGgucm91bmQoY2FudmFzSGVpZ2h0IC8gMiksXG4gICAgICAgICAgICAgICAgTWF0aC5yb3VuZCgocTEgLSBtaW5WYWx1ZSkgKiB1bml0U2l6ZSArIGNhbnZhc0xlZnQpLFxuICAgICAgICAgICAgICAgIE1hdGgucm91bmQoY2FudmFzSGVpZ2h0IC8gMiksXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5nZXQoJ2xpbmVDb2xvcicpKS5hcHBlbmQoKTtcbiAgICAgICAgICAgIHRhcmdldC5kcmF3TGluZShcbiAgICAgICAgICAgICAgICBNYXRoLnJvdW5kKChsd2hpc2tlciAtIG1pblZhbHVlKSAqIHVuaXRTaXplICsgY2FudmFzTGVmdCksXG4gICAgICAgICAgICAgICAgTWF0aC5yb3VuZChjYW52YXNIZWlnaHQgLyA0KSxcbiAgICAgICAgICAgICAgICBNYXRoLnJvdW5kKChsd2hpc2tlciAtIG1pblZhbHVlKSAqIHVuaXRTaXplICsgY2FudmFzTGVmdCksXG4gICAgICAgICAgICAgICAgTWF0aC5yb3VuZChjYW52YXNIZWlnaHQgLSBjYW52YXNIZWlnaHQgLyA0KSxcbiAgICAgICAgICAgICAgICBvcHRpb25zLmdldCgnd2hpc2tlckNvbG9yJykpLmFwcGVuZCgpO1xuICAgICAgICAgICAgLy8gcmlnaHQgd2hpc2tlclxuICAgICAgICAgICAgdGFyZ2V0LmRyYXdMaW5lKE1hdGgucm91bmQoKHJ3aGlza2VyIC0gbWluVmFsdWUpICogdW5pdFNpemUgKyBjYW52YXNMZWZ0KSxcbiAgICAgICAgICAgICAgICBNYXRoLnJvdW5kKGNhbnZhc0hlaWdodCAvIDIpLFxuICAgICAgICAgICAgICAgIE1hdGgucm91bmQoKHEzIC0gbWluVmFsdWUpICogdW5pdFNpemUgKyBjYW52YXNMZWZ0KSxcbiAgICAgICAgICAgICAgICBNYXRoLnJvdW5kKGNhbnZhc0hlaWdodCAvIDIpLFxuICAgICAgICAgICAgICAgIG9wdGlvbnMuZ2V0KCdsaW5lQ29sb3InKSkuYXBwZW5kKCk7XG4gICAgICAgICAgICB0YXJnZXQuZHJhd0xpbmUoXG4gICAgICAgICAgICAgICAgTWF0aC5yb3VuZCgocndoaXNrZXIgLSBtaW5WYWx1ZSkgKiB1bml0U2l6ZSArIGNhbnZhc0xlZnQpLFxuICAgICAgICAgICAgICAgIE1hdGgucm91bmQoY2FudmFzSGVpZ2h0IC8gNCksXG4gICAgICAgICAgICAgICAgTWF0aC5yb3VuZCgocndoaXNrZXIgLSBtaW5WYWx1ZSkgKiB1bml0U2l6ZSArIGNhbnZhc0xlZnQpLFxuICAgICAgICAgICAgICAgIE1hdGgucm91bmQoY2FudmFzSGVpZ2h0IC0gY2FudmFzSGVpZ2h0IC8gNCksXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5nZXQoJ3doaXNrZXJDb2xvcicpKS5hcHBlbmQoKTtcbiAgICAgICAgICAgIC8vIG1lZGlhbiBsaW5lXG4gICAgICAgICAgICB0YXJnZXQuZHJhd0xpbmUoXG4gICAgICAgICAgICAgICAgTWF0aC5yb3VuZCgocTIgLSBtaW5WYWx1ZSkgKiB1bml0U2l6ZSArIGNhbnZhc0xlZnQpLFxuICAgICAgICAgICAgICAgIE1hdGgucm91bmQoY2FudmFzSGVpZ2h0ICogMC4xKSxcbiAgICAgICAgICAgICAgICBNYXRoLnJvdW5kKChxMiAtIG1pblZhbHVlKSAqIHVuaXRTaXplICsgY2FudmFzTGVmdCksXG4gICAgICAgICAgICAgICAgTWF0aC5yb3VuZChjYW52YXNIZWlnaHQgKiAwLjkpLFxuICAgICAgICAgICAgICAgIG9wdGlvbnMuZ2V0KCdtZWRpYW5Db2xvcicpKS5hcHBlbmQoKTtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmdldCgndGFyZ2V0JykpIHtcbiAgICAgICAgICAgICAgICBzaXplID0gTWF0aC5jZWlsKG9wdGlvbnMuZ2V0KCdzcG90UmFkaXVzJykpO1xuICAgICAgICAgICAgICAgIHRhcmdldC5kcmF3TGluZShcbiAgICAgICAgICAgICAgICAgICAgTWF0aC5yb3VuZCgob3B0aW9ucy5nZXQoJ3RhcmdldCcpIC0gbWluVmFsdWUpICogdW5pdFNpemUgKyBjYW52YXNMZWZ0KSxcbiAgICAgICAgICAgICAgICAgICAgTWF0aC5yb3VuZCgoY2FudmFzSGVpZ2h0IC8gMikgLSBzaXplKSxcbiAgICAgICAgICAgICAgICAgICAgTWF0aC5yb3VuZCgob3B0aW9ucy5nZXQoJ3RhcmdldCcpIC0gbWluVmFsdWUpICogdW5pdFNpemUgKyBjYW52YXNMZWZ0KSxcbiAgICAgICAgICAgICAgICAgICAgTWF0aC5yb3VuZCgoY2FudmFzSGVpZ2h0IC8gMikgKyBzaXplKSxcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5nZXQoJ3RhcmdldENvbG9yJykpLmFwcGVuZCgpO1xuICAgICAgICAgICAgICAgIHRhcmdldC5kcmF3TGluZShcbiAgICAgICAgICAgICAgICAgICAgTWF0aC5yb3VuZCgob3B0aW9ucy5nZXQoJ3RhcmdldCcpIC0gbWluVmFsdWUpICogdW5pdFNpemUgKyBjYW52YXNMZWZ0IC0gc2l6ZSksXG4gICAgICAgICAgICAgICAgICAgIE1hdGgucm91bmQoY2FudmFzSGVpZ2h0IC8gMiksXG4gICAgICAgICAgICAgICAgICAgIE1hdGgucm91bmQoKG9wdGlvbnMuZ2V0KCd0YXJnZXQnKSAtIG1pblZhbHVlKSAqIHVuaXRTaXplICsgY2FudmFzTGVmdCArIHNpemUpLFxuICAgICAgICAgICAgICAgICAgICBNYXRoLnJvdW5kKGNhbnZhc0hlaWdodCAvIDIpLFxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmdldCgndGFyZ2V0Q29sb3InKSkuYXBwZW5kKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0YXJnZXQucmVuZGVyKCk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIFNldHVwIGEgdmVyeSBzaW1wbGUgXCJ2aXJ0dWFsIGNhbnZhc1wiIHRvIG1ha2UgZHJhd2luZyB0aGUgZmV3IHNoYXBlcyB3ZSBuZWVkIGVhc2llclxuICAgIC8vIFRoaXMgaXMgYWNjZXNzaWJsZSBhcyAkKGZvbykuc2ltcGxlZHJhdygpXG5cbiAgICBWU2hhcGUgPSBjcmVhdGVDbGFzcyh7XG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uICh0YXJnZXQsIGlkLCB0eXBlLCBhcmdzKSB7XG4gICAgICAgICAgICB0aGlzLnRhcmdldCA9IHRhcmdldDtcbiAgICAgICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgICAgICAgICB0aGlzLmFyZ3MgPSBhcmdzO1xuICAgICAgICB9LFxuICAgICAgICBhcHBlbmQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0LmFwcGVuZFNoYXBlKHRoaXMpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIFZDYW52YXNfYmFzZSA9IGNyZWF0ZUNsYXNzKHtcbiAgICAgICAgX3B4cmVnZXg6IC8oXFxkKykocHgpP1xccyokL2ksXG5cbiAgICAgICAgaW5pdDogZnVuY3Rpb24gKHdpZHRoLCBoZWlnaHQsIHRhcmdldCkge1xuICAgICAgICAgICAgaWYgKCF3aWR0aCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMud2lkdGggPSB3aWR0aDtcbiAgICAgICAgICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgICAgICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG4gICAgICAgICAgICB0aGlzLmxhc3RTaGFwZUlkID0gbnVsbDtcbiAgICAgICAgICAgIGlmICh0YXJnZXRbMF0pIHtcbiAgICAgICAgICAgICAgICB0YXJnZXQgPSB0YXJnZXRbMF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAkLmRhdGEodGFyZ2V0LCAnX2pxc192Y2FudmFzJywgdGhpcyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZHJhd0xpbmU6IGZ1bmN0aW9uICh4MSwgeTEsIHgyLCB5MiwgbGluZUNvbG9yLCBsaW5lV2lkdGgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRyYXdTaGFwZShbW3gxLCB5MV0sIFt4MiwgeTJdXSwgbGluZUNvbG9yLCBsaW5lV2lkdGgpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGRyYXdTaGFwZTogZnVuY3Rpb24gKHBhdGgsIGxpbmVDb2xvciwgZmlsbENvbG9yLCBsaW5lV2lkdGgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9nZW5TaGFwZSgnU2hhcGUnLCBbcGF0aCwgbGluZUNvbG9yLCBmaWxsQ29sb3IsIGxpbmVXaWR0aF0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIGRyYXdDaXJjbGU6IGZ1bmN0aW9uICh4LCB5LCByYWRpdXMsIGxpbmVDb2xvciwgZmlsbENvbG9yLCBsaW5lV2lkdGgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9nZW5TaGFwZSgnQ2lyY2xlJywgW3gsIHksIHJhZGl1cywgbGluZUNvbG9yLCBmaWxsQ29sb3IsIGxpbmVXaWR0aF0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIGRyYXdQaWVTbGljZTogZnVuY3Rpb24gKHgsIHksIHJhZGl1cywgc3RhcnRBbmdsZSwgZW5kQW5nbGUsIGxpbmVDb2xvciwgZmlsbENvbG9yKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZ2VuU2hhcGUoJ1BpZVNsaWNlJywgW3gsIHksIHJhZGl1cywgc3RhcnRBbmdsZSwgZW5kQW5nbGUsIGxpbmVDb2xvciwgZmlsbENvbG9yXSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZHJhd1JlY3Q6IGZ1bmN0aW9uICh4LCB5LCB3aWR0aCwgaGVpZ2h0LCBsaW5lQ29sb3IsIGZpbGxDb2xvcikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dlblNoYXBlKCdSZWN0JywgW3gsIHksIHdpZHRoLCBoZWlnaHQsIGxpbmVDb2xvciwgZmlsbENvbG9yXSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0RWxlbWVudDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2FudmFzO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXR1cm4gdGhlIG1vc3QgcmVjZW50bHkgaW5zZXJ0ZWQgc2hhcGUgaWRcbiAgICAgICAgICovXG4gICAgICAgIGdldExhc3RTaGFwZUlkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sYXN0U2hhcGVJZDtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ2xlYXIgYW5kIHJlc2V0IHRoZSBjYW52YXNcbiAgICAgICAgICovXG4gICAgICAgIHJlc2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBhbGVydCgncmVzZXQgbm90IGltcGxlbWVudGVkJyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgX2luc2VydDogZnVuY3Rpb24gKGVsLCB0YXJnZXQpIHtcbiAgICAgICAgICAgICQodGFyZ2V0KS5odG1sKGVsKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ2FsY3VsYXRlIHRoZSBwaXhlbCBkaW1lbnNpb25zIG9mIHRoZSBjYW52YXNcbiAgICAgICAgICovXG4gICAgICAgIF9jYWxjdWxhdGVQaXhlbERpbXM6IGZ1bmN0aW9uICh3aWR0aCwgaGVpZ2h0LCBjYW52YXMpIHtcbiAgICAgICAgICAgIC8vIFhYWCBUaGlzIHNob3VsZCBwcm9iYWJseSBiZSBhIGNvbmZpZ3VyYWJsZSBvcHRpb25cbiAgICAgICAgICAgIHZhciBtYXRjaDtcbiAgICAgICAgICAgIG1hdGNoID0gdGhpcy5fcHhyZWdleC5leGVjKGhlaWdodCk7XG4gICAgICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBpeGVsSGVpZ2h0ID0gbWF0Y2hbMV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMucGl4ZWxIZWlnaHQgPSAkKGNhbnZhcykuaGVpZ2h0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtYXRjaCA9IHRoaXMuX3B4cmVnZXguZXhlYyh3aWR0aCk7XG4gICAgICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBpeGVsV2lkdGggPSBtYXRjaFsxXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5waXhlbFdpZHRoID0gJChjYW52YXMpLndpZHRoKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdlbmVyYXRlIGEgc2hhcGUgb2JqZWN0IGFuZCBpZCBmb3IgbGF0ZXIgcmVuZGVyaW5nXG4gICAgICAgICAqL1xuICAgICAgICBfZ2VuU2hhcGU6IGZ1bmN0aW9uIChzaGFwZXR5cGUsIHNoYXBlYXJncykge1xuICAgICAgICAgICAgdmFyIGlkID0gc2hhcGVDb3VudCsrO1xuICAgICAgICAgICAgc2hhcGVhcmdzLnVuc2hpZnQoaWQpO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBWU2hhcGUodGhpcywgaWQsIHNoYXBldHlwZSwgc2hhcGVhcmdzKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQWRkIGEgc2hhcGUgdG8gdGhlIGVuZCBvZiB0aGUgcmVuZGVyIHF1ZXVlXG4gICAgICAgICAqL1xuICAgICAgICBhcHBlbmRTaGFwZTogZnVuY3Rpb24gKHNoYXBlKSB7XG4gICAgICAgICAgICBhbGVydCgnYXBwZW5kU2hhcGUgbm90IGltcGxlbWVudGVkJyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlcGxhY2Ugb25lIHNoYXBlIHdpdGggYW5vdGhlclxuICAgICAgICAgKi9cbiAgICAgICAgcmVwbGFjZVdpdGhTaGFwZTogZnVuY3Rpb24gKHNoYXBlaWQsIHNoYXBlKSB7XG4gICAgICAgICAgICBhbGVydCgncmVwbGFjZVdpdGhTaGFwZSBub3QgaW1wbGVtZW50ZWQnKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogSW5zZXJ0IG9uZSBzaGFwZSBhZnRlciBhbm90aGVyIGluIHRoZSByZW5kZXIgcXVldWVcbiAgICAgICAgICovXG4gICAgICAgIGluc2VydEFmdGVyU2hhcGU6IGZ1bmN0aW9uIChzaGFwZWlkLCBzaGFwZSkge1xuICAgICAgICAgICAgYWxlcnQoJ2luc2VydEFmdGVyU2hhcGUgbm90IGltcGxlbWVudGVkJyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlbW92ZSBhIHNoYXBlIGZyb20gdGhlIHF1ZXVlXG4gICAgICAgICAqL1xuICAgICAgICByZW1vdmVTaGFwZUlkOiBmdW5jdGlvbiAoc2hhcGVpZCkge1xuICAgICAgICAgICAgYWxlcnQoJ3JlbW92ZVNoYXBlSWQgbm90IGltcGxlbWVudGVkJyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZpbmQgYSBzaGFwZSBhdCB0aGUgc3BlY2lmaWVkIHgveSBjby1vcmRpbmF0ZXNcbiAgICAgICAgICovXG4gICAgICAgIGdldFNoYXBlQXQ6IGZ1bmN0aW9uIChlbCwgeCwgeSkge1xuICAgICAgICAgICAgYWxlcnQoJ2dldFNoYXBlQXQgbm90IGltcGxlbWVudGVkJyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlbmRlciBhbGwgcXVldWVkIHNoYXBlcyBvbnRvIHRoZSBjYW52YXNcbiAgICAgICAgICovXG4gICAgICAgIHJlbmRlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgYWxlcnQoJ3JlbmRlciBub3QgaW1wbGVtZW50ZWQnKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgVkNhbnZhc19jYW52YXMgPSBjcmVhdGVDbGFzcyhWQ2FudmFzX2Jhc2UsIHtcbiAgICAgICAgaW5pdDogZnVuY3Rpb24gKHdpZHRoLCBoZWlnaHQsIHRhcmdldCwgaW50ZXJhY3QpIHtcbiAgICAgICAgICAgIFZDYW52YXNfY2FudmFzLl9zdXBlci5pbml0LmNhbGwodGhpcywgd2lkdGgsIGhlaWdodCwgdGFyZ2V0KTtcbiAgICAgICAgICAgIHRoaXMuY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgICAgICAgICBpZiAodGFyZ2V0WzBdKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0WzBdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgJC5kYXRhKHRhcmdldCwgJ19qcXNfdmNhbnZhcycsIHRoaXMpO1xuICAgICAgICAgICAgJCh0aGlzLmNhbnZhcykuY3NzKHsgZGlzcGxheTogJ2lubGluZS1ibG9jaycsIHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQsIHZlcnRpY2FsQWxpZ246ICd0b3AnIH0pO1xuICAgICAgICAgICAgdGhpcy5faW5zZXJ0KHRoaXMuY2FudmFzLCB0YXJnZXQpO1xuICAgICAgICAgICAgdGhpcy5fY2FsY3VsYXRlUGl4ZWxEaW1zKHdpZHRoLCBoZWlnaHQsIHRoaXMuY2FudmFzKTtcbiAgICAgICAgICAgIHRoaXMuY2FudmFzLndpZHRoID0gdGhpcy5waXhlbFdpZHRoO1xuICAgICAgICAgICAgdGhpcy5jYW52YXMuaGVpZ2h0ID0gdGhpcy5waXhlbEhlaWdodDtcbiAgICAgICAgICAgIHRoaXMuaW50ZXJhY3QgPSBpbnRlcmFjdDtcbiAgICAgICAgICAgIHRoaXMuc2hhcGVzID0ge307XG4gICAgICAgICAgICB0aGlzLnNoYXBlc2VxID0gW107XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRUYXJnZXRTaGFwZUlkID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgJCh0aGlzLmNhbnZhcykuY3NzKHt3aWR0aDogdGhpcy5waXhlbFdpZHRoLCBoZWlnaHQ6IHRoaXMucGl4ZWxIZWlnaHR9KTtcbiAgICAgICAgfSxcblxuICAgICAgICBfZ2V0Q29udGV4dDogZnVuY3Rpb24gKGxpbmVDb2xvciwgZmlsbENvbG9yLCBsaW5lV2lkdGgpIHtcbiAgICAgICAgICAgIHZhciBjb250ZXh0ID0gdGhpcy5jYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgICAgICAgIGlmIChsaW5lQ29sb3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGNvbnRleHQuc3Ryb2tlU3R5bGUgPSBsaW5lQ29sb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb250ZXh0LmxpbmVXaWR0aCA9IGxpbmVXaWR0aCA9PT0gdW5kZWZpbmVkID8gMSA6IGxpbmVXaWR0aDtcbiAgICAgICAgICAgIGlmIChmaWxsQ29sb3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gZmlsbENvbG9yO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQ7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVzZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBjb250ZXh0ID0gdGhpcy5fZ2V0Q29udGV4dCgpO1xuICAgICAgICAgICAgY29udGV4dC5jbGVhclJlY3QoMCwgMCwgdGhpcy5waXhlbFdpZHRoLCB0aGlzLnBpeGVsSGVpZ2h0KTtcbiAgICAgICAgICAgIHRoaXMuc2hhcGVzID0ge307XG4gICAgICAgICAgICB0aGlzLnNoYXBlc2VxID0gW107XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRUYXJnZXRTaGFwZUlkID0gdW5kZWZpbmVkO1xuICAgICAgICB9LFxuXG4gICAgICAgIF9kcmF3U2hhcGU6IGZ1bmN0aW9uIChzaGFwZWlkLCBwYXRoLCBsaW5lQ29sb3IsIGZpbGxDb2xvciwgbGluZVdpZHRoKSB7XG4gICAgICAgICAgICB2YXIgY29udGV4dCA9IHRoaXMuX2dldENvbnRleHQobGluZUNvbG9yLCBmaWxsQ29sb3IsIGxpbmVXaWR0aCksXG4gICAgICAgICAgICAgICAgaSwgcGxlbjtcbiAgICAgICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICBjb250ZXh0Lm1vdmVUbyhwYXRoWzBdWzBdICsgMC41LCBwYXRoWzBdWzFdICsgMC41KTtcbiAgICAgICAgICAgIGZvciAoaSA9IDEsIHBsZW4gPSBwYXRoLmxlbmd0aDsgaSA8IHBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnRleHQubGluZVRvKHBhdGhbaV1bMF0gKyAwLjUsIHBhdGhbaV1bMV0gKyAwLjUpOyAvLyB0aGUgMC41IG9mZnNldCBnaXZlcyB1cyBjcmlzcCBwaXhlbC13aWR0aCBsaW5lc1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGxpbmVDb2xvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgY29udGV4dC5zdHJva2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChmaWxsQ29sb3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGNvbnRleHQuZmlsbCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMudGFyZ2V0WCAhPT0gdW5kZWZpbmVkICYmIHRoaXMudGFyZ2V0WSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAgICAgY29udGV4dC5pc1BvaW50SW5QYXRoKHRoaXMudGFyZ2V0WCwgdGhpcy50YXJnZXRZKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudFRhcmdldFNoYXBlSWQgPSBzaGFwZWlkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIF9kcmF3Q2lyY2xlOiBmdW5jdGlvbiAoc2hhcGVpZCwgeCwgeSwgcmFkaXVzLCBsaW5lQ29sb3IsIGZpbGxDb2xvciwgbGluZVdpZHRoKSB7XG4gICAgICAgICAgICB2YXIgY29udGV4dCA9IHRoaXMuX2dldENvbnRleHQobGluZUNvbG9yLCBmaWxsQ29sb3IsIGxpbmVXaWR0aCk7XG4gICAgICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgY29udGV4dC5hcmMoeCwgeSwgcmFkaXVzLCAwLCAyICogTWF0aC5QSSwgZmFsc2UpO1xuICAgICAgICAgICAgaWYgKHRoaXMudGFyZ2V0WCAhPT0gdW5kZWZpbmVkICYmIHRoaXMudGFyZ2V0WSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAgICAgY29udGV4dC5pc1BvaW50SW5QYXRoKHRoaXMudGFyZ2V0WCwgdGhpcy50YXJnZXRZKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudFRhcmdldFNoYXBlSWQgPSBzaGFwZWlkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGxpbmVDb2xvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgY29udGV4dC5zdHJva2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChmaWxsQ29sb3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGNvbnRleHQuZmlsbCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIF9kcmF3UGllU2xpY2U6IGZ1bmN0aW9uIChzaGFwZWlkLCB4LCB5LCByYWRpdXMsIHN0YXJ0QW5nbGUsIGVuZEFuZ2xlLCBsaW5lQ29sb3IsIGZpbGxDb2xvcikge1xuICAgICAgICAgICAgdmFyIGNvbnRleHQgPSB0aGlzLl9nZXRDb250ZXh0KGxpbmVDb2xvciwgZmlsbENvbG9yKTtcbiAgICAgICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICBjb250ZXh0Lm1vdmVUbyh4LCB5KTtcbiAgICAgICAgICAgIGNvbnRleHQuYXJjKHgsIHksIHJhZGl1cywgc3RhcnRBbmdsZSwgZW5kQW5nbGUsIGZhbHNlKTtcbiAgICAgICAgICAgIGNvbnRleHQubGluZVRvKHgsIHkpO1xuICAgICAgICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgIGlmIChsaW5lQ29sb3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZmlsbENvbG9yKSB7XG4gICAgICAgICAgICAgICAgY29udGV4dC5maWxsKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy50YXJnZXRYICE9PSB1bmRlZmluZWQgJiYgdGhpcy50YXJnZXRZICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgICAgICBjb250ZXh0LmlzUG9pbnRJblBhdGgodGhpcy50YXJnZXRYLCB0aGlzLnRhcmdldFkpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50VGFyZ2V0U2hhcGVJZCA9IHNoYXBlaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgX2RyYXdSZWN0OiBmdW5jdGlvbiAoc2hhcGVpZCwgeCwgeSwgd2lkdGgsIGhlaWdodCwgbGluZUNvbG9yLCBmaWxsQ29sb3IpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9kcmF3U2hhcGUoc2hhcGVpZCwgW1t4LCB5XSwgW3ggKyB3aWR0aCwgeV0sIFt4ICsgd2lkdGgsIHkgKyBoZWlnaHRdLCBbeCwgeSArIGhlaWdodF0sIFt4LCB5XV0sIGxpbmVDb2xvciwgZmlsbENvbG9yKTtcbiAgICAgICAgfSxcblxuICAgICAgICBhcHBlbmRTaGFwZTogZnVuY3Rpb24gKHNoYXBlKSB7XG4gICAgICAgICAgICB0aGlzLnNoYXBlc1tzaGFwZS5pZF0gPSBzaGFwZTtcbiAgICAgICAgICAgIHRoaXMuc2hhcGVzZXEucHVzaChzaGFwZS5pZCk7XG4gICAgICAgICAgICB0aGlzLmxhc3RTaGFwZUlkID0gc2hhcGUuaWQ7XG4gICAgICAgICAgICByZXR1cm4gc2hhcGUuaWQ7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVwbGFjZVdpdGhTaGFwZTogZnVuY3Rpb24gKHNoYXBlaWQsIHNoYXBlKSB7XG4gICAgICAgICAgICB2YXIgc2hhcGVzZXEgPSB0aGlzLnNoYXBlc2VxLFxuICAgICAgICAgICAgICAgIGk7XG4gICAgICAgICAgICB0aGlzLnNoYXBlc1tzaGFwZS5pZF0gPSBzaGFwZTtcbiAgICAgICAgICAgIGZvciAoaSA9IHNoYXBlc2VxLmxlbmd0aDsgaS0tOykge1xuICAgICAgICAgICAgICAgIGlmIChzaGFwZXNlcVtpXSA9PSBzaGFwZWlkKSB7XG4gICAgICAgICAgICAgICAgICAgIHNoYXBlc2VxW2ldID0gc2hhcGUuaWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVsZXRlIHRoaXMuc2hhcGVzW3NoYXBlaWRdO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlcGxhY2VXaXRoU2hhcGVzOiBmdW5jdGlvbiAoc2hhcGVpZHMsIHNoYXBlcykge1xuICAgICAgICAgICAgdmFyIHNoYXBlc2VxID0gdGhpcy5zaGFwZXNlcSxcbiAgICAgICAgICAgICAgICBzaGFwZW1hcCA9IHt9LFxuICAgICAgICAgICAgICAgIHNpZCwgaSwgZmlyc3Q7XG5cbiAgICAgICAgICAgIGZvciAoaSA9IHNoYXBlaWRzLmxlbmd0aDsgaS0tOykge1xuICAgICAgICAgICAgICAgIHNoYXBlbWFwW3NoYXBlaWRzW2ldXSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGkgPSBzaGFwZXNlcS5sZW5ndGg7IGktLTspIHtcbiAgICAgICAgICAgICAgICBzaWQgPSBzaGFwZXNlcVtpXTtcbiAgICAgICAgICAgICAgICBpZiAoc2hhcGVtYXBbc2lkXSkge1xuICAgICAgICAgICAgICAgICAgICBzaGFwZXNlcS5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnNoYXBlc1tzaWRdO1xuICAgICAgICAgICAgICAgICAgICBmaXJzdCA9IGk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChpID0gc2hhcGVzLmxlbmd0aDsgaS0tOykge1xuICAgICAgICAgICAgICAgIHNoYXBlc2VxLnNwbGljZShmaXJzdCwgMCwgc2hhcGVzW2ldLmlkKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNoYXBlc1tzaGFwZXNbaV0uaWRdID0gc2hhcGVzW2ldO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAgaW5zZXJ0QWZ0ZXJTaGFwZTogZnVuY3Rpb24gKHNoYXBlaWQsIHNoYXBlKSB7XG4gICAgICAgICAgICB2YXIgc2hhcGVzZXEgPSB0aGlzLnNoYXBlc2VxLFxuICAgICAgICAgICAgICAgIGk7XG4gICAgICAgICAgICBmb3IgKGkgPSBzaGFwZXNlcS5sZW5ndGg7IGktLTspIHtcbiAgICAgICAgICAgICAgICBpZiAoc2hhcGVzZXFbaV0gPT09IHNoYXBlaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgc2hhcGVzZXEuc3BsaWNlKGkgKyAxLCAwLCBzaGFwZS5pZCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2hhcGVzW3NoYXBlLmlkXSA9IHNoYXBlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIHJlbW92ZVNoYXBlSWQ6IGZ1bmN0aW9uIChzaGFwZWlkKSB7XG4gICAgICAgICAgICB2YXIgc2hhcGVzZXEgPSB0aGlzLnNoYXBlc2VxLFxuICAgICAgICAgICAgICAgIGk7XG4gICAgICAgICAgICBmb3IgKGkgPSBzaGFwZXNlcS5sZW5ndGg7IGktLTspIHtcbiAgICAgICAgICAgICAgICBpZiAoc2hhcGVzZXFbaV0gPT09IHNoYXBlaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgc2hhcGVzZXEuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5zaGFwZXNbc2hhcGVpZF07XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0U2hhcGVBdDogZnVuY3Rpb24gKGVsLCB4LCB5KSB7XG4gICAgICAgICAgICB0aGlzLnRhcmdldFggPSB4O1xuICAgICAgICAgICAgdGhpcy50YXJnZXRZID0geTtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50VGFyZ2V0U2hhcGVJZDtcbiAgICAgICAgfSxcblxuICAgICAgICByZW5kZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBzaGFwZXNlcSA9IHRoaXMuc2hhcGVzZXEsXG4gICAgICAgICAgICAgICAgc2hhcGVzID0gdGhpcy5zaGFwZXMsXG4gICAgICAgICAgICAgICAgc2hhcGVDb3VudCA9IHNoYXBlc2VxLmxlbmd0aCxcbiAgICAgICAgICAgICAgICBjb250ZXh0ID0gdGhpcy5fZ2V0Q29udGV4dCgpLFxuICAgICAgICAgICAgICAgIHNoYXBlaWQsIHNoYXBlLCBpO1xuICAgICAgICAgICAgY29udGV4dC5jbGVhclJlY3QoMCwgMCwgdGhpcy5waXhlbFdpZHRoLCB0aGlzLnBpeGVsSGVpZ2h0KTtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBzaGFwZUNvdW50OyBpKyspIHtcbiAgICAgICAgICAgICAgICBzaGFwZWlkID0gc2hhcGVzZXFbaV07XG4gICAgICAgICAgICAgICAgc2hhcGUgPSBzaGFwZXNbc2hhcGVpZF07XG4gICAgICAgICAgICAgICAgdGhpc1snX2RyYXcnICsgc2hhcGUudHlwZV0uYXBwbHkodGhpcywgc2hhcGUuYXJncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXRoaXMuaW50ZXJhY3QpIHtcbiAgICAgICAgICAgICAgICAvLyBub3QgaW50ZXJhY3RpdmUgc28gbm8gbmVlZCB0byBrZWVwIHRoZSBzaGFwZXMgYXJyYXlcbiAgICAgICAgICAgICAgICB0aGlzLnNoYXBlcyA9IHt9O1xuICAgICAgICAgICAgICAgIHRoaXMuc2hhcGVzZXEgPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfSk7XG5cbiAgICBWQ2FudmFzX3ZtbCA9IGNyZWF0ZUNsYXNzKFZDYW52YXNfYmFzZSwge1xuICAgICAgICBpbml0OiBmdW5jdGlvbiAod2lkdGgsIGhlaWdodCwgdGFyZ2V0KSB7XG4gICAgICAgICAgICB2YXIgZ3JvdXBlbDtcbiAgICAgICAgICAgIFZDYW52YXNfdm1sLl9zdXBlci5pbml0LmNhbGwodGhpcywgd2lkdGgsIGhlaWdodCwgdGFyZ2V0KTtcbiAgICAgICAgICAgIGlmICh0YXJnZXRbMF0pIHtcbiAgICAgICAgICAgICAgICB0YXJnZXQgPSB0YXJnZXRbMF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAkLmRhdGEodGFyZ2V0LCAnX2pxc192Y2FudmFzJywgdGhpcyk7XG4gICAgICAgICAgICB0aGlzLmNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICAgICAgICAgICQodGhpcy5jYW52YXMpLmNzcyh7IGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLCBwb3NpdGlvbjogJ3JlbGF0aXZlJywgb3ZlcmZsb3c6ICdoaWRkZW4nLCB3aWR0aDogd2lkdGgsIGhlaWdodDogaGVpZ2h0LCBtYXJnaW46ICcwcHgnLCBwYWRkaW5nOiAnMHB4JywgdmVydGljYWxBbGlnbjogJ3RvcCd9KTtcbiAgICAgICAgICAgIHRoaXMuX2luc2VydCh0aGlzLmNhbnZhcywgdGFyZ2V0KTtcbiAgICAgICAgICAgIHRoaXMuX2NhbGN1bGF0ZVBpeGVsRGltcyh3aWR0aCwgaGVpZ2h0LCB0aGlzLmNhbnZhcyk7XG4gICAgICAgICAgICB0aGlzLmNhbnZhcy53aWR0aCA9IHRoaXMucGl4ZWxXaWR0aDtcbiAgICAgICAgICAgIHRoaXMuY2FudmFzLmhlaWdodCA9IHRoaXMucGl4ZWxIZWlnaHQ7XG4gICAgICAgICAgICBncm91cGVsID0gJzx2Omdyb3VwIGNvb3Jkb3JpZ2luPVwiMCAwXCIgY29vcmRzaXplPVwiJyArIHRoaXMucGl4ZWxXaWR0aCArICcgJyArIHRoaXMucGl4ZWxIZWlnaHQgKyAnXCInICtcbiAgICAgICAgICAgICAgICAgICAgJyBzdHlsZT1cInBvc2l0aW9uOmFic29sdXRlO3RvcDowO2xlZnQ6MDt3aWR0aDonICsgdGhpcy5waXhlbFdpZHRoICsgJ3B4O2hlaWdodD0nICsgdGhpcy5waXhlbEhlaWdodCArICdweDtcIj48L3Y6Z3JvdXA+JztcbiAgICAgICAgICAgIHRoaXMuY2FudmFzLmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlRW5kJywgZ3JvdXBlbCk7XG4gICAgICAgICAgICB0aGlzLmdyb3VwID0gJCh0aGlzLmNhbnZhcykuY2hpbGRyZW4oKVswXTtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMucHJlcmVuZGVyID0gJyc7XG4gICAgICAgIH0sXG5cbiAgICAgICAgX2RyYXdTaGFwZTogZnVuY3Rpb24gKHNoYXBlaWQsIHBhdGgsIGxpbmVDb2xvciwgZmlsbENvbG9yLCBsaW5lV2lkdGgpIHtcbiAgICAgICAgICAgIHZhciB2cGF0aCA9IFtdLFxuICAgICAgICAgICAgICAgIGluaXRpYWwsIHN0cm9rZSwgZmlsbCwgY2xvc2VkLCB2ZWwsIHBsZW4sIGk7XG4gICAgICAgICAgICBmb3IgKGkgPSAwLCBwbGVuID0gcGF0aC5sZW5ndGg7IGkgPCBwbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2cGF0aFtpXSA9ICcnICsgKHBhdGhbaV1bMF0pICsgJywnICsgKHBhdGhbaV1bMV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaW5pdGlhbCA9IHZwYXRoLnNwbGljZSgwLCAxKTtcbiAgICAgICAgICAgIGxpbmVXaWR0aCA9IGxpbmVXaWR0aCA9PT0gdW5kZWZpbmVkID8gMSA6IGxpbmVXaWR0aDtcbiAgICAgICAgICAgIHN0cm9rZSA9IGxpbmVDb2xvciA9PT0gdW5kZWZpbmVkID8gJyBzdHJva2VkPVwiZmFsc2VcIiAnIDogJyBzdHJva2VXZWlnaHQ9XCInICsgbGluZVdpZHRoICsgJ3B4XCIgc3Ryb2tlQ29sb3I9XCInICsgbGluZUNvbG9yICsgJ1wiICc7XG4gICAgICAgICAgICBmaWxsID0gZmlsbENvbG9yID09PSB1bmRlZmluZWQgPyAnIGZpbGxlZD1cImZhbHNlXCInIDogJyBmaWxsQ29sb3I9XCInICsgZmlsbENvbG9yICsgJ1wiIGZpbGxlZD1cInRydWVcIiAnO1xuICAgICAgICAgICAgY2xvc2VkID0gdnBhdGhbMF0gPT09IHZwYXRoW3ZwYXRoLmxlbmd0aCAtIDFdID8gJ3ggJyA6ICcnO1xuICAgICAgICAgICAgdmVsID0gJzx2OnNoYXBlIGNvb3Jkb3JpZ2luPVwiMCAwXCIgY29vcmRzaXplPVwiJyArIHRoaXMucGl4ZWxXaWR0aCArICcgJyArIHRoaXMucGl4ZWxIZWlnaHQgKyAnXCIgJyArXG4gICAgICAgICAgICAgICAgICcgaWQ9XCJqcXNzaGFwZScgKyBzaGFwZWlkICsgJ1wiICcgK1xuICAgICAgICAgICAgICAgICBzdHJva2UgK1xuICAgICAgICAgICAgICAgICBmaWxsICtcbiAgICAgICAgICAgICAgICAnIHN0eWxlPVwicG9zaXRpb246YWJzb2x1dGU7bGVmdDowcHg7dG9wOjBweDtoZWlnaHQ6JyArIHRoaXMucGl4ZWxIZWlnaHQgKyAncHg7d2lkdGg6JyArIHRoaXMucGl4ZWxXaWR0aCArICdweDtwYWRkaW5nOjBweDttYXJnaW46MHB4O1wiICcgK1xuICAgICAgICAgICAgICAgICcgcGF0aD1cIm0gJyArIGluaXRpYWwgKyAnIGwgJyArIHZwYXRoLmpvaW4oJywgJykgKyAnICcgKyBjbG9zZWQgKyAnZVwiPicgK1xuICAgICAgICAgICAgICAgICcgPC92OnNoYXBlPic7XG4gICAgICAgICAgICByZXR1cm4gdmVsO1xuICAgICAgICB9LFxuXG4gICAgICAgIF9kcmF3Q2lyY2xlOiBmdW5jdGlvbiAoc2hhcGVpZCwgeCwgeSwgcmFkaXVzLCBsaW5lQ29sb3IsIGZpbGxDb2xvciwgbGluZVdpZHRoKSB7XG4gICAgICAgICAgICB2YXIgc3Ryb2tlLCBmaWxsLCB2ZWw7XG4gICAgICAgICAgICB4IC09IHJhZGl1cztcbiAgICAgICAgICAgIHkgLT0gcmFkaXVzO1xuICAgICAgICAgICAgc3Ryb2tlID0gbGluZUNvbG9yID09PSB1bmRlZmluZWQgPyAnIHN0cm9rZWQ9XCJmYWxzZVwiICcgOiAnIHN0cm9rZVdlaWdodD1cIicgKyBsaW5lV2lkdGggKyAncHhcIiBzdHJva2VDb2xvcj1cIicgKyBsaW5lQ29sb3IgKyAnXCIgJztcbiAgICAgICAgICAgIGZpbGwgPSBmaWxsQ29sb3IgPT09IHVuZGVmaW5lZCA/ICcgZmlsbGVkPVwiZmFsc2VcIicgOiAnIGZpbGxDb2xvcj1cIicgKyBmaWxsQ29sb3IgKyAnXCIgZmlsbGVkPVwidHJ1ZVwiICc7XG4gICAgICAgICAgICB2ZWwgPSAnPHY6b3ZhbCAnICtcbiAgICAgICAgICAgICAgICAgJyBpZD1cImpxc3NoYXBlJyArIHNoYXBlaWQgKyAnXCIgJyArXG4gICAgICAgICAgICAgICAgc3Ryb2tlICtcbiAgICAgICAgICAgICAgICBmaWxsICtcbiAgICAgICAgICAgICAgICAnIHN0eWxlPVwicG9zaXRpb246YWJzb2x1dGU7dG9wOicgKyB5ICsgJ3B4OyBsZWZ0OicgKyB4ICsgJ3B4OyB3aWR0aDonICsgKHJhZGl1cyAqIDIpICsgJ3B4OyBoZWlnaHQ6JyArIChyYWRpdXMgKiAyKSArICdweFwiPjwvdjpvdmFsPic7XG4gICAgICAgICAgICByZXR1cm4gdmVsO1xuXG4gICAgICAgIH0sXG5cbiAgICAgICAgX2RyYXdQaWVTbGljZTogZnVuY3Rpb24gKHNoYXBlaWQsIHgsIHksIHJhZGl1cywgc3RhcnRBbmdsZSwgZW5kQW5nbGUsIGxpbmVDb2xvciwgZmlsbENvbG9yKSB7XG4gICAgICAgICAgICB2YXIgdnBhdGgsIHN0YXJ0eCwgc3RhcnR5LCBlbmR4LCBlbmR5LCBzdHJva2UsIGZpbGwsIHZlbDtcbiAgICAgICAgICAgIGlmIChzdGFydEFuZ2xlID09PSBlbmRBbmdsZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnJzsgIC8vIFZNTCBzZWVtcyB0byBoYXZlIHByb2JsZW0gd2hlbiBzdGFydCBhbmdsZSBlcXVhbHMgZW5kIGFuZ2xlLlxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKChlbmRBbmdsZSAtIHN0YXJ0QW5nbGUpID09PSAoMiAqIE1hdGguUEkpKSB7XG4gICAgICAgICAgICAgICAgc3RhcnRBbmdsZSA9IDAuMDsgIC8vIFZNTCBzZWVtcyB0byBoYXZlIGEgcHJvYmxlbSB3aGVuIGRyYXdpbmcgYSBmdWxsIGNpcmNsZSB0aGF0IGRvZXNuJ3Qgc3RhcnQgMFxuICAgICAgICAgICAgICAgIGVuZEFuZ2xlID0gKDIgKiBNYXRoLlBJKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc3RhcnR4ID0geCArIE1hdGgucm91bmQoTWF0aC5jb3Moc3RhcnRBbmdsZSkgKiByYWRpdXMpO1xuICAgICAgICAgICAgc3RhcnR5ID0geSArIE1hdGgucm91bmQoTWF0aC5zaW4oc3RhcnRBbmdsZSkgKiByYWRpdXMpO1xuICAgICAgICAgICAgZW5keCA9IHggKyBNYXRoLnJvdW5kKE1hdGguY29zKGVuZEFuZ2xlKSAqIHJhZGl1cyk7XG4gICAgICAgICAgICBlbmR5ID0geSArIE1hdGgucm91bmQoTWF0aC5zaW4oZW5kQW5nbGUpICogcmFkaXVzKTtcblxuICAgICAgICAgICAgaWYgKHN0YXJ0eCA9PT0gZW5keCAmJiBzdGFydHkgPT09IGVuZHkpIHtcbiAgICAgICAgICAgICAgICBpZiAoKGVuZEFuZ2xlIC0gc3RhcnRBbmdsZSkgPCBNYXRoLlBJKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFByZXZlbnQgdmVyeSBzbWFsbCBzbGljZXMgZnJvbSBiZWluZyBtaXN0YWtlbiBhcyBhIHdob2xlIHBpZVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIGVzc2VudGlhbGx5IGdvaW5nIHRvIGJlIHRoZSBlbnRpcmUgY2lyY2xlLCBzbyBpZ25vcmUgc3RhcnRBbmdsZVxuICAgICAgICAgICAgICAgIHN0YXJ0eCA9IGVuZHggPSB4ICsgcmFkaXVzO1xuICAgICAgICAgICAgICAgIHN0YXJ0eSA9IGVuZHkgPSB5O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoc3RhcnR4ID09PSBlbmR4ICYmIHN0YXJ0eSA9PT0gZW5keSAmJiAoZW5kQW5nbGUgLSBzdGFydEFuZ2xlKSA8IE1hdGguUEkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZwYXRoID0gW3ggLSByYWRpdXMsIHkgLSByYWRpdXMsIHggKyByYWRpdXMsIHkgKyByYWRpdXMsIHN0YXJ0eCwgc3RhcnR5LCBlbmR4LCBlbmR5XTtcbiAgICAgICAgICAgIHN0cm9rZSA9IGxpbmVDb2xvciA9PT0gdW5kZWZpbmVkID8gJyBzdHJva2VkPVwiZmFsc2VcIiAnIDogJyBzdHJva2VXZWlnaHQ9XCIxcHhcIiBzdHJva2VDb2xvcj1cIicgKyBsaW5lQ29sb3IgKyAnXCIgJztcbiAgICAgICAgICAgIGZpbGwgPSBmaWxsQ29sb3IgPT09IHVuZGVmaW5lZCA/ICcgZmlsbGVkPVwiZmFsc2VcIicgOiAnIGZpbGxDb2xvcj1cIicgKyBmaWxsQ29sb3IgKyAnXCIgZmlsbGVkPVwidHJ1ZVwiICc7XG4gICAgICAgICAgICB2ZWwgPSAnPHY6c2hhcGUgY29vcmRvcmlnaW49XCIwIDBcIiBjb29yZHNpemU9XCInICsgdGhpcy5waXhlbFdpZHRoICsgJyAnICsgdGhpcy5waXhlbEhlaWdodCArICdcIiAnICtcbiAgICAgICAgICAgICAgICAgJyBpZD1cImpxc3NoYXBlJyArIHNoYXBlaWQgKyAnXCIgJyArXG4gICAgICAgICAgICAgICAgIHN0cm9rZSArXG4gICAgICAgICAgICAgICAgIGZpbGwgK1xuICAgICAgICAgICAgICAgICcgc3R5bGU9XCJwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0OjBweDt0b3A6MHB4O2hlaWdodDonICsgdGhpcy5waXhlbEhlaWdodCArICdweDt3aWR0aDonICsgdGhpcy5waXhlbFdpZHRoICsgJ3B4O3BhZGRpbmc6MHB4O21hcmdpbjowcHg7XCIgJyArXG4gICAgICAgICAgICAgICAgJyBwYXRoPVwibSAnICsgeCArICcsJyArIHkgKyAnIHdhICcgKyB2cGF0aC5qb2luKCcsICcpICsgJyB4IGVcIj4nICtcbiAgICAgICAgICAgICAgICAnIDwvdjpzaGFwZT4nO1xuICAgICAgICAgICAgcmV0dXJuIHZlbDtcbiAgICAgICAgfSxcblxuICAgICAgICBfZHJhd1JlY3Q6IGZ1bmN0aW9uIChzaGFwZWlkLCB4LCB5LCB3aWR0aCwgaGVpZ2h0LCBsaW5lQ29sb3IsIGZpbGxDb2xvcikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2RyYXdTaGFwZShzaGFwZWlkLCBbW3gsIHldLCBbeCwgeSArIGhlaWdodF0sIFt4ICsgd2lkdGgsIHkgKyBoZWlnaHRdLCBbeCArIHdpZHRoLCB5XSwgW3gsIHldXSwgbGluZUNvbG9yLCBmaWxsQ29sb3IpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlc2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLmdyb3VwLmlubmVySFRNTCA9ICcnO1xuICAgICAgICB9LFxuXG4gICAgICAgIGFwcGVuZFNoYXBlOiBmdW5jdGlvbiAoc2hhcGUpIHtcbiAgICAgICAgICAgIHZhciB2ZWwgPSB0aGlzWydfZHJhdycgKyBzaGFwZS50eXBlXS5hcHBseSh0aGlzLCBzaGFwZS5hcmdzKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnJlbmRlcmVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ncm91cC5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZUVuZCcsIHZlbCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMucHJlcmVuZGVyICs9IHZlbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMubGFzdFNoYXBlSWQgPSBzaGFwZS5pZDtcbiAgICAgICAgICAgIHJldHVybiBzaGFwZS5pZDtcbiAgICAgICAgfSxcblxuICAgICAgICByZXBsYWNlV2l0aFNoYXBlOiBmdW5jdGlvbiAoc2hhcGVpZCwgc2hhcGUpIHtcbiAgICAgICAgICAgIHZhciBleGlzdGluZyA9ICQoJyNqcXNzaGFwZScgKyBzaGFwZWlkKSxcbiAgICAgICAgICAgICAgICB2ZWwgPSB0aGlzWydfZHJhdycgKyBzaGFwZS50eXBlXS5hcHBseSh0aGlzLCBzaGFwZS5hcmdzKTtcbiAgICAgICAgICAgIGV4aXN0aW5nWzBdLm91dGVySFRNTCA9IHZlbDtcbiAgICAgICAgfSxcblxuICAgICAgICByZXBsYWNlV2l0aFNoYXBlczogZnVuY3Rpb24gKHNoYXBlaWRzLCBzaGFwZXMpIHtcbiAgICAgICAgICAgIC8vIHJlcGxhY2UgdGhlIGZpcnN0IHNoYXBlaWQgd2l0aCBhbGwgdGhlIG5ldyBzaGFwZXMgdGhlbiB0b2FzdCB0aGUgcmVtYWluaW5nIG9sZCBzaGFwZXNcbiAgICAgICAgICAgIHZhciBleGlzdGluZyA9ICQoJyNqcXNzaGFwZScgKyBzaGFwZWlkc1swXSksXG4gICAgICAgICAgICAgICAgcmVwbGFjZSA9ICcnLFxuICAgICAgICAgICAgICAgIHNsZW4gPSBzaGFwZXMubGVuZ3RoLFxuICAgICAgICAgICAgICAgIGk7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgc2xlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgcmVwbGFjZSArPSB0aGlzWydfZHJhdycgKyBzaGFwZXNbaV0udHlwZV0uYXBwbHkodGhpcywgc2hhcGVzW2ldLmFyZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZXhpc3RpbmdbMF0ub3V0ZXJIVE1MID0gcmVwbGFjZTtcbiAgICAgICAgICAgIGZvciAoaSA9IDE7IGkgPCBzaGFwZWlkcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICQoJyNqcXNzaGFwZScgKyBzaGFwZWlkc1tpXSkucmVtb3ZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgaW5zZXJ0QWZ0ZXJTaGFwZTogZnVuY3Rpb24gKHNoYXBlaWQsIHNoYXBlKSB7XG4gICAgICAgICAgICB2YXIgZXhpc3RpbmcgPSAkKCcjanFzc2hhcGUnICsgc2hhcGVpZCksXG4gICAgICAgICAgICAgICAgIHZlbCA9IHRoaXNbJ19kcmF3JyArIHNoYXBlLnR5cGVdLmFwcGx5KHRoaXMsIHNoYXBlLmFyZ3MpO1xuICAgICAgICAgICAgZXhpc3RpbmdbMF0uaW5zZXJ0QWRqYWNlbnRIVE1MKCdhZnRlckVuZCcsIHZlbCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVtb3ZlU2hhcGVJZDogZnVuY3Rpb24gKHNoYXBlaWQpIHtcbiAgICAgICAgICAgIHZhciBleGlzdGluZyA9ICQoJyNqcXNzaGFwZScgKyBzaGFwZWlkKTtcbiAgICAgICAgICAgIHRoaXMuZ3JvdXAucmVtb3ZlQ2hpbGQoZXhpc3RpbmdbMF0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldFNoYXBlQXQ6IGZ1bmN0aW9uIChlbCwgeCwgeSkge1xuICAgICAgICAgICAgdmFyIHNoYXBlaWQgPSBlbC5pZC5zdWJzdHIoOCk7XG4gICAgICAgICAgICByZXR1cm4gc2hhcGVpZDtcbiAgICAgICAgfSxcblxuICAgICAgICByZW5kZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5yZW5kZXJlZCkge1xuICAgICAgICAgICAgICAgIC8vIGJhdGNoIHRoZSBpbnRpYWwgcmVuZGVyIGludG8gYSBzaW5nbGUgcmVwYWludFxuICAgICAgICAgICAgICAgIHRoaXMuZ3JvdXAuaW5uZXJIVE1MID0gdGhpcy5wcmVyZW5kZXI7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcblxufSkpfShkb2N1bWVudCwgTWF0aCkpO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
