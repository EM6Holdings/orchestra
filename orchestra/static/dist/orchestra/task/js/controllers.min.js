!function(){"use strict";function t(t,s,n,e,o,r,a,i,u,c){var l=this;l.taskId=n.taskId,l.taskAssignment={},l.angularDirective="",l.activate=function(){e.post("/orchestra/api/interface/task_assignment_information/",{task_id:l.taskId}).success(function(t,n,e,r){l.taskAssignment=t,l.project=t.project,l.is_read_only=t.is_read_only,l.work_times_seconds=t.work_times_seconds,l.is_read_only||(c.setup(l),s.$watch("vm.taskAssignment.task.data",function(t,s){t!=s&&o.$broadcast("task.data:change")},!0),l.autoSaver=i,i.setup(s,l.taskId,l.taskAssignment.task.data));var a,u=window.orchestra.angular_directives[t.workflow.slug][t.workflow_version.slug][t.step.slug];u&&(u=u.replace(/[A-Z]/g,function(t,s){return(s?"-":"")+t.toLowerCase()}),a=["<",u,' task-assignment="vm.taskAssignment"></',u,">"].join("")),l.angularDirective=a})},l.confirmSubmission=function(s,n){return l.submitting=!0,u.signals.fireSignal("submit.before")===!1?void(l.submitting=!1):void e.post("/orchestra/api/interface/submit_task_assignment/",{task_id:l.taskId,task_data:l.taskAssignment.task.data,command_type:s,work_time_seconds:n}).success(function(s,n,e,o){l.autoSaver.cancel(),u.signals.fireSignal("submit.success"),t.path("/")}).error(function(t,s,n,e){u.signals.fireSignal("submit.error")})["finally"](function(){u.signals.fireSignal("submit.finally"),l.submitting=!1})},l.submitTask=function(t){var s=r.open({templateUrl:"submit_task_modal.html",controller:"SubmitModalInstanceCtrl",size:"sm",windowClass:"modal-confirm-submit",resolve:{command:function(){return t},work_times_seconds:function(){return l.work_times_seconds}}});s.result.then(function(s){l.confirmSubmission(t,s)})},l.activate()}t.$inject=["$location","$scope","$routeParams","$http","$rootScope","$modal","$timeout","autoSaveTask","orchestraService","requiredFields"],angular.module("orchestra.task.controllers").controller("TaskController",t)}(),function(){"use strict";function t(t,s,n,e){t.command=n,t.currentIterationHours=null,t.currentIterationMinutes=null,t.workTimesSeconds=e,t.submit=function(){s.close(t.totalSeconds())},t.cancel=function(){s.dismiss("cancel")},t.totalSeconds=function(){var s=parseInt(t.currentIterationHours),n=parseInt(t.currentIterationMinutes);if(isNaN(s))throw"Please provide hours (0 is acceptable)";if(s.toString()!==t.currentIterationHours)throw"Hours should be a whole number";if(0>s)throw"Hours should be >=0";if(isNaN(n))throw"Please provide minutes (0 is acceptable)";if(n.toString()!==t.currentIterationMinutes)throw"Minutes should be a whole number";if(n>59||0>n)throw"Minutes should be <60 and >=0";return 3600*s+60*n},t.secondsError=function(){try{t.totalSeconds()}catch(s){return s}return null},t.hoursMinutes=function(t){var s=(t-t%3600)/3600,n=t%3600/60;return[s,n]},t.totalPreviousSeconds=function(){var s=0;return angular.forEach(t.workTimesSeconds,function(t){s+=t}),s},t.totalPreviousHoursMinutes=function(){return t.hoursMinutes(t.totalPreviousSeconds())},t.totalHoursMinutes=function(){var s=t.totalPreviousSeconds();try{s+=t.totalSeconds()}catch(n){}return t.hoursMinutes(s)},t.$watchGroup(["currentIterationHours","currentIterationMinutes"],function(s,n){for(var e=0;e<s.length;e++)s[e]!=n[e]&&(t.secondsErrorMessage=t.secondsError())})}angular.module("orchestra.task.controllers").controller("SubmitModalInstanceCtrl",t),t.$inject=["$scope","$modalInstance","command","work_times_seconds"]}();
//# sourceMappingURL=data:application/json;base64,
