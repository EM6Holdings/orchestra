!function(){"use strict";var e=angular.module("orchestra.task.services");e.factory("requiredFields",["$rootScope","orchestraService",function(e,r){var t={validators:{"input-checkbox":[function(e){return e.checked}],"input-text":[function(e){return e.value&&e.value.length>0}]},setup:function(e){this.fields={},this.invalid=[],this.data=e},require:function(e,r){void 0===this.fields[e]?this.fields[e]=[r]:this.fields[e].push(r)},validate:function(){var r=this;r.invalid=[];for(var t in r.fields){var i=r.validators[t];if(i){var a=r.fields[t];a.forEach(function(e){var t=!0;i.forEach(function(r){t=t&&r(e)}),t||r.invalid.push(e)})}else console.error("Validators not found for field type:"+t)}return e.$broadcast("orchestra:task:validatedFields"),0===r.invalid.length},registerValidator:function(e,r){var t=this;void 0===t.validators[e]?t.validators[e].push(r):t.validators[e]=[r]}};return r.signals.registerSignal("submit.before",function(){return t.validate()?void 0:(alert("One or more required fields have not been filled out."),!1)}),t}]),angular.module("orchestra.task.directives").directive("orchestraRequiredField",["$compile","requiredFields",function(e,r){return{restrict:"EA",link:function(e,t,i){var a=t.find("input")[0],o=t.attr("data-error-class");if(o||(o=a.getAttribute("type")+"-error"),a&&"checkbox"!=a.getAttribute("type")&&"text"!=a.getAttribute("type"))return void console.error("Unsupported required field type.");r.require("input-"+a.getAttribute("type"),a);var n=function(){r.invalid.indexOf(a)>=0?t.addClass("required-field-error "+o):t.removeClass("required-field-error "+o)};n(),e.$on("orchestra:task:validatedFields",n)}}}])}();
//# sourceMappingURL=data:application/json;base64,
