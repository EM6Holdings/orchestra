!function(){"use strict";var t=angular.module("orchestra.project_management.services");t.factory("projectVis",["$modal","$location","dataService","orchestraApi","crosshair","visUtils","tasksVis","assignmentsVis","iterationsVis","axis",function(t,a,e,n,r,s,o,i,c,d){return{setup:function(t,a,n){var o=this;t.vis=o;var i={scaleHeight:40,barHeight:30,lanePadding:{top:30,bottom:25},marginLeft:200,marginRight:10,scaleWidth:1350};e.setup(a),s.setup(d3.select(n),i),r.setup(),o.axis=d,o.dataService=e,o.params=s.params;var c=s.parentContainer.append("div").attr("class","axis-wrapper");c.append("svg").attr({"class":"x axis",width:s.getSvgWidth(),height:s.params.scaleHeight}).style("margin-left",s.params.marginLeft),c.append("span").attr("class","x label"),t.$on("orchestra:projectManagement:dataUpdate",o.draw),e.updateData(function(){s.parentContainer.node().scrollLeft=100})},draw:function(){d.draw(),o.draw(),r.draw(),s.parentContainer.style({"margin-left":s.svgLeftMargin()+"px"})},createSubsequentTasks:function(){n.createSubsequentTasks(e.projectId).then(function(){e.updateData()},function(t){var a="Could not create subsequent tasks.";400===t.status&&(a=t.data.message),alert(a)})},showProjectData:function(){t.open({templateUrl:"/static/orchestra/project_management/partials/data_modal.html",controller:["$scope",function(t){t.data=e.data.project,t.header=e.data.project.short_description,t.admin_url=e.data.project.admin_url}]})},showSlackActions:function(){var a=t.open({templateUrl:"/static/orchestra/project_management/partials/slack_modal.html",controller:["$scope","$log",function(t,r){t.editSlackMembership=function(t,r){n.editSlackMembership(t,e.projectId,r).then(function(){a.close()},function(a){var e="Could not "+t+" user.";400===a.status&&(e=a.data.message),alert(e)})}}]})},endProject:function(){confirm("Are you sure you want to end this project? This cannot be undone.")&&n.endProject(e.projectId).then(function(){a.path("/")},function(t){var a="Could not end project.";400===t.status&&(a=t.data.message),alert(a)})}}}])}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm9yY2hlc3RyYS9wcm9qZWN0X21hbmFnZW1lbnQvanMvcHJvamVjdFZpcy5qcyJdLCJuYW1lcyI6WyJzZXJ2aWNlTW9kdWxlIiwiYW5ndWxhciIsIm1vZHVsZSIsImZhY3RvcnkiLCIkbW9kYWwiLCIkbG9jYXRpb24iLCJkYXRhU2VydmljZSIsIm9yY2hlc3RyYUFwaSIsImNyb3NzaGFpciIsInZpc1V0aWxzIiwidGFza3NWaXMiLCJhc3NpZ25tZW50c1ZpcyIsIml0ZXJhdGlvbnNWaXMiLCJheGlzIiwic2V0dXAiLCJzY29wZSIsInByb2plY3RJZCIsInBhcmVudFNlbGVjdG9yIiwidmlzIiwidGhpcyIsInBhcmFtcyIsInNjYWxlSGVpZ2h0IiwiYmFySGVpZ2h0IiwibGFuZVBhZGRpbmciLCJ0b3AiLCJib3R0b20iLCJtYXJnaW5MZWZ0IiwibWFyZ2luUmlnaHQiLCJzY2FsZVdpZHRoIiwiZDMiLCJzZWxlY3QiLCJheGlzV3JhcHBlciIsInBhcmVudENvbnRhaW5lciIsImFwcGVuZCIsImF0dHIiLCJjbGFzcyIsIndpZHRoIiwiZ2V0U3ZnV2lkdGgiLCJoZWlnaHQiLCJzdHlsZSIsIiRvbiIsImRyYXciLCJ1cGRhdGVEYXRhIiwibm9kZSIsInNjcm9sbExlZnQiLCJtYXJnaW4tbGVmdCIsInN2Z0xlZnRNYXJnaW4iLCJjcmVhdGVTdWJzZXF1ZW50VGFza3MiLCJ0aGVuIiwicmVzcG9uc2UiLCJlcnJvck1lc3NhZ2UiLCJzdGF0dXMiLCJkYXRhIiwibWVzc2FnZSIsImFsZXJ0Iiwic2hvd1Byb2plY3REYXRhIiwib3BlbiIsInRlbXBsYXRlVXJsIiwiY29udHJvbGxlciIsIiRzY29wZSIsInByb2plY3QiLCJoZWFkZXIiLCJzaG9ydF9kZXNjcmlwdGlvbiIsImFkbWluX3VybCIsInNob3dTbGFja0FjdGlvbnMiLCJtb2RhbEluc3RhbmNlIiwiJGxvZyIsImVkaXRTbGFja01lbWJlcnNoaXAiLCJhY3Rpb24iLCJ1c2VybmFtZSIsImNsb3NlIiwiZW5kUHJvamVjdCIsImNvbmZpcm0iLCJwYXRoIl0sIm1hcHBpbmdzIjoiQ0FBQSxXQUNFLFlBRUEsSUFBSUEsR0FBZ0JDLFFBQVFDLE9BQU8sd0NBRW5DRixHQUFjRyxRQUFRLGNBQUEsU0FBQSxZQUFBLGNBQUEsZUFBQSxZQUFBLFdBQUEsV0FBQSxpQkFBQSxnQkFBQSxPQUFjLFNBQVNDLEVBQVFDLEVBQVdDLEVBQWFDLEVBQWNDLEVBQVdDLEVBQ3BHQyxFQUFVQyxFQUFnQkMsRUFBZUMsR0FJekMsT0FDRUMsTUFBTyxTQUFTQyxFQUFPQyxFQUFXQyxHQUNoQyxHQUFJQyxHQUFNQyxJQUNWSixHQUFNRyxJQUFNQSxDQUVaLElBQUlFLElBQ0ZDLFlBQWUsR0FDZkMsVUFBYSxHQUNiQyxhQUNFQyxJQUFPLEdBQ1BDLE9BQVUsSUFFWkMsV0FBYyxJQUNkQyxZQUFlLEdBQ2ZDLFdBQWMsS0FHaEJ0QixHQUFZUSxNQUFNRSxHQUNsQlAsRUFBU0ssTUFBTWUsR0FBR0MsT0FBT2IsR0FBaUJHLEdBQzFDWixFQUFVTSxRQUdWSSxFQUFJTCxLQUFPQSxFQUNYSyxFQUFJWixZQUFjQSxFQUNsQlksRUFBSUUsT0FBU1gsRUFBU1csTUFFdEIsSUFBSVcsR0FBY3RCLEVBQVN1QixnQkFDeEJDLE9BQU8sT0FDUEMsS0FBSyxRQUFTLGVBRWpCSCxHQUFZRSxPQUFPLE9BQ2hCQyxNQUNDQyxRQUFTLFNBQ1RDLE1BQVMzQixFQUFTNEIsY0FDbEJDLE9BQVU3QixFQUFTVyxPQUFPQyxjQUUzQmtCLE1BQU0sY0FBZTlCLEVBQVNXLE9BQU9NLFlBRXhDSyxFQUFZRSxPQUFPLFFBQ2hCQyxLQUFLLFFBQVMsV0FFakJuQixFQUFNeUIsSUFBSSx5Q0FBMEN0QixFQUFJdUIsTUFDeERuQyxFQUFZb0MsV0FBVyxXQUNyQmpDLEVBQVN1QixnQkFBZ0JXLE9BQU9DLFdBQWEsT0FHakRILEtBQU0sV0FJSjVCLEVBQUs0QixPQUNML0IsRUFBUytCLE9BQ1RqQyxFQUFVaUMsT0FDVmhDLEVBQVN1QixnQkFBZ0JPLE9BQ3ZCTSxjQUFlcEMsRUFBU3FDLGdCQUFrQixRQUc5Q0Msc0JBQXVCLFdBTXJCeEMsRUFBYXdDLHNCQUFzQnpDLEVBQVlVLFdBQzVDZ0MsS0FBSyxXQUNKMUMsRUFBWW9DLGNBQ1gsU0FBU08sR0FDVixHQUFJQyxHQUFlLG9DQUNLLE9BQXBCRCxFQUFTRSxTQUNYRCxFQUFlRCxFQUFTRyxLQUFLQyxTQUUvQkMsTUFBTUosTUFHWkssZ0JBQWlCLFdBSUtuRCxFQUFPb0QsTUFDekJDLFlBQWEsZ0VBQ2JDLFlBQUEsU0FBWSxTQUFTQyxHQUNuQkEsRUFBT1AsS0FBTzlDLEVBQVk4QyxLQUFLUSxRQUMvQkQsRUFBT0UsT0FBU3ZELEVBQVk4QyxLQUFLUSxRQUFRRSxrQkFDekNILEVBQU9JLFVBQVl6RCxFQUFZOEMsS0FBS1EsUUFBUUcsZUFJbERDLGlCQUFrQixXQUtoQixHQUFJQyxHQUFnQjdELEVBQU9vRCxNQUN6QkMsWUFBYSxpRUFDYkMsWUFBQSxTQUFBLE9BQVksU0FBU0MsRUFBUU8sR0FDM0JQLEVBQU9RLG9CQUFzQixTQUFTQyxFQUFRQyxHQUM1QzlELEVBQWE0RCxvQkFBb0JDLEVBQVE5RCxFQUFZVSxVQUFXcUQsR0FDN0RyQixLQUFLLFdBQ0ppQixFQUFjSyxTQUNiLFNBQVNyQixHQUNWLEdBQUlDLEdBQWUsYUFBZWtCLEVBQVMsUUFDbkIsT0FBcEJuQixFQUFTRSxTQUNYRCxFQUFlRCxFQUFTRyxLQUFLQyxTQUUvQkMsTUFBTUosV0FNbEJxQixXQUFZLFdBS05DLFFBQVEsc0VBQ1ZqRSxFQUFhZ0UsV0FBV2pFLEVBQVlVLFdBQ2pDZ0MsS0FBSyxXQUNKM0MsRUFBVW9FLEtBQUssTUFDZCxTQUFTeEIsR0FDVixHQUFJQyxHQUFlLHdCQUNLLE9BQXBCRCxFQUFTRSxTQUNYRCxFQUFlRCxFQUFTRyxLQUFLQyxTQUUvQkMsTUFBTUoiLCJmaWxlIjoib3JjaGVzdHJhL3Byb2plY3RfbWFuYWdlbWVudC9qcy9wcm9qZWN0VmlzLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBzZXJ2aWNlTW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ29yY2hlc3RyYS5wcm9qZWN0X21hbmFnZW1lbnQuc2VydmljZXMnKTtcblxuICBzZXJ2aWNlTW9kdWxlLmZhY3RvcnkoJ3Byb2plY3RWaXMnLCBmdW5jdGlvbigkbW9kYWwsICRsb2NhdGlvbiwgZGF0YVNlcnZpY2UsIG9yY2hlc3RyYUFwaSwgY3Jvc3NoYWlyLCB2aXNVdGlscyxcbiAgICB0YXNrc1ZpcywgYXNzaWdubWVudHNWaXMsIGl0ZXJhdGlvbnNWaXMsIGF4aXMpIHtcbiAgICAvKipcbiAgICAgKiBTZXJ2aWNlIHRvIGNvb3JkaW5hdGUgYW5kIHZpc3VhbGl6ZSB0aGUgcHJvamVjdCBtYW5hZ2VtZW50IHZpZXcuXG4gICAgICovXG4gICAgcmV0dXJuIHtcbiAgICAgIHNldHVwOiBmdW5jdGlvbihzY29wZSwgcHJvamVjdElkLCBwYXJlbnRTZWxlY3Rvcikge1xuICAgICAgICB2YXIgdmlzID0gdGhpcztcbiAgICAgICAgc2NvcGUudmlzID0gdmlzO1xuXG4gICAgICAgIHZhciBwYXJhbXMgPSB7XG4gICAgICAgICAgJ3NjYWxlSGVpZ2h0JzogNDAsXG4gICAgICAgICAgJ2JhckhlaWdodCc6IDMwLFxuICAgICAgICAgICdsYW5lUGFkZGluZyc6IHtcbiAgICAgICAgICAgICd0b3AnOiAzMCxcbiAgICAgICAgICAgICdib3R0b20nOiAyNVxuICAgICAgICAgIH0sXG4gICAgICAgICAgJ21hcmdpbkxlZnQnOiAyMDAsXG4gICAgICAgICAgJ21hcmdpblJpZ2h0JzogMTAsXG4gICAgICAgICAgJ3NjYWxlV2lkdGgnOiAxMzUwXG4gICAgICAgIH07XG5cbiAgICAgICAgZGF0YVNlcnZpY2Uuc2V0dXAocHJvamVjdElkKTtcbiAgICAgICAgdmlzVXRpbHMuc2V0dXAoZDMuc2VsZWN0KHBhcmVudFNlbGVjdG9yKSwgcGFyYW1zKTtcbiAgICAgICAgY3Jvc3NoYWlyLnNldHVwKCk7XG5cbiAgICAgICAgLy8gQWxsb3cgcGFydGlhbCBhY2Nlc3MgdG8gbmVjZXNzYXJ5IHNlcnZpY2VzXG4gICAgICAgIHZpcy5heGlzID0gYXhpcztcbiAgICAgICAgdmlzLmRhdGFTZXJ2aWNlID0gZGF0YVNlcnZpY2U7XG4gICAgICAgIHZpcy5wYXJhbXMgPSB2aXNVdGlscy5wYXJhbXM7XG5cbiAgICAgICAgdmFyIGF4aXNXcmFwcGVyID0gdmlzVXRpbHMucGFyZW50Q29udGFpbmVyXG4gICAgICAgICAgLmFwcGVuZCgnZGl2JylcbiAgICAgICAgICAuYXR0cignY2xhc3MnLCAnYXhpcy13cmFwcGVyJyk7XG5cbiAgICAgICAgYXhpc1dyYXBwZXIuYXBwZW5kKCdzdmcnKVxuICAgICAgICAgIC5hdHRyKHtcbiAgICAgICAgICAgICdjbGFzcyc6ICd4IGF4aXMnLFxuICAgICAgICAgICAgJ3dpZHRoJzogdmlzVXRpbHMuZ2V0U3ZnV2lkdGgoKSxcbiAgICAgICAgICAgICdoZWlnaHQnOiB2aXNVdGlscy5wYXJhbXMuc2NhbGVIZWlnaHQsXG4gICAgICAgICAgfSlcbiAgICAgICAgICAuc3R5bGUoJ21hcmdpbi1sZWZ0JywgdmlzVXRpbHMucGFyYW1zLm1hcmdpbkxlZnQpO1xuXG4gICAgICAgIGF4aXNXcmFwcGVyLmFwcGVuZCgnc3BhbicpXG4gICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ3ggbGFiZWwnKTtcblxuICAgICAgICBzY29wZS4kb24oJ29yY2hlc3RyYTpwcm9qZWN0TWFuYWdlbWVudDpkYXRhVXBkYXRlJywgdmlzLmRyYXcpO1xuICAgICAgICBkYXRhU2VydmljZS51cGRhdGVEYXRhKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZpc1V0aWxzLnBhcmVudENvbnRhaW5lci5ub2RlKCkuc2Nyb2xsTGVmdCA9IDEwMDtcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgZHJhdzogZnVuY3Rpb24oKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEcmF3cy91cGRhdGVzIHRoZSBwcm9qZWN0IG1hbmFnZW1lbnQgdmlzdWFsaXphdGlvbi5cbiAgICAgICAgICovXG4gICAgICAgIGF4aXMuZHJhdygpO1xuICAgICAgICB0YXNrc1Zpcy5kcmF3KCk7XG4gICAgICAgIGNyb3NzaGFpci5kcmF3KCk7XG4gICAgICAgIHZpc1V0aWxzLnBhcmVudENvbnRhaW5lci5zdHlsZSh7XG4gICAgICAgICAgJ21hcmdpbi1sZWZ0JzogdmlzVXRpbHMuc3ZnTGVmdE1hcmdpbigpICsgJ3B4JyxcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgY3JlYXRlU3Vic2VxdWVudFRhc2tzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEhhbmRsZXMgdGhlIHByb21pc2UgcmV0dXJuZWQgYnkgb3JjaGVzdHJhQXBpLmNyZWF0ZVN1YnNlcXVlbnRUYXNrc1xuICAgICAgICAgKiBpbiB0aGUgdmlzdWFsaXphdGlvbi5cbiAgICAgICAgICovXG4gICAgICAgIHZhciB2aXMgPSB0aGlzO1xuICAgICAgICBvcmNoZXN0cmFBcGkuY3JlYXRlU3Vic2VxdWVudFRhc2tzKGRhdGFTZXJ2aWNlLnByb2plY3RJZClcbiAgICAgICAgICAudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGRhdGFTZXJ2aWNlLnVwZGF0ZURhdGEoKTtcbiAgICAgICAgICB9LCBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgdmFyIGVycm9yTWVzc2FnZSA9ICdDb3VsZCBub3QgY3JlYXRlIHN1YnNlcXVlbnQgdGFza3MuJztcbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDQwMCkge1xuICAgICAgICAgICAgICBlcnJvck1lc3NhZ2UgPSByZXNwb25zZS5kYXRhLm1lc3NhZ2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhbGVydChlcnJvck1lc3NhZ2UpO1xuICAgICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIHNob3dQcm9qZWN0RGF0YTogZnVuY3Rpb24oKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEaXNwbGF5cyBwcm9qZWN0LWxldmVsIGRhdGEgaW4gYSBtb2RhbC5cbiAgICAgICAgICovXG4gICAgICAgIHZhciBtb2RhbEluc3RhbmNlID0gJG1vZGFsLm9wZW4oe1xuICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL3N0YXRpYy9vcmNoZXN0cmEvcHJvamVjdF9tYW5hZ2VtZW50L3BhcnRpYWxzL2RhdGFfbW9kYWwuaHRtbCcsXG4gICAgICAgICAgY29udHJvbGxlcjogZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAkc2NvcGUuZGF0YSA9IGRhdGFTZXJ2aWNlLmRhdGEucHJvamVjdDtcbiAgICAgICAgICAgICRzY29wZS5oZWFkZXIgPSBkYXRhU2VydmljZS5kYXRhLnByb2plY3Quc2hvcnRfZGVzY3JpcHRpb247XG4gICAgICAgICAgICAkc2NvcGUuYWRtaW5fdXJsID0gZGF0YVNlcnZpY2UuZGF0YS5wcm9qZWN0LmFkbWluX3VybDtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIHNob3dTbGFja0FjdGlvbnM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogRGlzcGxheXMgb3B0aW9ucyB0byBhZGQvcmVtb3ZlIFNsYWNrIHVzZXJzIHRvIHRoZSBwcm9qZWN0IGdyb3VwIGluXG4gICAgICAgICAqIGEgbW9kYWwuXG4gICAgICAgICAqL1xuICAgICAgICB2YXIgbW9kYWxJbnN0YW5jZSA9ICRtb2RhbC5vcGVuKHtcbiAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9zdGF0aWMvb3JjaGVzdHJhL3Byb2plY3RfbWFuYWdlbWVudC9wYXJ0aWFscy9zbGFja19tb2RhbC5odG1sJyxcbiAgICAgICAgICBjb250cm9sbGVyOiBmdW5jdGlvbigkc2NvcGUsICRsb2cpIHtcbiAgICAgICAgICAgICRzY29wZS5lZGl0U2xhY2tNZW1iZXJzaGlwID0gZnVuY3Rpb24oYWN0aW9uLCB1c2VybmFtZSkge1xuICAgICAgICAgICAgICBvcmNoZXN0cmFBcGkuZWRpdFNsYWNrTWVtYmVyc2hpcChhY3Rpb24sIGRhdGFTZXJ2aWNlLnByb2plY3RJZCwgdXNlcm5hbWUpXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICBtb2RhbEluc3RhbmNlLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBlcnJvck1lc3NhZ2UgPSAnQ291bGQgbm90ICcgKyBhY3Rpb24gKyAnIHVzZXIuJztcbiAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDQwMCkge1xuICAgICAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2UgPSByZXNwb25zZS5kYXRhLm1lc3NhZ2U7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBhbGVydChlcnJvck1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIGVuZFByb2plY3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogSGFuZGxlcyB0aGUgcHJvbWlzZSByZXR1cm5lZCBieSBvcmNoZXN0cmFBcGkuZW5kUHJvamVjdCBpbiB0aGVcbiAgICAgICAgICogdmlzdWFsaXphdGlvbi5cbiAgICAgICAgICovXG4gICAgICAgIGlmIChjb25maXJtKCdBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gZW5kIHRoaXMgcHJvamVjdD8gVGhpcyBjYW5ub3QgYmUgdW5kb25lLicpKSB7XG4gICAgICAgICAgb3JjaGVzdHJhQXBpLmVuZFByb2plY3QoZGF0YVNlcnZpY2UucHJvamVjdElkKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKCcvJyk7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgICB2YXIgZXJyb3JNZXNzYWdlID0gJ0NvdWxkIG5vdCBlbmQgcHJvamVjdC4nO1xuICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSA0MDApIHtcbiAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2UgPSByZXNwb25zZS5kYXRhLm1lc3NhZ2U7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYWxlcnQoZXJyb3JNZXNzYWdlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgIH07XG4gIH0pO1xufSkoKTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
