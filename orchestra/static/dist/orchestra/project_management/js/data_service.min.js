!function(){"use strict";var t=angular.module("orchestra.project_management.services");t.factory("dataService",["$rootScope","$location","orchestraApi",function(t,n,a){var s,e=new Date;return{setup:function(t){s={tasks:{}},this.projectId=t},updateData:function(s){var e=this;a.projectInformation(this.projectId).then(function(a){e.setData(a.data),"Aborted"===e.data.project.status?(alert("Project is aborted."),n.path("/")):(t.$broadcast("orchestra:projectManagement:dataUpdate"),s&&s())},function(t){var n="Error updating data.";400===t.status&&(n=t.data.message),alert(n)})},setData:function(t){this.data=t;var n={};this.data.steps.forEach(function(t){n[t.slug]=t}),this.data.steps=n;for(var a in this.data.tasks){var s=this.data.tasks[a];s.is_human=this.data.steps[s.step_slug].is_human,s.assignments.forEach(function(t){t.task=s,t.iterations.forEach(function(n,a){n.assignment=t})})}var e=this;this.timeSortedSlugs=Object.keys(this.data.tasks).sort(function(t,n){var a=e.data.tasks[t],s=e.data.tasks[n];return d3.ascending(new Date(a.start_datetime),new Date(s.start_datetime))})},taskFromKey:function(t){return this.data.tasks[t]},keyFromTask:function(t){return t.step_slug},awaitingAssignment:function(t){var n=["Awaiting Processing","Pending Review"];return n.indexOf(t.status)>=0},inProgressAssignment:function(t){var n=["Processing","Post-review Processing","Reviewing"];return n.indexOf(t.status)>=0||this.awaitingAssignment(t)},taskMeta:function(t,n,a){var e=s.tasks[t]||{};return void 0===a?e[n]:(e[n]=a,void(s.tasks[t]=e))},taskEnd:function(t){if(this.awaitingAssignment(t))return e.toString();var n=t.start_datetime;return t.assignments.forEach(function(t){if(t.iterations.length){var a=t.iterations[t.iterations.length-1];new Date(a.end_datetime)>new Date(n)&&(n=a.end_datetime)}}),n},assignmentFromKey:function(t){return this.taskFromKey(t.taskKey).assignments[t.assignmentIndex]},keyFromAssignment:function(t){var n=this;return{taskKey:n.keyFromTask(t.task),assignmentIndex:n.indexFromAssignment(t)}},indexFromAssignment:function(t){return t.task.assignments.indexOf(t)},iterationFromKey:function(t){return this.assignmentFromKey(t.assignmentKey).iterations[t.iterationIndex]},keyFromIteration:function(t){var n=this;return{assignmentKey:n.keyFromAssignment(t.assignment),iterationIndex:t.assignment.iterations.indexOf(t)}}}}])}();
//# sourceMappingURL=data:application/json;base64,
